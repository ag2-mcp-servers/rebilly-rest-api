# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T08:54:44+00:00

from __future__ import annotations

from datetime import date as date_aliased
from datetime import datetime as datetime_aliased
from enum import Enum
from typing import Any, Dict, List, Literal, Optional, Union

from pydantic import (
    AnyUrl,
    BaseModel,
    ConfigDict,
    EmailStr,
    Field,
    PositiveFloat,
    RootModel,
    SecretStr,
    confloat,
    conint,
    constr,
)


class Credentials(BaseModel):
    accountId: str = Field(..., description='A1Gateway account ID.')
    password: SecretStr = Field(..., description='A1Gateway password.')


class Addres(BaseModel):
    address: Optional[str] = Field(None, description='Street Address Line 1.')
    address2: Optional[str] = Field(None, description='Street Address Line 2.')
    birthplace: Optional[bool] = Field(
        False, description='This address is their birth place.'
    )
    city: Optional[str] = Field(None, description='City.')
    country: Optional[str] = Field(None, description='Country.')
    region: Optional[str] = Field(None, description='State/Province/Region.')


class Authenticity(Enum):
    strong = 'strong'
    weak = 'weak'
    unknown = 'unknown'


class Alias(BaseModel):
    authenticity: Optional[Authenticity] = Field(
        None, description='The level of confidence in the alias.'
    )
    firstName: Optional[str] = Field(None, description='First name of alias.')
    lastName: Optional[str] = Field(None, description='Last name of alias.')


class Confidence(Enum):
    weak = 'weak'
    medium = 'medium'
    strong = 'strong'
    very_strong = 'very-strong'


class PassportItem(BaseModel):
    number: Optional[str] = Field(None, description='Passport number.')
    registrationDate: Optional[date_aliased] = Field(
        None, description='Passport registration date.'
    )


class SourceType(Enum):
    pep = 'pep'
    sanctions = 'sanctions'
    adverse_media = 'adverse-media'


class Type(Enum):
    individual = 'individual'
    entity = 'entity'


class Name(Enum):
    Plaid = 'Plaid'


class AchPlaidFeature(BaseModel):
    expirationTime: Optional[datetime_aliased] = Field(
        None, description='The expiration time of a `linkToken`.'
    )
    linkToken: Optional[str] = Field(
        None, description='The Plaid `linkToken` for frontend integrations.'
    )
    name: Optional[Name] = Field(None, description='The feature name.')


class AclPermissions(RootModel[List[str]]):
    root: List[str] = Field(
        ...,
        examples=[
            [
                'PostFile',
                'StorefrontGetAccount',
                'StorefrontGetWebsite',
                'StorefrontGetKycDocumentCollection',
                'StorefrontGetKycDocument',
                'StorefrontPostKycDocument',
            ]
        ],
    )


class AcquirerName(Enum):
    Adyen = 'Adyen'
    Alipay = 'Alipay'
    AIB = 'AIB'
    Airpay = 'Airpay'
    ApcoPay = 'ApcoPay'
    AsiaPaymentGateway = 'AsiaPaymentGateway'
    AstroPay_Card = 'AstroPay Card'
    Ipay_Options = 'Ipay Options'
    B_S = 'B+S'
    Bambora = 'Bambora'
    BitPay = 'BitPay'
    Bank_of_America = 'Bank of America'
    Bank_of_Moscow = 'Bank of Moscow'
    Bank_of_Rebilly = 'Bank of Rebilly'
    Bank_One = 'Bank One'
    BMO_Harris_Bank = 'BMO Harris Bank'
    Borgun = 'Borgun'
    BraintreePayments = 'BraintreePayments'
    Cardknox = 'Cardknox'
    CASHlib = 'CASHlib'
    CashToCode = 'CashToCode'
    Catalunya_Caixa = 'Catalunya Caixa'
    CCAvenue = 'CCAvenue'
    Chase = 'Chase'
    ChinaUnionPay = 'ChinaUnionPay'
    CIM = 'CIM'
    Circle = 'Circle'
    Citadel = 'Citadel'
    Clearhaus = 'Clearhaus'
    CODVoucher = 'CODVoucher'
    CoinPayments = 'CoinPayments'
    Conekta = 'Conekta'
    Coppr = 'Coppr'
    Credorax = 'Credorax'
    Cryptonator = 'Cryptonator'
    CyberSource = 'CyberSource'
    dLocal = 'dLocal'
    Dragonphoenix = 'Dragonphoenix'
    EBANX = 'EBANX'
    ecoPayz = 'ecoPayz'
    EcorePay = 'EcorePay'
    Elavon = 'Elavon'
    EMS = 'EMS'
    EPG = 'EPG'
    Euteller = 'Euteller'
    eZeeWallet = 'eZeeWallet'
    ezyEFT = 'ezyEFT'
    Fifth_Third_Bank = 'Fifth Third Bank'
    Finrax = 'Finrax'
    First_Data_Buypass = 'First Data Buypass'
    First_Data_Nashville = 'First Data Nashville'
    First_Data_North = 'First Data North'
    First_Data_Omaha = 'First Data Omaha'
    FinTecSystems = 'FinTecSystems'
    Flexepin = 'Flexepin'
    Forte = 'Forte'
    FundSend = 'FundSend'
    Gigadat = 'Gigadat'
    Global_East = 'Global East'
    Gooney = 'Gooney'
    Gpaysafe = 'Gpaysafe'
    Heartland = 'Heartland'
    HiPay = 'HiPay'
    HSBC = 'HSBC'
    iCanPay = 'iCanPay'
    ICEPAY = 'ICEPAY'
    iCheque = 'iCheque'
    Ilixium = 'Ilixium'
    Ingenico = 'Ingenico'
    INOVAPAY = 'INOVAPAY'
    Intuit = 'Intuit'
    Jeton = 'Jeton'
    Khelocard = 'Khelocard'
    Konnektive = 'Konnektive'
    loonie = 'loonie'
    LPG = 'LPG'
    Masapay = 'Masapay'
    Merrick = 'Merrick'
    Mission_Valley_Bank = 'Mission Valley Bank'
    MiFinity = 'MiFinity'
    Moneris = 'Moneris'
    MuchBetter = 'MuchBetter'
    MyFatoorah = 'MyFatoorah'
    NATWEST = 'NATWEST'
    Neosurf = 'Neosurf'
    Netbanking = 'Netbanking'
    Neteller = 'Neteller'
    NinjaWallet = 'NinjaWallet'
    NMI = 'NMI'
    NuaPay = 'NuaPay'
    OchaPay = 'OchaPay'
    Onlineueberweisen = 'Onlineueberweisen'
    OnRamp = 'OnRamp'
    Other = 'Other'
    Panamerican = 'Panamerican'
    Panda_Bank = 'Panda Bank'
    Paramount = 'Paramount'
    ParamountEft = 'ParamountEft'
    ParamountInterac = 'ParamountInterac'
    Pay4fun = 'Pay4fun'
    PayCash = 'PayCash'
    PayClub = 'PayClub'
    PaymentAsia = 'PaymentAsia'
    PaymenTechnologies = 'PaymenTechnologies'
    PaymentsOS = 'PaymentsOS'
    Paymero = 'Paymero'
    Paynetics = 'Paynetics'
    PayPal = 'PayPal'
    Payr = 'Payr'
    PayTabs = 'PayTabs'
    PayULatam = 'PayULatam'
    Payvision = 'Payvision'
    Piastrix = 'Piastrix'
    Peoples_Trust_Company = 'Peoples Trust Company'
    PostFinance = 'PostFinance'
    Privatbank = 'Privatbank'
    Prosa = 'Prosa'
    QQPay = 'QQPay'
    Rapyd = 'Rapyd'
    RBC = 'RBC'
    RBS_WorldPay = 'RBS WorldPay'
    RealTime = 'RealTime'
    Rotessa = 'Rotessa'
    SaltarPay = 'SaltarPay'
    SecureTrading = 'SecureTrading'
    SecurionPay = 'SecurionPay'
    Skrill = 'Skrill'
    SmartInvoice = 'SmartInvoice'
    SMSVoucher = 'SMSVoucher'
    Sofort = 'Sofort'
    SparkPay = 'SparkPay'
    State_Bank_of_Mauritius = 'State Bank of Mauritius'
    Stripe = 'Stripe'
    TBI = 'TBI'
    TestProcessor = 'TestProcessor'
    ToditoCash = 'ToditoCash'
    Trustly = 'Trustly'
    TrustPay = 'TrustPay'
    TrustsPay = 'TrustsPay'
    TSYS = 'TSYS'
    TWINT = 'TWINT'
    UPayCard = 'UPayCard'
    Vantiv = 'Vantiv'
    VCreditos = 'VCreditos'
    VoicePay = 'VoicePay'
    Wallet88 = 'Wallet88'
    WeChat_Pay = 'WeChat Pay'
    Wells_Fargo = 'Wells Fargo'
    Wing_Hang_Bank = 'Wing Hang Bank'
    Wirecard = 'Wirecard'
    WorldPay = 'WorldPay'
    XPay = 'XPay'
    Zimpler = 'Zimpler'
    Zotapay = 'Zotapay'


class AddressMatches(BaseModel):
    city: Optional[str] = Field(
        None,
        description='The customer city if it was matched, null otherwise.',
        examples=['London'],
    )
    date: Optional[date_aliased] = Field(
        None,
        description='The date on the document proving the document is recent.',
        examples=['2021-01-01T00:00:00.000Z'],
    )
    firstName: Optional[str] = Field(
        None,
        description='The customer first name if it was matched, null otherwise.',
        examples=['John'],
    )
    lastName: Optional[str] = Field(
        None,
        description='The customer last name if it was matched, null otherwise.',
        examples=['Doe'],
    )
    line1: Optional[str] = Field(
        None,
        description='The customer address if it was matched, null otherwise.',
        examples=['36 Craven St'],
    )
    phone: Optional[str] = Field(
        None,
        description='The phone of the company or agency that sent the document.',
        examples=['(123) 456-7890'],
    )
    postalCode: Optional[str] = Field(
        None,
        description='The customer postal code if it was matched, null otherwise.',
        examples=['WC2N 5NF'],
    )
    region: Optional[str] = Field(
        None,
        description='The customer region if it was matched, null otherwise.',
        examples=['London'],
    )
    uniqueWords: Optional[int] = Field(
        None, description='The number of unique words in the document.', examples=[175]
    )
    uniqueWordsResult: Optional[bool] = Field(
        None,
        description='Flag that indicates if the unique words passed the threshold.',
        examples=[True],
    )
    wordCount: Optional[int] = Field(
        None, description='The number of words in the document.', examples=[350]
    )
    wordCountResult: Optional[bool] = Field(
        None,
        description='Flag that indicates if the word count passed the threshold.',
        examples=[True],
    )


class Credentials1(BaseModel):
    apiKey: SecretStr = Field(..., description='Adyen api key.')
    merchantAccount: str = Field(..., description='Adyen merchant account.')


class Settings(BaseModel):
    url: str = Field(..., description='Adyen post URL.')


class Credentials2(BaseModel):
    apiKey: SecretStr = Field(..., description='Airpay api key.')
    merchantId: str = Field(..., description='Airpay merchant ID.')
    password: SecretStr = Field(..., description='Airpay password.')
    username: str = Field(..., description='Airpay username.')


class Status(Enum):
    active = 'active'
    deactivated = 'deactivated'


class AlternativePaymentMethods(Enum):
    cash = 'cash'
    check = 'check'
    paypal = 'paypal'
    AdvCash = 'AdvCash'
    Alfa_click = 'Alfa-click'
    Alipay = 'Alipay'
    AstroPay_Card = 'AstroPay Card'
    AstroPay_GO = 'AstroPay-GO'
    bank_transfer = 'bank-transfer'
    bank_transfer_2 = 'bank-transfer-2'
    bank_transfer_3 = 'bank-transfer-3'
    bank_transfer_4 = 'bank-transfer-4'
    bank_transfer_5 = 'bank-transfer-5'
    bank_transfer_6 = 'bank-transfer-6'
    bank_transfer_7 = 'bank-transfer-7'
    bank_transfer_8 = 'bank-transfer-8'
    bank_transfer_9 = 'bank-transfer-9'
    Beeline = 'Beeline'
    Belfius_direct_net = 'Belfius-direct-net'
    bitcoin = 'bitcoin'
    Boleto = 'Boleto'
    cash_deposit = 'cash-deposit'
    CASHlib = 'CASHlib'
    CashToCode = 'CashToCode'
    China_UnionPay = 'China UnionPay'
    CODVoucher = 'CODVoucher'
    Conekta_oxxo = 'Conekta-oxxo'
    Cupon_de_pagos = 'Cupon-de-pagos'
    cryptocurrency = 'cryptocurrency'
    domestic_cards = 'domestic-cards'
    echeck = 'echeck'
    ecoPayz = 'ecoPayz'
    ecoVoucher = 'ecoVoucher'
    EPS = 'EPS'
    ePay_bg = 'ePay.bg'
    eZeeWallet = 'eZeeWallet'
    Flexepin = 'Flexepin'
    Giropay = 'Giropay'
    Gpaysafe = 'Gpaysafe'
    Google_Pay = 'Google Pay'
    iDebit = 'iDebit'
    iDEAL = 'iDEAL'
    ING_homepay = 'ING-homepay'
    INOVAPAY_pin = 'INOVAPAY-pin'
    INOVAPAY_wallet = 'INOVAPAY-wallet'
    InstaDebit = 'InstaDebit'
    instant_bank_transfer = 'instant-bank-transfer'
    Interac = 'Interac'
    Interac_online = 'Interac-online'
    Interac_eTransfer = 'Interac-eTransfer'
    invoice = 'invoice'
    iWallet = 'iWallet'
    Jeton = 'Jeton'
    jpay = 'jpay'
    Khelocard = 'Khelocard'
    Klarna = 'Klarna'
    loonie = 'loonie'
    Megafon = 'Megafon'
    MiFinity_eWallet = 'MiFinity-eWallet'
    miscellaneous = 'miscellaneous'
    Bancontact = 'Bancontact'
    MTS = 'MTS'
    MuchBetter = 'MuchBetter'
    Neosurf = 'Neosurf'
    Netbanking = 'Netbanking'
    Neteller = 'Neteller'
    Nordea_Solo = 'Nordea-Solo'
    OchaPay = 'OchaPay'
    online_bank_transfer = 'online-bank-transfer'
    Onlineueberweisen = 'Onlineueberweisen'
    oriental_wallet = 'oriental-wallet'
    OXXO = 'OXXO'
    Pagsmile_deposit_express = 'Pagsmile-deposit-express'
    Pagsmile_lottery = 'Pagsmile-lottery'
    PayCash = 'PayCash'
    Payeer = 'Payeer'
    PaymentAsia_crypto = 'PaymentAsia-crypto'
    Paymero = 'Paymero'
    Perfect_money = 'Perfect-money'
    Piastrix = 'Piastrix'
    plaid_account = 'plaid-account'
    PayTabs = 'PayTabs'
    Paysafecard = 'Paysafecard'
    Paysafecash = 'Paysafecash'
    Pay4Fun = 'Pay4Fun'
    PinPay = 'PinPay'
    phone = 'phone'
    PhonePe = 'PhonePe'
    POLi = 'POLi'
    PostFinance_card = 'PostFinance-card'
    PostFinance_e_finance = 'PostFinance-e-finance'
    Przelewy24 = 'Przelewy24'
    QIWI = 'QIWI'
    QQPay = 'QQPay'
    Resurs = 'Resurs'
    SEPA = 'SEPA'
    Skrill = 'Skrill'
    Skrill_Rapid_Transfer = 'Skrill Rapid Transfer'
    SMSVoucher = 'SMSVoucher'
    Sofort = 'Sofort'
    SparkPay = 'SparkPay'
    swift_dbt = 'swift-dbt'
    Tele2 = 'Tele2'
    Terminaly_RF = 'Terminaly-RF'
    ToditoCash_card = 'ToditoCash-card'
    Trustly = 'Trustly'
    UPayCard = 'UPayCard'
    UPI = 'UPI'
    VCreditos = 'VCreditos'
    VenusPoint = 'VenusPoint'
    voucher = 'voucher'
    voucher_2 = 'voucher-2'
    voucher_3 = 'voucher-3'
    voucher_4 = 'voucher-4'
    Webmoney = 'Webmoney'
    Webpay = 'Webpay'
    Webpay_2 = 'Webpay-2'
    Webpay_Card = 'Webpay Card'
    WeChat_Pay = 'WeChat Pay'
    XPay_P2P = 'XPay-P2P'
    XPay_QR = 'XPay-QR'
    Yandex_money = 'Yandex-money'
    Zotapay = 'Zotapay'
    Zimpler = 'Zimpler'


class Credentials3(BaseModel):
    accessCode: SecretStr = Field(..., description='Access Code.')
    merchantId: str = Field(..., description='Merchant ID.')
    password: SecretStr = Field(
        ..., description='Password (used for refund, void and capture).'
    )
    user: str = Field(..., description='User (used for refund, void and capture).')


class Settings1(BaseModel):
    url: str = Field(..., description='Virtual Payment Client URL.')


class Method(Enum):
    none = 'none'
    partial = 'partial'
    discount = 'discount'


class AmountAdjustment(BaseModel):
    method: Method


class AmountAdjustmentTolerance(RootModel[conint(ge=0, le=5)]):
    root: conint(ge=0, le=5) = Field(
        ..., description='Tolerance percentage for settled amount.', examples=[5]
    )


class Credentials4(BaseModel):
    MerchantID: str = Field(..., description='ApcoPay merchant ID.')
    MerchantPassword: SecretStr = Field(..., description='ApcoPay merchant password.')
    profileID: str = Field(..., description='ApcoPay profile ID.')
    secretWord: SecretStr = Field(..., description='ApcoPay secret word.')


class Method3(Enum):
    AFTERPAY = 'AFTERPAY'
    IDEAL = 'IDEAL'
    CREDITCLICK = 'CREDITCLICK'
    BANCONTACT = 'BANCONTACT'
    ONLINEUBERWEISEN = 'ONLINEUBERWEISEN'


class Settings2(BaseModel):
    method: Method3 = Field(..., description="ApcoPay's method.")


class ValidationRequest(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='A name of your store, suitable for display.',
        examples=['My Store'],
    )
    domainName: Optional[str] = Field(
        None,
        description='The domain where the client code like FramePay is executed. Should be registered in the Apple Pay console by Rebilly before using.\n',
        examples=['www.example.com'],
    )
    validationURL: Optional[str] = Field(
        None,
        description='The URL provided by the Apple Pay SDK to perform the validation.',
    )


class Rel(Enum):
    approvalUrl = 'approvalUrl'


class Credentials5(BaseModel):
    merchantNumber: str = Field(..., description='AsiaPaymentGateway merchant number.')
    secretKey: SecretStr = Field(
        ..., description='AsiaPaymentGateway secret key for hash.'
    )


class Credentials6(BaseModel):
    api_key: Optional[SecretStr] = Field(
        None, description='One Touch Astropay API key.'
    )
    secret_key: SecretStr = Field(..., description='AstroPay Card secret key.')
    x_login: str = Field(..., description='AstroPay Card login.')
    x_tran_key: SecretStr = Field(..., description='AstroPay Card transaction key.')


class Settings3(BaseModel):
    oneTouchApi: Optional[bool] = Field(
        False, description='Use One Touch Astropay API.'
    )


class RelatedType(Enum):
    customer = 'customer'
    dispute = 'dispute'
    gateway_timeline_comment = 'gateway-timeline-comment'
    invoice = 'invoice'
    organization = 'organization'
    payment = 'payment'
    plan = 'plan'
    product = 'product'
    subscription = 'subscription'
    transaction = 'transaction'
    customer_timeline_comment = 'customer-timeline-comment'
    transaction_timeline_comment = 'transaction-timeline-comment'
    order_timeline_comment = 'order-timeline-comment'


class Rel1(Enum):
    customer = 'customer'
    dispute = 'dispute'
    invoice = 'invoice'
    payment = 'payment'
    plan = 'plan'
    product = 'product'
    subscription = 'subscription'
    transaction = 'transaction'


class Rel2(Enum):
    authTransaction = 'authTransaction'


class AuthenticationOptions(BaseModel):
    authTokenTtl: Optional[int] = Field(
        None, description='The default lifetime of the auth-token in seconds.'
    )
    credentialTtl: Optional[int] = Field(
        None, description='The default lifetime of the credential in seconds.'
    )
    otpRequired: Optional[bool] = Field(
        None, description='Should OTP be required to exchange token.'
    )
    passwordPattern: Optional[str] = Field(
        None, description='Allowed password pattern.'
    )
    resetTokenTtl: Optional[int] = Field(
        None, description='The default lifetime of the reset-token in seconds.'
    )


class Mode(Enum):
    password = 'password'
    passwordless = 'passwordless'


class Credentials7(BaseModel):
    apiLoginId: str = Field(..., description='AuthorizeNet Gateway api login ID.')
    transactionKey: SecretStr = Field(
        ..., description='AuthorizeNet Gateway Transaction Key.'
    )


class AccountType(Enum):
    checking = 'checking'
    savings = 'savings'
    other = 'other'


class AccountNumberType(Enum):
    IBAN = 'IBAN'
    BBAN = 'BBAN'


class Method4(Enum):
    ach = 'ach'


class Credentials8(BaseModel):
    apiPasscode: SecretStr = Field(..., description='Bambora Gateway API Passcode.')
    merchantId: str = Field(..., description='Bambora Gateway merchant ID.')


class BankAccountInstrument(BaseModel):
    accountNumberType: AccountNumberType = Field(
        ...,
        description="Bank's Account Number type. A valid value is basic bank account number (BBAN) or international bank account number (IBAN).",
    )


class Method5(Enum):
    ach = 'ach'
    echeck = 'echeck'


class Credentials9(BaseModel):
    token: SecretStr = Field(..., description='BitPay merchant API token.')


class BlankProblem(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    status: Optional[conint(ge=400, le=599)] = Field(
        None, description='The HTTP status code.'
    )
    title: Optional[str] = Field(
        None,
        description='A short, human-readable summary of the problem type. It SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.',
    )


class Type1(Enum):
    payment_card = 'payment-card'
    bank_account = 'bank-account'
    customer_id = 'customer-id'
    email = 'email'
    email_domain = 'email-domain'
    ip_address = 'ip-address'
    country = 'country'
    fingerprint = 'fingerprint'
    bin = 'bin'
    address = 'address'


class Credentials10(BaseModel):
    password: SecretStr = Field(..., description="BlueSnap merchant's api password.")
    username: str = Field(..., description="BlueSnap merchant's api username.")


class Credentials11(BaseModel):
    merchantAccountId: SecretStr = Field(
        ..., description='BraintreePayments merchant account ID.'
    )
    merchantId: SecretStr = Field(..., description='BraintreePayments merchant ID.')
    privateKey: SecretStr = Field(..., description='BraintreePayments Private Key.')
    publicKey: str = Field(..., description='BraintreePayments Public Key.')


class BrowserData(BaseModel):
    colorDepth: conint(ge=1, le=48) = Field(
        ...,
        description="The browser's color depth in bits per pixel obtained using the `screen.colorDepth` property.",
        examples=[24],
    )
    isJavaEnabled: bool = Field(
        ...,
        description='Whether Java is enabled in a browser or not. Value is returned from the `navigator.javaEnabled` property.',
    )
    language: constr(max_length=8) = Field(
        ...,
        description="The browser's language settings returned from the `navigator.language` property.",
        examples=['en-US'],
    )
    screenHeight: conint(ge=0, le=65535) = Field(
        ...,
        description="The browser's screen height returned from the `screen.height` property.",
        examples=[1080],
    )
    screenWidth: conint(ge=0, le=65535) = Field(
        ...,
        description="The browser's screen width returned from the `screen.width` property.",
        examples=[1920],
    )
    timeZoneOffset: conint(ge=-1410, le=1410) = Field(
        ...,
        description="The browser's time zone offset in minutes from UTC.\nA positive offset indicates the local time is behind UTC, and negative is ahead.\nCan find it with `(new Date()).getTimezoneOffset()` property.\n",
        examples=[300],
    )


class Credentials12(BaseModel):
    apiKey: SecretStr = Field(..., description='CASHlib API Key.')
    merchantId: str = Field(..., description='CASHlib merchant id.')


class Credentials13(BaseModel):
    accessCode: SecretStr = Field(..., description='CCAvenue access code.')
    merchantId: str = Field(..., description='CCAvenue merchant id.')
    workingKey: SecretStr = Field(..., description='CCAvenue working key.')


class Credentials14(BaseModel):
    apiKey: SecretStr = Field(..., description='COD Voucher API key.')
    apiSecret: SecretStr = Field(..., description='COD Voucher API secret.')


class Credentials15(BaseModel):
    xKey: SecretStr = Field(..., description='Cardknox xKey.')


class Method6(Enum):
    cash = 'cash'


class CashInstrument(BaseModel):
    method: Method6
    receivedBy: Optional[str] = Field(None, description="The receiver's name.")


class Credentials16(BaseModel):
    cashToCodePassword: SecretStr = Field(
        ..., description='CashToCode credentials password.'
    )
    cashToCodeUsername: str = Field(..., description='CashToCode credentials Username.')
    merchantPassword: SecretStr = Field(
        ..., description='Merchant credentials password.'
    )
    merchantUsername: str = Field(..., description='Merchant credentials Username.')


class Settings4(BaseModel):
    amounts: Optional[List[confloat(ge=0.0)]] = Field(
        None, description='Amounts for which to allow transactions.'
    )
    skipAmountSelection: Optional[bool] = Field(
        False, description='Skip amount selection screen.'
    )


class Credentials17(BaseModel):
    authId: str = Field(..., description='Cashflows Gateway auth ID.')
    authPassword: SecretStr = Field(..., description='Cashflows Gateway auth password.')


class Credentials18(BaseModel):
    privateKey: SecretStr = Field(
        ..., description="CauriPayment merchant's private key."
    )
    publicKey: str = Field(..., description="CauriPayment merchant's public key.")


class Credentials19(BaseModel):
    merchantKey: SecretStr = Field(..., description='Cayan Gateway merchant key.')
    merchantName: str = Field(..., description='Cayan Gateway merchant name.')
    merchantSiteId: str = Field(..., description='Cayan Gateway merchant site ID.')


class Credentials20(BaseModel):
    coNumber: str = Field(
        ..., description='Chase Gateway CO Number used for delimited file reports.'
    )
    divisionId: str = Field(..., description='Chase Gateway division ID.')
    partialAuth: bool = Field(..., description='Support for Partial Auths.')
    password: SecretStr = Field(..., description='Chase Gateway Net Connect password.')
    username: str = Field(..., description='Chase Gateway Net Connect username.')


class CheckInstrument(BaseModel):
    method: Method6
    reference: Optional[str] = Field(None, description='Reference data.')


class Credentials21(BaseModel):
    apiKey: SecretStr


class Credentials22(BaseModel):
    password: SecretStr = Field(..., description='Password.')
    storeId: str = Field(..., description='Store ID.')
    storeName: str = Field(..., description='Store name.')
    username: str = Field(..., description='Username.')


class Credentials23(BaseModel):
    apiKey: SecretStr = Field(..., description='Clearhaus api key.')


class Credentials24(BaseModel):
    ipnSecret: SecretStr
    privateKey: SecretStr
    publicKey: str


class AccountNumberType2(Enum):
    BBAN = 'BBAN'
    IBAN = 'IBAN'


class Method8(Enum):
    ach = 'ach'


class Status2(Enum):
    draft = 'draft'
    unpaid = 'unpaid'
    paid = 'paid'
    past_due = 'past-due'
    delinquent = 'delinquent'
    abandoned = 'abandoned'
    voided = 'voided'
    partially_refunded = 'partially-refunded'
    refunded = 'refunded'
    disputed = 'disputed'


class Status3(Enum):
    pending = 'pending'
    in_progress = 'in-progress'
    accepted = 'accepted'
    rejected = 'rejected'


class Status4(Enum):
    pending = 'pending'
    completed = 'completed'
    abandoned = 'abandoned'


class Method9(Enum):
    paypal = 'paypal'


class Status5(Enum):
    inactive = 'inactive'
    active = 'active'
    deactivated = 'deactivated'


class Method10(Enum):
    payment_card = 'payment-card'


class Status6(Enum):
    active = 'active'
    inactive = 'inactive'
    expired = 'expired'
    deactivated = 'deactivated'
    verification_needed = 'verification-needed'


class Setup(BaseModel):
    price: float = Field(
        ..., description='The price of a setup - 0 is a valid value (for free).'
    )


class Method11(Enum):
    auto = 'auto'
    intelligent = 'intelligent'
    immediately = 'immediately'
    date_interval = 'date-interval'
    day_of_month = 'day-of-month'
    day_of_week = 'day-of-week'


class CommonScheduleInstruction(BaseModel):
    method: Method11


class BillingStatus(Enum):
    unpaid = 'unpaid'
    past_due = 'past-due'
    delinquent = 'delinquent'
    paid = 'paid'
    voided = 'voided'
    refunded = 'refunded'
    disputed = 'disputed'
    voided_1 = 'voided'


class OrderType(Enum):
    subscription_order = 'subscription-order'
    one_time_order = 'one-time-order'


class Status7(Enum):
    pending = 'pending'
    active = 'active'
    canceled = 'canceled'
    churned = 'churned'
    suspended = 'suspended'
    paused = 'paused'
    abandoned = 'abandoned'
    trial_ended = 'trial-ended'


class Trial1(BaseModel):
    enabled: Optional[bool] = Field(
        None,
        description='Enable or disable the trial for this subscription. If enabled for plans without trial prices, the trial will be free.',
    )
    endTime: datetime_aliased = Field(..., description='The time the trial should end.')


class Result(Enum):
    abandoned = 'abandoned'
    approved = 'approved'
    canceled = 'canceled'
    declined = 'declined'
    unknown = 'unknown'


class Status8(Enum):
    completed = 'completed'
    conn_error = 'conn-error'
    disputed = 'disputed'
    never_sent = 'never-sent'
    offsite = 'offsite'
    partially_refunded = 'partially-refunded'
    pending = 'pending'
    refunded = 'refunded'
    sending = 'sending'
    suspended = 'suspended'
    timeout = 'timeout'
    voided = 'voided'
    waiting_approval = 'waiting-approval'
    waiting_capture = 'waiting-capture'
    waiting_gateway = 'waiting-gateway'
    waiting_refund = 'waiting-refund'


class Type3(Enum):
    field_3ds_authentication = '3ds-authentication'
    authorize = 'authorize'
    capture = 'capture'
    credit = 'credit'
    refund = 'refund'
    sale = 'sale'
    void = 'void'


class Credentials25(BaseModel):
    apiKey: SecretStr = Field(..., description='Conekta private API key.')


class ContactEmail(BaseModel):
    label: constr(max_length=45) = Field(
        ..., description='The email label.', examples=['main']
    )
    primary: Optional[bool] = Field(
        None, description='True if email is primary.', examples=[True]
    )
    value: EmailStr = Field(
        ..., description='The email value.', examples=['rebilly@example.com']
    )


class ContactEmails(RootModel[List[ContactEmail]]):
    root: List[ContactEmail] = Field(..., description='The list of emails.')


class ContactPhoneNumber(BaseModel):
    label: constr(max_length=45) = Field(
        ..., description='The phone label.', examples=['main']
    )
    primary: Optional[bool] = Field(
        None, description='True if phone is primary.', examples=[True]
    )
    value: constr(max_length=50) = Field(
        ..., description='The phone value.', examples=['512-710-1640']
    )


class ContactPhoneNumbers(RootModel[List[ContactPhoneNumber]]):
    root: List[ContactPhoneNumber] = Field(
        ..., description='The list of phone numbers.'
    )


class Credentials26(BaseModel):
    apiKey: SecretStr = Field(..., description='Coppr api key.')
    organizationId: str = Field(..., description="Coppr Organization's ID.")


class Settings5(BaseModel):
    rebillyPublishableKey: Optional[str] = Field(
        None,
        description='Rebilly publishable api key. If provided a payment token will be created for each transaction.',
    )


class Status9(Enum):
    draft = 'draft'
    issued = 'issued'
    expired = 'expired'


class CouponExpiration(BaseModel):
    expiredTime: datetime_aliased = Field(
        ...,
        description="The coupon's expiry time, must be greater than the issued time. Null or empty string will immediately expire the coupon.",
    )


class Type4(Enum):
    discounts_per_redemption = 'discounts-per-redemption'
    minimum_order_amount = 'minimum-order-amount'
    redemptions_per_customer = 'redemptions-per-customer'
    restrict_to_invoices = 'restrict-to-invoices'
    restrict_to_plans = 'restrict-to-plans'
    restrict_to_subscriptions = 'restrict-to-subscriptions'
    restrict_to_products = 'restrict-to-products'
    total_redemptions = 'total-redemptions'
    paid_by_time = 'paid-by-time'


class CouponRestriction(BaseModel):
    type: Type4 = Field(..., description="Coupon's restriction type.")


class Credentials27(BaseModel):
    merchantId: str = Field(..., description='Credorax Gateway merchant ID.')
    merchantMd5Signature: SecretStr = Field(
        ..., description='Credorax Gateway md5 signature.'
    )


class Credentials28(BaseModel):
    merchant_id: str = Field(..., description='Cryptonator merchant ID.')
    secret: SecretStr = Field(..., description='Cryptonator secret.')


class CurrencyCode(RootModel[constr(min_length=3, max_length=3)]):
    root: constr(min_length=3, max_length=3) = Field(
        ..., description='ISO 4217 alphabetic currency code.', examples=['USD']
    )


class Method12(Enum):
    date_interval = 'date-interval'
    day_of_month = 'day-of-month'
    day_of_week = 'day-of-week'


class CustomEventScheduleInstruction(BaseModel):
    method: Method12


class Type5(Enum):
    array = 'array'
    boolean = 'boolean'
    datetime = 'datetime'
    integer = 'integer'
    number = 'number'
    string = 'string'
    monetary = 'monetary'


class CustomerAverageValue(BaseModel):
    amount: Optional[float] = Field(
        None,
        description="Average approved payment amount in Merchant's reporting currency.",
    )
    amountUsd: Optional[float] = Field(
        None, description='Average approved payment amount in USD.'
    )
    currency: Optional[CurrencyCode] = Field(
        None, description="Merchant's reporting currency."
    )


class Type6(Enum):
    customer = 'customer'


class CustomerLifetimeRevenue(BaseModel):
    amount: Optional[float] = Field(
        None, description="Revenue amount in Merchant's reporting currency."
    )
    amountUsd: Optional[float] = Field(None, description='Revenue amount in USD.')
    currency: Optional[CurrencyCode] = Field(
        None, description="Merchant's reporting currency."
    )


class Rel3(Enum):
    customer = 'customer'
    targetCustomer = 'targetCustomer'


class TriggeredBy(Enum):
    rebilly = 'rebilly'
    app = 'app'
    direct_api = 'direct-api'


class Type7(Enum):
    customer_comment_created = 'customer-comment-created'
    customer_created = 'customer-created'
    primary_address_changed = 'primary-address-changed'
    default_payment_instrument_changed = 'default-payment-instrument-changed'
    lead_source_changed = 'lead-source-changed'
    custom_fields_changed = 'custom-fields-changed'
    coupon_applied = 'coupon-applied'
    coupon_redeemed = 'coupon-redeemed'
    coupon_redemption_canceled = 'coupon-redemption-canceled'
    kyc_document_created = 'kyc-document-created'
    kyc_document_accepted = 'kyc-document-accepted'
    kyc_document_manually_accepted = 'kyc-document-manually-accepted'
    kyc_document_rejected = 'kyc-document-rejected'
    kyc_document_manually_rejected = 'kyc-document-manually-rejected'
    kyc_document_modified = 'kyc-document-modified'
    payment_card_expired = 'payment-card-expired'
    payment_instrument_created = 'payment-instrument-created'
    payment_instrument_deactivated = 'payment-instrument-deactivated'
    customer_bank_account_blocked = 'customer-bank-account-blocked'
    customer_blocked = 'customer-blocked'
    customer_payment_card_blocked = 'customer-payment-card-blocked'
    invoice_created = 'invoice-created'
    invoice_issued = 'invoice-issued'
    invoice_abandoned = 'invoice-abandoned'
    invoice_voided = 'invoice-voided'
    invoice_past_due = 'invoice-past-due'
    invoice_paid = 'invoice-paid'
    invoice_partially_paid = 'invoice-partially-paid'
    invoice_disputed = 'invoice-disputed'
    invoice_refunded = 'invoice-refunded'
    invoice_partially_refunded = 'invoice-partially-refunded'
    order_created = 'order-created'
    order_renewed = 'order-renewed'
    order_activated = 'order-activated'
    order_completed = 'order-completed'
    order_reactivated = 'order-reactivated'
    order_canceled = 'order-canceled'
    order_upgraded = 'order-upgraded'
    order_downgraded = 'order-downgraded'
    order_churned = 'order-churned'
    order_paid_early = 'order-paid-early'
    transaction_approved = 'transaction-approved'
    transaction_canceled = 'transaction-canceled'
    transaction_declined = 'transaction-declined'
    transaction_abandoned = 'transaction-abandoned'
    transaction_refunded = 'transaction-refunded'
    transaction_voided = 'transaction-voided'
    transaction_discrepancy_found = 'transaction-discrepancy-found'
    transaction_amount_discrepancy_found = 'transaction-amount-discrepancy-found'
    email_message_sent = 'email-message-sent'
    custom_event_processed = 'custom-event-processed'
    custom_event = 'custom-event'
    transaction_waiting_gateway = 'transaction-waiting-gateway'
    aml_list_was_possibly_matched = 'aml-list-was-possibly-matched'
    experian_check_performed = 'experian-check-performed'


class Credentials29(BaseModel):
    accessKey: str = Field(..., description='CyberSource access key.')
    profileId: str = Field(..., description='CyberSource profile ID.')
    secretKey: SecretStr = Field(..., description='CyberSource secret key.')


class Credentials30(BaseModel):
    client: str = Field(..., description='DataCash Gateway client.')
    masterCardPayoutsClient: Optional[str] = Field(
        None, description='DataCash Gateway client for MasterCard payouts (OCT).'
    )
    masterCardPayoutsPassword: Optional[SecretStr] = Field(
        None, description='DataCash Gateway password for MasterCard payouts (OCT).'
    )
    password: SecretStr = Field(..., description='DataCash Gateway password.')
    reportGroup: Optional[str] = Field(None, description='DataCash report group.')
    reportPassword: Optional[SecretStr] = Field(
        None, description='DataCash report password.'
    )
    reportUser: Optional[str] = Field(None, description='DataCash report user.')
    visaPayoutsClient: Optional[str] = Field(
        None, description='DataCash Gateway client for Visa payouts (OCT).'
    )
    visaPayoutsPassword: Optional[SecretStr] = Field(
        None, description='DataCash Gateway password for Visa payouts (OCT).'
    )


class Settings6(BaseModel):
    delay: Optional[conint(ge=0)] = Field(
        0, description='Auto Capture delay (in hours).'
    )
    policy: Optional[conint(ge=0, le=7)] = Field(2, description='Policy.')


class DayOfWeekLong(Enum):
    Sunday = 'Sunday'
    Monday = 'Monday'
    Tuesday = 'Tuesday'
    Wednesday = 'Wednesday'
    Thursday = 'Thursday'
    Friday = 'Friday'
    Saturday = 'Saturday'


class Rel4(Enum):
    defaultPaymentInstrument = 'defaultPaymentInstrument'


class Credentials31(BaseModel):
    projectId: str = Field(..., description='Dengi Gateway project ID.')
    publicKey: SecretStr = Field(..., description='Dengi Gateway public key.')
    refundKey: SecretStr = Field(..., description='Dengi Gateway refund key.')


class DetailedProblem(BlankProblem):
    detail: Optional[str] = Field(
        None,
        description='A human-readable explanation specific to this occurrence of the problem.',
    )


class Method13(Enum):
    digital_wallet = 'digital-wallet'


class Type8(Enum):
    Apple_Pay = 'Apple Pay'
    Google_Pay = 'Google Pay'


class Type9(Enum):
    Apple_Pay = 'Apple Pay'


class DigitalWalletValidation(BaseModel):
    type: Type9 = Field(..., description='Type of the digital wallet to validate.')


class ApplePay(BaseModel):
    isEnabled: bool = Field(..., description='Set true if Apple Pay is enabled.')


class GooglePay(BaseModel):
    isEnabled: bool = Field(..., description='Set true if Google Pay is enabled.')
    merchantName: Optional[str] = Field(
        None,
        description='The merchant name in Google Pay. Leave blank if using FramePay.',
        examples=['Test Merchant'],
    )
    merchantOrigin: Optional[str] = Field(
        None,
        description='The merchant origin in Google Pay. The fully qualified domain name. Leave blank if using FramePay.',
        examples=['www.example.com'],
    )


class DigitalWallets(BaseModel):
    applePay: Optional[ApplePay] = Field(
        None,
        description='The Apple Pay digital wallet configuration. Skip if not using Apple Pay.',
    )
    googlePay: Optional[GooglePay] = Field(
        None,
        description='The Google Pay™ digital wallet configuration. Skip if not using Google Pay™.',
    )


class Credentials32(BaseModel):
    secret_key: SecretStr = Field(..., description='Directa24 secret key.')
    web_pay_login: str = Field(..., description='Directa24 web pay status login.')
    web_pay_tran_key: SecretStr = Field(
        ..., description='Directa24 web pay status password.'
    )
    x_login: str = Field(..., description='Directa24 login.')
    x_tran_key: SecretStr = Field(..., description='Directa24 transaction key.')


class Directa24Banks(Enum):
    AA = 'AA'
    AL = 'AL'
    AZ = 'AZ'
    B = 'B'
    BB = 'BB'
    BC = 'BC'
    BE = 'BE'
    BL = 'BL'
    BM = 'BM'
    BN = 'BN'
    BP = 'BP'
    BQ = 'BQ'
    BU = 'BU'
    BV = 'BV'
    BW = 'BW'
    BX = 'BX'
    BZ = 'BZ'
    CA = 'CA'
    CE = 'CE'
    CI = 'CI'
    CU = 'CU'
    EF = 'EF'
    EN = 'EN'
    EY = 'EY'
    FA = 'FA'
    FB = 'FB'
    FC = 'FC'
    GC = 'GC'
    GG = 'GG'
    HC = 'HC'
    I = 'I'
    IA = 'IA'
    IB = 'IB'
    JM = 'JM'
    LC = 'LC'
    LE = 'LE'
    LL = 'LL'
    MC = 'MC'
    MD = 'MD'
    MP = 'MP'
    MT = 'MT'
    NB = 'NB'
    OM = 'OM'
    OX = 'OX'
    PC = 'PC'
    PH = 'PH'
    PL = 'PL'
    SB = 'SB'
    SC = 'SC'
    SE = 'SE'
    SF = 'SF'
    SM = 'SM'
    SS = 'SS'
    ST = 'ST'
    SU = 'SU'
    TC = 'TC'
    TG = 'TG'
    TY = 'TY'
    UB = 'UB'
    UI = 'UI'
    UL = 'UL'
    US = 'US'
    VD = 'VD'
    VI = 'VI'
    WA = 'WA'
    WP = 'WP'
    WU = 'WU'


class Type10(Enum):
    fixed = 'fixed'
    percent = 'percent'


class Discount(BaseModel):
    type: Optional[Type10] = Field(None, description='Discount type.')


class Category(Enum):
    fraud = 'fraud'
    unrecognized = 'unrecognized'
    product_not_received = 'product-not-received'
    product_unacceptable = 'product-unacceptable'
    product_not_refunded = 'product-not-refunded'
    duplicate = 'duplicate'
    subscription_canceled = 'subscription-canceled'
    uncategorized = 'uncategorized'


class ReasonCode(Enum):
    field_1000 = '1000'
    field_10_1 = '10.1'
    field_10_2 = '10.2'
    field_10_3 = '10.3'
    field_10_4 = '10.4'
    field_10_5 = '10.5'
    field_11_1 = '11.1'
    field_11_2 = '11.2'
    field_11_3 = '11.3'
    field_12 = '12'
    field_12_1 = '12.1'
    field_12_2 = '12.2'
    field_12_3 = '12.3'
    field_12_4 = '12.4'
    field_12_5 = '12.5'
    field_12_6 = '12.6'
    field_12_7 = '12.7'
    field_13_1 = '13.1'
    field_13_2 = '13.2'
    field_13_3 = '13.3'
    field_13_4 = '13.4'
    field_13_5 = '13.5'
    field_13_6 = '13.6'
    field_13_7 = '13.7'
    field_13_8 = '13.8'
    field_13_9 = '13.9'
    field_2 = '2'
    field_30 = '30'
    field_31 = '31'
    field_35 = '35'
    field_37 = '37'
    field_40 = '40'
    field_41 = '41'
    field_42 = '42'
    field_46 = '46'
    field_47 = '47'
    field_49 = '49'
    field_50 = '50'
    field_53 = '53'
    field_54 = '54'
    field_55 = '55'
    field_57 = '57'
    field_59 = '59'
    field_60 = '60'
    field_62 = '62'
    field_7 = '7'
    field_70 = '70'
    field_71 = '71'
    field_72 = '72'
    field_73 = '73'
    field_74 = '74'
    field_75 = '75'
    field_76 = '76'
    field_77 = '77'
    field_79 = '79'
    field_8 = '8'
    field_80 = '80'
    field_81 = '81'
    field_82 = '82'
    field_83 = '83'
    field_85 = '85'
    field_86 = '86'
    field_93 = '93'
    field_00 = '00'
    field_63 = '63'
    A01 = 'A01'
    A02 = 'A02'
    A08 = 'A08'
    F10 = 'F10'
    F14 = 'F14'
    F22 = 'F22'
    F24 = 'F24'
    F29 = 'F29'
    C02 = 'C02'
    C04 = 'C04'
    C05 = 'C05'
    C08 = 'C08'
    C14 = 'C14'
    C18 = 'C18'
    C28 = 'C28'
    C31 = 'C31'
    C32 = 'C32'
    M10 = 'M10'
    M49 = 'M49'
    P01 = 'P01'
    P03 = 'P03'
    P04 = 'P04'
    P05 = 'P05'
    P07 = 'P07'
    P08 = 'P08'
    P22 = 'P22'
    P23 = 'P23'
    R03 = 'R03'
    R13 = 'R13'
    M01 = 'M01'
    FR1 = 'FR1'
    FR4 = 'FR4'
    FR6 = 'FR6'
    AL = 'AL'
    AP = 'AP'
    AW = 'AW'
    CA = 'CA'
    CD = 'CD'
    CR = 'CR'
    DA = 'DA'
    DP = 'DP'
    DP1 = 'DP1'
    EX = 'EX'
    IC = 'IC'
    IN = 'IN'
    IS = 'IS'
    LP = 'LP'
    N = 'N'
    NA = 'NA'
    NC = 'NC'
    P = 'P'
    RG = 'RG'
    RM = 'RM'
    RN1 = 'RN1'
    RN2 = 'RN2'
    SV = 'SV'
    TF = 'TF'
    TNM = 'TNM'
    UA01 = 'UA01'
    UA02 = 'UA02'
    UA32 = 'UA32'
    UA99 = 'UA99'
    UA03 = 'UA03'
    UA10 = 'UA10'
    UA11 = 'UA11'
    UA12 = 'UA12'
    UA18 = 'UA18'
    UA20 = 'UA20'
    UA21 = 'UA21'
    UA22 = 'UA22'
    UA23 = 'UA23'
    UA28 = 'UA28'
    UA30 = 'UA30'
    UA31 = 'UA31'
    UA38 = 'UA38'
    duplicate = 'duplicate'
    fraudulent = 'fraudulent'
    subscription_canceled = 'subscription_canceled'
    product_unacceptable = 'product_unacceptable'
    product_not_received = 'product_not_received'
    unrecognized = 'unrecognized'
    credit_not_processed = 'credit_not_processed'
    customer_initiated = 'customer_initiated'
    incorrect_account_details = 'incorrect_account_details'
    insufficient_funds = 'insufficient_funds'
    bank_cannot_process = 'bank_cannot_process'
    debit_not_authorized = 'debit_not_authorized'
    general = 'general'
    pre_chargeback_alert = 'pre-chargeback-alert'
    field_0 = '0'
    field_1 = '1'
    field_2_1 = '2'
    field_3 = '3'
    field_4 = '4'
    field_5 = '5'
    field_6 = '6'
    field_7_1 = '7'
    field_9 = '9'
    field_51 = '51'
    A = 'A'
    B = 'B'


class Status10(Enum):
    response_needed = 'response-needed'
    under_review = 'under-review'
    forfeited = 'forfeited'
    won = 'won'
    lost = 'lost'
    unknown = 'unknown'


class Type11(Enum):
    information_request = 'information-request'
    first_chargeback = 'first-chargeback'
    second_chargeback = 'second-chargeback'
    arbitration = 'arbitration'
    fraud = 'fraud'
    ethoca_alert = 'ethoca-alert'
    verifi_alert = 'verifi-alert'


class Rel5(Enum):
    dispute = 'dispute'


class DocumentedProblem(BlankProblem):
    type: Optional[AnyUrl] = Field(
        None,
        description='A URI reference [[RFC3986](https://tools.ietf.org/html/rfc3986)] that identifies the problem type. It should provide human-readable documentation for the problem type. When this member is not present, its value is assumed to be "about:blank".',
    )


class Credentials33(BaseModel):
    rcode: SecretStr = Field(..., description='Dragonphoenix rcode.')
    sid: str = Field(..., description='Dragonphoenix site ID.')


class Rel6(Enum):
    dynamicIpnUrl = 'dynamicIpnUrl'


class Credentials34(BaseModel):
    integrationKey: SecretStr = Field(..., description='EBANX integration key.')


class Credentials35(BaseModel):
    clientCertificate: str = Field(..., description='Client Certificate.')
    clientCertificatePassword: SecretStr = Field(
        ..., description='Client Certificate password.'
    )
    merchantName: Optional[str] = Field(
        None, description='Merchant Name for SFTP reconciliation.'
    )
    password: SecretStr = Field(..., description='EMS password.')
    privateKey: SecretStr = Field(..., description='Private Key.')
    privateKeyPassword: SecretStr = Field(..., description='Private key password.')
    serverCertificate: str = Field(..., description='Server Certificate.')
    sftpPrivateKey: Optional[SecretStr] = Field(
        None, description='SFTP reconciliation private key.'
    )
    storeId: str = Field(..., description='EMS store id.')
    userId: str = Field(..., description='EMS account id.')


class Settings8(BaseModel):
    delay: Optional[int] = Field(None, description='Automatic capture delay in hours.')


class Credentials36(BaseModel):
    merchantId: str = Field(..., description='Merchant ID.')
    merchantKey: SecretStr = Field(..., description='Merchant key.')
    merchantPassword: SecretStr = Field(..., description='Merchant password.')
    productId: str = Field(..., description='Product ID.')


class Credentials37(BaseModel):
    apiSecretKey: SecretStr = Field(..., description='EPro API secret key.')


class Credentials38(BaseModel):
    accountAuth: SecretStr = Field(..., description='EcorePay Account Auth.')
    accountId: str = Field(..., description='EcorePay Account ID.')


class Credentials39(BaseModel):
    ssl_merchant_id: str = Field(..., description='Elavon merchant ID.')
    ssl_pin: SecretStr = Field(..., description='Elavon pin.')
    ssl_user_id: str = Field(..., description='Elavon user ID.')


class Credentials40(BaseModel):
    password: SecretStr
    username: str


class Mime(Enum):
    image_png = 'image/png'
    image_jpeg = 'image/jpeg'
    image_gif = 'image/gif'
    application_pdf = 'application/pdf'
    audio_mpeg = 'audio/mpeg'


class FileCreateFromInline(BaseModel):
    description: Optional[str] = Field(
        None, description='The file description.', examples=['My file description']
    )
    file: str = Field(
        ...,
        description='The file in base64 encoded format.',
        examples=['R0lGODlhAQABAIAAAAUEBAAAACwAAAAAAQABAAACAkQBADs='],
    )
    isPublic: Optional[bool] = Field(
        None,
        description='The File visibility. If public a permalink is provided.',
        examples=[False],
    )
    name: Optional[str] = Field(
        None, description='The file name used for downloading.', examples=['logo.png']
    )
    tags: Optional[List[str]] = Field(
        None, description='The tags list.', examples=[['test', 'tags']]
    )


class FileCreateFromUrl(BaseModel):
    description: Optional[str] = Field(
        None, description='The file description.', examples=['My file description']
    )
    isPublic: Optional[bool] = Field(
        None,
        description='The File visibility. If public a permalink is provided.',
        examples=[False],
    )
    name: Optional[str] = Field(
        None, description='The file name used for downloading.', examples=['logo.png']
    )
    tags: Optional[List[str]] = Field(
        None, description='The tags list.', examples=[['test', 'tags']]
    )
    url: str = Field(
        ...,
        description='The URL of the file to upload.',
        examples=[
            'https://blog.rebilly.com/wp-content/uploads/2017/09/rb_LogoInverted_Small.png'
        ],
    )


class Rel7(Enum):
    download = 'download'


class Rel8(Enum):
    file = 'file'


class Credentials41(BaseModel):
    apiKey: SecretStr = Field(..., description='FinTecSystems api key.')


class RecipientCountry(Enum):
    AT = 'AT'
    CH = 'CH'
    DE = 'DE'


class Settings9(BaseModel):
    recipientBIC: str = Field(..., description='BIC of the recipient account.')
    recipientCountry: RecipientCountry = Field(
        ..., description='Two letter country code.'
    )
    recipientHolder: str = Field(
        ..., description='Account holder of the recipient account.'
    )
    recipientIBAN: str = Field(..., description='IBAN of the recipient account.')


class Credentials42(BaseModel):
    apiKey: SecretStr = Field(..., description='Finrax API Key.')
    apiSecret: SecretStr = Field(..., description='Finrax API Secret.')
    businessId: str = Field(..., description='Finrax Business Id.')


class Settings10(BaseModel):
    tolerancePercentage: AmountAdjustmentTolerance


class Credentials43(BaseModel):
    apiKey: str = Field(..., description='Flexepin API Key.')
    apiSecret: SecretStr = Field(..., description='Flexepin API Secret.')


class Credentials44(BaseModel):
    accountId: str = Field(..., description='Forte Gateway account ID.')
    apiAccessId: SecretStr = Field(..., description='Forte Gateway api access ID.')
    apiSecretKey: SecretStr = Field(..., description='Forte Gateway api secret key.')
    locationId: str = Field(..., description='Forte Gateway location ID.')


class Credentials45(BaseModel):
    clientId: str = Field(..., description='FundSend Gateway client ID.')
    secretWord: SecretStr = Field(..., description='FundSend Gateway secret word.')


class Credentials46(BaseModel):
    accountId: str = Field(..., description='GET Gateway account ID.')


class Status11(Enum):
    active = 'active'
    inactive = 'inactive'
    pending = 'pending'
    closed = 'closed'


class Frequency(Enum):
    daily = 'daily'
    monthly = 'monthly'


class Status12(Enum):
    monitoring = 'monitoring'
    reached = 'reached'


class Type12(Enum):
    count = 'count'
    money = 'money'


class Rel9(Enum):
    gatewayAccountLimit = 'gatewayAccountLimit'


class Rel10(Enum):
    gatewayAccount = 'gatewayAccount'


class GatewayName(Enum):
    A1Gateway = 'A1Gateway'
    Adyen = 'Adyen'
    Airpay = 'Airpay'
    AmexVPC = 'AmexVPC'
    ApcoPay = 'ApcoPay'
    AsiaPaymentGateway = 'AsiaPaymentGateway'
    AstroPayCard = 'AstroPayCard'
    AuthorizeNet = 'AuthorizeNet'
    Bambora = 'Bambora'
    BitPay = 'BitPay'
    BlueSnap = 'BlueSnap'
    BraintreePayments = 'BraintreePayments'
    Cardknox = 'Cardknox'
    Cashflows = 'Cashflows'
    CASHlib = 'CASHlib'
    CashToCode = 'CashToCode'
    CauriPayment = 'CauriPayment'
    Cayan = 'Cayan'
    CCAvenue = 'CCAvenue'
    Chase = 'Chase'
    Circle = 'Circle'
    Citadel = 'Citadel'
    Clearhaus = 'Clearhaus'
    CODVoucher = 'CODVoucher'
    CoinPayments = 'CoinPayments'
    Conekta = 'Conekta'
    Coppr = 'Coppr'
    Credorax = 'Credorax'
    Cryptonator = 'Cryptonator'
    CyberSource = 'CyberSource'
    DataCash = 'DataCash'
    Dengi = 'Dengi'
    Dragonphoenix = 'Dragonphoenix'
    Directa24 = 'Directa24'
    dLocal = 'dLocal'
    EBANX = 'EBANX'
    ecoPayz = 'ecoPayz'
    EcorePay = 'EcorePay'
    Elavon = 'Elavon'
    Euteller = 'Euteller'
    eMerchantPay = 'eMerchantPay'
    EMS = 'EMS'
    EPG = 'EPG'
    EPro = 'EPro'
    eZeeWallet = 'eZeeWallet'
    ezyEFT = 'ezyEFT'
    Finrax = 'Finrax'
    Flexepin = 'Flexepin'
    FinTecSystems = 'FinTecSystems'
    FundSend = 'FundSend'
    Forte = 'Forte'
    GET = 'GET'
    Gigadat = 'Gigadat'
    GlobalOnePay = 'GlobalOnePay'
    Gooney = 'Gooney'
    Gpaysafe = 'Gpaysafe'
    Greenbox = 'Greenbox'
    HiPay = 'HiPay'
    iCanPay = 'iCanPay'
    ICEPAY = 'ICEPAY'
    iCheque = 'iCheque'
    iDebit = 'iDebit'
    Ilixium = 'Ilixium'
    Ingenico = 'Ingenico'
    INOVAPAY = 'INOVAPAY'
    Inovio = 'Inovio'
    Intuit = 'Intuit'
    InstaDebit = 'InstaDebit'
    IpayOptions = 'IpayOptions'
    JetPay = 'JetPay'
    Jeton = 'Jeton'
    Khelocard = 'Khelocard'
    Konnektive = 'Konnektive'
    loonie = 'loonie'
    LPG = 'LPG'
    MiFinity = 'MiFinity'
    Moneris = 'Moneris'
    MtaPay = 'MtaPay'
    MuchBetter = 'MuchBetter'
    MyFatoorah = 'MyFatoorah'
    Neosurf = 'Neosurf'
    Netbanking = 'Netbanking'
    Neteller = 'Neteller'
    NGenius = 'NGenius'
    NinjaWallet = 'NinjaWallet'
    NMI = 'NMI'
    NuaPay = 'NuaPay'
    OchaPay = 'OchaPay'
    Onlineueberweisen = 'Onlineueberweisen'
    OnRamp = 'OnRamp'
    Pagsmile = 'Pagsmile'
    Panamerican = 'Panamerican'
    ParamountEft = 'ParamountEft'
    ParamountInterac = 'ParamountInterac'
    PandaGateway = 'PandaGateway'
    Pay4Fun = 'Pay4Fun'
    PayCash = 'PayCash'
    PayClub = 'PayClub'
    Payeezy = 'Payeezy'
    Payflow = 'Payflow'
    PaymentAsia = 'PaymentAsia'
    PaymenTechnologies = 'PaymenTechnologies'
    PaymentsOS = 'PaymentsOS'
    Paymero = 'Paymero'
    PayPal = 'PayPal'
    Payr = 'Payr'
    Paysafe = 'Paysafe'
    Paysafecash = 'Paysafecash'
    PayTabs = 'PayTabs'
    PayULatam = 'PayULatam'
    Payvision = 'Payvision'
    Piastrix = 'Piastrix'
    Plugnpay = 'Plugnpay'
    PostFinance = 'PostFinance'
    Prosa = 'Prosa'
    Rapyd = 'Rapyd'
    Realex = 'Realex'
    Realtime = 'Realtime'
    Redsys = 'Redsys'
    Rotessa = 'Rotessa'
    RPN = 'RPN'
    SaltarPay = 'SaltarPay'
    Sagepay = 'Sagepay'
    SeamlessChex = 'SeamlessChex'
    SecureTrading = 'SecureTrading'
    SecurionPay = 'SecurionPay'
    Skrill = 'Skrill'
    SmartInvoice = 'SmartInvoice'
    SMSVoucher = 'SMSVoucher'
    Sofort = 'Sofort'
    SparkPay = 'SparkPay'
    StaticGateway = 'StaticGateway'
    Stripe = 'Stripe'
    TestProcessor = 'TestProcessor'
    ToditoCash = 'ToditoCash'
    TrustPay = 'TrustPay'
    TrustsPay = 'TrustsPay'
    Trustly = 'Trustly'
    TWINT = 'TWINT'
    UPayCard = 'UPayCard'
    USAePay = 'USAePay'
    VantivLitle = 'VantivLitle'
    vegaaH = 'vegaaH'
    VCreditos = 'VCreditos'
    Wallet88 = 'Wallet88'
    Walpay = 'Walpay'
    Wirecard = 'Wirecard'
    WorldlineAtosFrankfurt = 'WorldlineAtosFrankfurt'
    Worldpay = 'Worldpay'
    XPay = 'XPay'
    Zimpler = 'Zimpler'
    Zotapay = 'Zotapay'


class Credentials47(BaseModel):
    accessToken: SecretStr = Field(..., description='Gigadat access token.')
    campaignId: str = Field(..., description='Gigadat campaign ID.')
    securityToken: SecretStr = Field(..., description='Gigadat security token.')


class Settings11(BaseModel):
    sandbox: bool = Field(
        ..., description='True if gateway account is in sandbox mode.'
    )


class Credentials48(BaseModel):
    sharedSecret: SecretStr = Field(..., description='GlobalOne Gateway shared secret.')
    terminalId: str = Field(..., description='GlobalOne Gateway terminal ID.')


class GlobalWebhookEventType(Enum):
    aml_list_possibly_matched = 'aml-list-possibly-matched'
    customer_created = 'customer-created'
    customer_merged = 'customer-merged'
    customer_one_time_password_requested = 'customer-one-time-password-requested'
    customer_updated = 'customer-updated'
    dispute_created = 'dispute-created'
    experian_check_performed = 'experian-check-performed'
    gateway_account_downtime_ended = 'gateway-account-downtime-ended'
    gateway_account_downtime_started = 'gateway-account-downtime-started'
    gateway_account_limit_reached = 'gateway-account-limit-reached'
    gateway_account_requested = 'gateway-account-requested'
    invoice_abandoned = 'invoice-abandoned'
    invoice_created = 'invoice-created'
    invoice_issued = 'invoice-issued'
    invoice_modified = 'invoice-modified'
    invoice_paid = 'invoice-paid'
    invoice_past_due = 'invoice-past-due'
    invoice_past_due_reminder = 'invoice-past-due-reminder'
    invoice_reissued = 'invoice-reissued'
    invoice_voided = 'invoice-voided'
    kyc_document_accepted = 'kyc-document-accepted'
    kyc_document_created = 'kyc-document-created'
    kyc_document_modified = 'kyc-document-modified'
    kyc_document_rejected = 'kyc-document-rejected'
    kyc_document_reviewed = 'kyc-document-reviewed'
    lead_source_changed = 'lead-source-changed'
    nsf_response_received = 'nsf-response-received'
    offsite_payment_completed = 'offsite-payment-completed'
    order_completed = 'order-completed'
    payment_card_created = 'payment-card-created'
    payment_card_expiration_reminder = 'payment-card-expiration-reminder'
    payment_card_expired = 'payment-card-expired'
    payment_instrument_modified = 'payment-instrument-modified'
    renewal_invoice_issued = 'renewal-invoice-issued'
    renewal_invoice_payment_canceled = 'renewal-invoice-payment-canceled'
    renewal_invoice_payment_declined = 'renewal-invoice-payment-declined'
    risk_score_changed = 'risk-score-changed'
    subscription_activated = 'subscription-activated'
    subscription_canceled = 'subscription-canceled'
    subscription_modified = 'subscription-modified'
    subscription_reactivated = 'subscription-reactivated'
    subscription_renewal_reminder = 'subscription-renewal-reminder'
    subscription_renewed = 'subscription-renewed'
    subscription_trial_converted = 'subscription-trial-converted'
    subscription_trial_end_reminder = 'subscription-trial-end-reminder'
    subscription_trial_ended = 'subscription-trial-ended'
    subscription_trial_end_changed = 'subscription-trial-end-changed'
    transaction_amount_discrepancy_found = 'transaction-amount-discrepancy-found'
    transaction_declined = 'transaction-declined'
    transaction_discrepancy_found = 'transaction-discrepancy-found'
    transaction_process_requested = 'transaction-process-requested'
    transaction_processed = 'transaction-processed'
    transaction_reconciled = 'transaction-reconciled'
    transaction_timeout_resolved = 'transaction-timeout-resolved'
    waiting_gateway_transaction_completed = 'waiting-gateway-transaction-completed'


class Credentials49(BaseModel):
    apiKey: str = Field(..., description='Gooney API key.')
    apiPassword: Optional[SecretStr] = Field(None, description='Gooney API password.')
    apiSecret: SecretStr = Field(..., description='Gooney API secret.')
    apiUser: Optional[str] = Field(None, description='Gooney API user.')


class Credentials50(BaseModel):
    apiKey: str = Field(..., description='Gpaysafe apiKey.')


class Credentials51(BaseModel):
    clientId: str = Field(..., description='Greenbox client ID.')
    clientSecret: SecretStr = Field(..., description='Greenbox client secret.')
    locationId: str = Field(..., description='Greenbox location ID.')


class Credentials52(BaseModel):
    apiPassword: SecretStr = Field(..., description='HiPay API password.')
    apiUsername: str = Field(..., description='HiPay API user name.')


class HttpHeaders(RootModel[Optional[Dict[str, str]]]):
    root: Optional[Dict[str, str]] = None


class IBANInstrument(BankAccountInstrument):
    accountNumber: str = Field(
        ...,
        description='Bank Account Number. Detailed information about all ISO 13616-compliant national IBAN formats is available in [SWIFT IBAN Registry](https://www.swift.com/standards/data-standards/iban).\n',
    )
    bankName: Optional[str] = Field(None, description='Bank name.')
    bic: Optional[str] = Field(None, description='Bank Identifier Code.')
    last4: Optional[str] = Field(
        None, description="Bank Account Number's last 4 digits."
    )


class AccountNumberType3(Enum):
    IBAN = 'IBAN'
    BBAN = 'BBAN'


class Method14(Enum):
    ach = 'ach'


class Credentials53(BaseModel):
    merchantId: SecretStr = Field(..., description='ICEPAY merchant ID.')
    secretKey: SecretStr = Field(..., description='ICEPAY API secret key.')


class Credentials54(BaseModel):
    apiKey: str = Field(..., description='INOVAPAY API key.')
    apiSecret: SecretStr = Field(..., description='INOVAPAY API secret.')


class IdentityMatches(BaseModel):
    containsImage: Optional[bool] = Field(
        None,
        description='Flag that indicates if there is an image that contains a face on it.',
        examples=[True],
    )
    dateOfBirth: Optional[datetime_aliased] = Field(
        None, description='The date of birth found on the document, null if not found.'
    )
    expiryDate: Optional[datetime_aliased] = Field(
        None, description='The expiry date found on the document, null if not found.'
    )
    firstName: Optional[str] = Field(
        None,
        description='The customer first name if it was matched, null otherwise.',
        examples=['John'],
    )
    hasMinimalAge: Optional[bool] = Field(
        None,
        description='Checks the minimal age, 21+ for USA and 18+ for all other countries. Null if dateOfBirth could not be determined.',
        examples=[True],
    )
    isIdentityDocument: Optional[bool] = Field(
        None,
        description='Flag that indicates if this looks like and ID.',
        examples=[True],
    )
    isPublishedOnline: Optional[bool] = Field(
        None, description='If there is an exact match found online.', examples=[False]
    )
    issueDate: Optional[datetime_aliased] = Field(
        None, description='The issued date found on the document, null if not found.'
    )
    lastName: Optional[str] = Field(
        None,
        description='The customer last name if it was matched, null otherwise.',
        examples=['Doe'],
    )
    nationality: Optional[constr(max_length=3)] = Field(
        None,
        description='The nationality found on the document, null otherwise.',
        examples=['US'],
    )


class Credentials55(BaseModel):
    accountId: str = Field(..., description='Ilixium Gateway account ID.')
    digestPassword: SecretStr = Field(
        ..., description='Ilixium Gateway digest password.'
    )
    merchantId: str = Field(..., description='Ilixium Gateway merchant ID.')


class Platform(Enum):
    itix = 'itix'
    tpg = 'tpg'


class Settings12(BaseModel):
    platform: Optional[Platform] = Field('itix', description='Direct API platform.')
    useCreditEndpoint: Optional[bool] = Field(
        None, description='Use previous approval credit endpoint for payouts.'
    )
    useIpFrame: Optional[bool] = Field(
        None, description='Force Ilixium to process via Ip Frame.'
    )
    useStandaloneCreditEndpoint: Optional[bool] = Field(
        None, description='Use standalone (token) credit endpoint for payouts.'
    )


class Credentials56(BaseModel):
    apiKeyId: str = Field(..., description='Ingenico Gateway api key ID.')
    apiSecretKey: SecretStr = Field(..., description='Ingenico Gateway api secret key.')
    merchantId: str = Field(..., description='Ingenico Gateway merchant ID.')
    skipFraudService: Optional[bool] = Field(
        None, description='Ingenico skip fraud service.'
    )


class Rel11(Enum):
    initialInvoice = 'initialInvoice'


class Credentials57(BaseModel):
    password: SecretStr = Field(..., description='Inovio password.')
    username: str = Field(..., description='Inovio username.')


class Settings13(BaseModel):
    merchantAccountId: str = Field(..., description='Inovio merchant account ID.')
    productId: str = Field(..., description='Inovio product ID.')
    websiteId: str = Field(..., description='Inovio website ID.')


class Credentials58(BaseModel):
    merchantId: str = Field(..., description='InstaDebit merchant account number.')
    password: SecretStr = Field(
        ..., description='InstaDebit merchant account password.'
    )


class Credentials59(BaseModel):
    clientId: str = Field(..., description='The Intuit client_id key.')
    clientSecret: SecretStr = Field(..., description='The Intuit client_secret key.')


class AfterAttemptPolicy(Enum):
    change_subscription_renewal_time = 'change-subscription-renewal-time'


class AfterRetryEndPolicy(Enum):
    abandon_invoice = 'abandon-invoice'
    cancel_subscription = 'cancel-subscription'


class Type13(Enum):
    initial = 'initial'
    renewal = 'renewal'
    interim = 'interim'
    cancellation = 'cancellation'
    one_time = 'one-time'
    refund = 'refund'
    charge = 'charge'


class InvoiceIssue(BaseModel):
    dueTime: Optional[datetime_aliased] = Field(
        None,
        description='Invoice due time. Will be set same as `issuedTime` if `null` or omitted.',
    )
    issuedTime: Optional[datetime_aliased] = Field(
        None,
        description='Invoice issued time. Will be issued immediately if `null` or omitted.',
    )


class Type14(Enum):
    debit = 'debit'
    credit = 'credit'


class Rel12(Enum):
    invoice = 'invoice'


class InvoiceReissue(BaseModel):
    dueTime: Optional[datetime_aliased] = Field(
        None,
        description='Invoice due time. Will be set as current date-time if `null` or omitted.',
    )


class Method15(Enum):
    intelligent = 'intelligent'
    immediately = 'immediately'
    date_interval = 'date-interval'
    day_of_month = 'day-of-month'
    day_of_week = 'day-of-week'


class InvoiceRetryScheduleInstruction(BaseModel):
    method: Method15


class Calculator(Enum):
    manual = 'manual'
    rebilly = 'rebilly'


class InvoiceShipping(BaseModel):
    calculator: Calculator = Field(..., description='Shipping calculator.')


class Calculator1(Enum):
    manual = 'manual'
    rebilly_taxjar = 'rebilly-taxjar'


class InvoiceTax(BaseModel):
    amount: Optional[int] = Field(None, description='A sum of all invoice taxes.')
    calculator: Calculator1 = Field(..., description='Tax calculator.')


class InvoiceTaxItem(BaseModel):
    amount: Optional[float] = Field(None, description='Tax amount.')
    description: Optional[str] = Field(None, description='Tax description.')


class Type15(Enum):
    timeline_comment_created = 'timeline-comment-created'
    invoice_created = 'invoice-created'
    invoice_issued = 'invoice-issued'
    invoice_abandoned = 'invoice-abandoned'
    invoice_voided = 'invoice-voided'
    invoice_past_due = 'invoice-past-due'
    invoice_paid = 'invoice-paid'
    invoice_partially_paid = 'invoice-partially-paid'
    invoice_disputed = 'invoice-disputed'
    invoice_refunded = 'invoice-refunded'
    invoice_partially_refunded = 'invoice-partially-refunded'
    invoice_renewal_payment_declined = 'invoice-renewal-payment-declined'
    email_message_sent = 'email-message-sent'
    coupon_applied = 'coupon-applied'
    transaction_approved = 'transaction-approved'
    transaction_abandoned = 'transaction-abandoned'
    transaction_canceled = 'transaction-canceled'
    transaction_declined = 'transaction-declined'
    transaction_initiated = 'transaction-initiated'
    transaction_refunded = 'transaction-refunded'
    transaction_voided = 'transaction-voided'


class InvoiceTransaction(BaseModel):
    amount: Optional[float] = Field(
        None,
        description="Amount which needs to be applied to the invoice. Can't be more than the transaction's amount. If omitted, the lesser of the transaction's unused amount or the invoice's amount due will be used.\n",
    )
    transactionId: str = Field(
        ..., description='Transaction to be applied to the invoice.'
    )


class Rel13(Enum):
    invoices = 'invoices'


class Credentials60(BaseModel):
    rcode: SecretStr = Field(..., description='Ipay Options rcode.')
    sid: str = Field(..., description='Ipay Options website ID.')


class CardType(Enum):
    ideal = 'ideal'
    idealqr = 'idealqr'
    sofort = 'sofort'


class Platform1(Enum):
    SOAP = 'SOAP'
    TxHandler = 'TxHandler'
    SecureHosted = 'SecureHosted'


class Subdomain(Enum):
    miglite = 'miglite'
    w88asiapay = 'w88asiapay'


class Settings14(BaseModel):
    cardType: Optional[CardType] = Field(
        None, description='Manually set the card_type for iDEAL.'
    )
    extraStep: Optional[bool] = Field(
        None,
        description='Show extra step for user to enter their email and DNI number.',
    )
    platform: Optional[Platform1] = Field(
        None, description='Platform which IpayOptions will process.'
    )
    subdomain: Optional[Subdomain] = Field(
        None, description='Subdomain to use when sending request to IpayOptions.'
    )


class Chronology(Enum):
    before = 'before'


class Credentials61(BaseModel):
    TerminalID: str = Field(..., description='JetPay Gateway terminal ID.')


class Credentials62(BaseModel):
    apiKey: SecretStr = Field(..., description='Jeton apiKey.')


class Method16(Enum):
    CHECKOUT = 'CHECKOUT'
    DIRECT = 'DIRECT'
    QR = 'QR'
    JETGO = 'JETGO'


class Settings15(BaseModel):
    method: Method16 = Field(..., description="Jeton's method.")


class Credentials63(BaseModel):
    apiKey: SecretStr = Field(..., description='API key.')
    apiSecret: SecretStr = Field(..., description='API secret.')
    merchantId: str = Field(..., description='Merchant ID.')
    referrer: AnyUrl = Field(
        ..., description='The referrer URL registered on Khelocard.'
    )


class Method17(Enum):
    Khelocard = 'Khelocard'


class Status13(Enum):
    active = 'active'
    deactivated = 'deactivated'


class PaymentInstrument2(BaseModel):
    cvv: str = Field(..., description='Khelocard card CVV.')
    expMonth: int = Field(..., description='Khelocard card expiration month.')
    expYear: int = Field(..., description='Khelocard card expiration year.')
    last4: Optional[str] = Field(
        None, description="Khelocard card number's last 4 digits."
    )
    number: str = Field(..., description='Khelocard card number.')


class Credentials64(BaseModel):
    loginId: str = Field(..., description='Konnektive API login ID.')
    password: SecretStr = Field(..., description='Konnektive API password.')


class Settings16(BaseModel):
    campaignId: str = Field(
        ..., description='Konnektive campaign ID for which the order is being placed.'
    )
    productId: str = Field(
        ...,
        description='Konnektive campaign product ID for which the order is being placed.',
    )


class Rel14(Enum):
    kycDocument = 'kycDocument'


class Type16(Enum):
    document_unreadable = 'document-unreadable'
    document_expired = 'document-expired'
    document_not_matching = 'document-not-matching'
    underage_person = 'underage-person'
    other = 'other'


class KycDocumentRejection(BaseModel):
    message: Optional[str] = Field(
        None,
        description='The rejection message.',
        examples=['Provided document is unreadable'],
    )
    type: Optional[Type16] = None


class KycDocumentSubtypes(Enum):
    passport = 'passport'
    id_card = 'id-card'
    driver_license = 'driver-license'
    birth_certificate = 'birth-certificate'
    utility_bill = 'utility-bill'
    rental_receipt = 'rental-receipt'
    lease_agreement = 'lease-agreement'
    copy_credit_card = 'copy-credit-card'
    credit_card_statement = 'credit-card-statement'
    bank_statement = 'bank-statement'
    inheritance_documentation = 'inheritance-documentation'
    tax_return = 'tax-return'
    salary_slip = 'salary-slip'
    sale_of_assets = 'sale-of-assets'
    public_health_card = 'public-health-card'
    proof_of_age_card = 'proof-of-age-card'
    reverse_of_id = 'reverse-of-id'
    public_service = 'public-service'
    ewallet_holder_details = 'ewallet-holder-details'
    ewallet_transaction_statement = 'ewallet-transaction-statement'
    other = 'other'


class KycDocumentTypes(Enum):
    identity_proof = 'identity-proof'
    address_proof = 'address-proof'
    funds_proof = 'funds-proof'
    purchase_proof = 'purchase-proof'


class Rel15(Enum):
    kycDocuments = 'kycDocuments'


class Rel16(Enum):
    kycGatherer = 'kycGatherer'


class Credentials65(BaseModel):
    payoutPassword: Optional[SecretStr] = Field(
        None, description='LPG payout account password.'
    )
    payoutUsername: Optional[SecretStr] = Field(
        None, description='LPG payout account username.'
    )
    publicKey: str = Field(..., description='LPG public API key.')
    secureKey: SecretStr = Field(..., description='LPG secure API key.')


class LanguageIsoCode(RootModel[constr(pattern=r'[a-zA-Z]{2}')]):
    root: constr(pattern=r'[a-zA-Z]{2}') = Field(
        ..., description='Language (two letter ISO 639-1 code).', examples=['US']
    )


class Rel17(Enum):
    leadSource = 'leadSource'


class Link(BaseModel):
    href: str = Field(..., description='The link URL.')


class Credentials66(BaseModel):
    accountHolderId: str
    apiKey: SecretStr
    mifinityAccountNumber: SecretStr


class Credentials67(BaseModel):
    apiToken: SecretStr = Field(..., description='Moneris Gateway api token.')
    storeId: str = Field(..., description='Moneris Gateway store ID.')


class MoneyAmount(RootModel[float]):
    root: float = Field(..., examples=[10])


class Credentials68(BaseModel):
    accountId: str = Field(..., description='MTA Pay Gateway account ID.')
    md5key: SecretStr = Field(..., description='MTA Pay Gateway md5key.')
    partyId: str = Field(..., description='MTA Pay Gateway party ID.')


class Settings17(BaseModel):
    goods: str = Field(..., description='MTA Pay Gateway goods.')
    mobilePay: str = Field(..., description='MTA Pay Gateway mobile pay param.')


class Credentials69(BaseModel):
    apiKey: SecretStr = Field(..., description='MuchBetter api key.')
    merchantAccountId: str = Field(..., description='MuchBetter merchant account ID.')


class Settings18(BaseModel):
    brandName: Optional[str] = Field(
        None, description='MuchBetter brand name used for reporting and logo.'
    )
    hasPhoneNumberRequest: Optional[bool] = Field(
        False,
        description='Request phone number before submitting the request to MuchBetter.',
    )


class Credentials70(BaseModel):
    apiKey: SecretStr = Field(..., description='MyFatoorah api key.')


class Credentials71(BaseModel):
    apiKey: SecretStr = Field(..., description='NGenius API key.')
    outletId: str = Field(..., description='NGenius outlet ID.')


class Credentials72(BaseModel):
    password: SecretStr = Field(..., description='NMI Gateway store ID.')
    username: str = Field(..., description='NMI Gateway api token.')


class Settings19(BaseModel):
    disableStoredCredentials: Optional[bool] = Field(
        False, description='Disable NMI Stored Credentials (CIT/MIT).'
    )


class Credentials73(BaseModel):
    merchantId: str = Field(..., description='Neosurf merchant ID.')
    secretKey: SecretStr = Field(..., description='Neosurf API secret key.')


class Credentials74(BaseModel):
    midcode: str = Field(..., description='Netbanking MID code.')
    midsecret: SecretStr = Field(..., description='Netbanking MID secret key.')


class Credentials75(BaseModel):
    paysafePaymentsApiPassword: SecretStr = Field(
        ..., description='Neteller App Paysafe Payments API Password for a private key.'
    )
    paysafePaymentsApiUsername: str = Field(
        ..., description='Neteller App Paysafe Payments API Username for a private key.'
    )


class Settings20(BaseModel):
    populateCustomerEmail: Optional[bool] = Field(
        None, description='Populate customer email for payment.'
    )


class Credentials76(BaseModel):
    apiKey: SecretStr = Field(..., description='NinjaWallet api key.')
    passphrase: SecretStr = Field(..., description='NinjaWallet passphrase.')
    secret: SecretStr = Field(..., description='NinjaWallet secret.')


class Credentials77(BaseModel):
    nuaPayAccountId: str = Field(..., description='NuaPay account ID.')
    nuaPayApiKey: SecretStr = Field(..., description='NuaPay api key.')
    nuaPayCommonName: str = Field(..., description='NuaPay common name.')
    nuaPayOriginatorIban: SecretStr = Field(..., description='NuaPay origiantor IBAN.')
    nuaPayPrivateKey: SecretStr = Field(..., description='NuaPay private key.')
    nuaPaySerialNumber: str = Field(..., description='NuaPay serial number.')


class Credentials78(BaseModel):
    apiPassword: SecretStr = Field(..., description='OchaPay Gateway api password.')
    apiUsername: str = Field(..., description='OchaPay Gateway username.')
    secretWord: SecretStr = Field(..., description='OchaPay Gateway secret word.')


class Rel18(Enum):
    onBoardingUrl = 'onBoardingUrl'


class OnBoardingUrlLink(Link):
    rel: Rel18 = Field(..., description='The link type.')


class Credentials79(BaseModel):
    apiKey: SecretStr


class Credentials80(BaseModel):
    apiKey: SecretStr = Field(..., description='Onlineueberweisen API Key.')
    nuaPayAccountId: Optional[str] = Field(
        None, description='NuaPay account ID for reconciliation.'
    )
    nuaPayApiKey: Optional[SecretStr] = Field(
        None, description='NuaPay API Key for reconciliation.'
    )


class Settings21(BaseModel):
    payformCode: Optional[str] = Field(
        'default',
        description='Onlineueberweisen payform code to use customized Payform template.',
    )


class Type17(Enum):
    timeline_comment_created = 'timeline-comment-created'
    order_renewed = 'order-renewed'
    order_activated = 'order-activated'
    order_completed = 'order-completed'
    order_reactivated = 'order-reactivated'
    order_canceled = 'order-canceled'
    order_upgraded = 'order-upgraded'
    order_downgraded = 'order-downgraded'
    order_billing_address_changed = 'order-billing-address-changed'
    order_delivery_address_changed = 'order-delivery-address-changed'
    order_renewal_time_changed = 'order-renewal-time-changed'
    order_churned = 'order-churned'
    order_custom_fields_changed = 'order-custom-fields-changed'
    order_items_changed = 'order-items-changed'
    order_billing_anchor_changed = 'order-billing-anchor-changed'
    order_recurring_interval_changed = 'order-recurring-interval-changed'
    order_risk_metadata_changed = 'order-risk-metadata-changed'
    order_paid_early = 'order-paid-early'
    order_quantity_changed = 'order-quantity-changed'
    email_message_sent = 'email-message-sent'
    coupon_applied = 'coupon-applied'
    invoice_created = 'invoice-created'
    invoice_issued = 'invoice-issued'
    invoice_abandoned = 'invoice-abandoned'
    invoice_voided = 'invoice-voided'
    invoice_past_due = 'invoice-past-due'
    invoice_paid = 'invoice-paid'
    invoice_partially_paid = 'invoice-partially-paid'
    invoice_disputed = 'invoice-disputed'
    invoice_refunded = 'invoice-refunded'
    invoice_partially_refunded = 'invoice-partially-refunded'
    invoice_renewal_payment_declined = 'invoice-renewal-payment-declined'


class Rel19(Enum):
    organization = 'organization'


class OrganizationLink(Link):
    rel: Rel19 = Field(..., description='The link type.')


class OrganizationQuestionnaire(BaseModel):
    integrationType: Optional[str] = Field(
        None, description='What kind of integration organization looks for.'
    )
    launchTiming: Optional[str] = Field(None, description='Desired time to go live.')
    monthlyTransactions: Optional[str] = Field(
        None, description='The amount of monthly processed transaction.'
    )
    products: Optional[List[str]] = Field(
        None, description='The list of products organization is interested in.'
    )
    role: Optional[str] = Field(None, description='The role of the owner.')


class Credentials81(BaseModel):
    appId: str = Field(..., description='Pagsmile app ID.')
    merchantId: str = Field(..., description='Pagsmile merchant ID.')
    secretKey: SecretStr = Field(..., description='Pagsmile secret key.')


class Credentials82(BaseModel):
    key: str = Field(..., description="Panamerican's key.")
    password: SecretStr = Field(..., description="Panamerican's Password.")


class Settings22(BaseModel):
    convertToAscii: Optional[bool] = Field(
        None, description='Will convert all chars to ascii.'
    )
    extraStep: bool = Field(
        ..., description='Show extra step for user to enter their ID number.'
    )


class Credentials83(BaseModel):
    apiCode: str = Field(..., description='Panda Gateway api code.')
    merchantCode: str = Field(..., description='Panda Gateway merchant code.')
    signKey: SecretStr = Field(..., description='Panda Gateway sign key.')


class Credentials84(BaseModel):
    merchant_id: str = Field(..., description='Merchant account ID.')
    merchant_pass: SecretStr = Field(..., description='Merchant account password.')
    payee: str = Field(..., description='Merchant name/descriptor.')


class Credentials85(BaseModel):
    encryptionKey: SecretStr = Field(
        ..., description='ParamountInterac encryption key.'
    )
    merchantId: str = Field(..., description='ParamountInterac merchant ID.')
    password: SecretStr = Field(..., description='ParamountInterac password for query.')


class Settings23(BaseModel):
    sandbox: bool = Field(
        ..., description='True if gateway account is in sandbox mode.'
    )


class Rel20(Enum):
    parentTransaction = 'parentTransaction'


class ParentTransactionLink(Link):
    rel: Rel20 = Field(..., description='The link type.')


class Credentials86(BaseModel):
    merchantId: str = Field(..., description='Pay4Fun merchant ID.')
    merchantKey: SecretStr = Field(..., description='Pay4Fun merchant key.')
    merchantSecret: SecretStr = Field(..., description='Pay4Fun merchant secret.')


class Credentials87(BaseModel):
    emisor: str = Field(..., description='Identify of the company.')
    token: SecretStr = Field(..., description='Token.')


class Credentials88(BaseModel):
    accountNumber: str
    merchantId: Optional[str] = None
    signKey: SecretStr


class Settings24(BaseModel):
    use3DSChannel: Optional[bool] = Field(None, description='Use 3DS channel.')


class Settings25(BaseModel):
    enableGuestCheckout: Optional[bool] = Field(
        False,
        description='Allow users without PayPal accounts to pay using credit or debit cards.',
    )
    redirectUrl: str = Field(
        ...,
        description='The URL where the user will be redirected after authorizing the account on PayPal.',
    )


class Credentials89(BaseModel):
    clientKey: str
    profileId: str
    serverKey: SecretStr


class Credentials90(BaseModel):
    accountId: str = Field(..., description='PayULatam account id.')
    apiKey: SecretStr = Field(..., description='PayULatam API key.')
    apiLogin: str = Field(..., description='PayULatam API login.')
    merchantId: str = Field(..., description='PayULatam merchant id.')


class Credentials91(BaseModel):
    apiKey: str = Field(..., description='API Key.')
    apiSecret: SecretStr = Field(..., description='API Secret.')
    merchantId: str = Field(..., description='Payeezy Merchant ID.')
    merchantToken: SecretStr = Field(..., description='Merchant Token.')


class Credentials92(BaseModel):
    password: SecretStr = Field(
        ..., description='The password you defined while registering for the account.'
    )
    user: str = Field(
        ...,
        description='If you set up one or more additional users on the account, this value is the ID of the user authorized to process transactions. If, however, you have not set up additional users, USER has the same value as VENDOR.',
    )
    vendor: str = Field(
        ...,
        description='Your merchant login ID created when you registered for the account.',
    )


class Credentials93(BaseModel):
    apiKey: SecretStr = Field(
        ..., description='PaymenTechnologies API key required for query operations.'
    )
    authenticateId: str = Field(
        ..., description='PaymenTechnologies Gateway authenticate ID.'
    )
    authenticatePw: SecretStr = Field(
        ..., description='PaymenTechnologies Gateway authenticate password.'
    )
    publicKey: str = Field(
        ..., description='PaymenTechnologies Gateway API public key.'
    )
    secretKey: SecretStr = Field(
        ..., description='PaymenTechnologies Gateway API secret key.'
    )


class Settings26(BaseModel):
    use3DSEndpoint: Optional[bool] = Field(None, description='Use 3DS endpoint.')


class Credentials94(BaseModel):
    apiKey: SecretStr


class PaymentCardBrand(Enum):
    Visa = 'Visa'
    MasterCard = 'MasterCard'
    American_Express = 'American Express'
    Discover = 'Discover'
    Maestro = 'Maestro'
    Solo = 'Solo'
    Electron = 'Electron'
    JCB = 'JCB'
    Voyager = 'Voyager'
    Diners_Club = 'Diners Club'
    Switch = 'Switch'
    Laser = 'Laser'
    China_UnionPay = 'China UnionPay'
    AstroPay_Card = 'AstroPay Card'


class Method19(Enum):
    payment_card = 'payment-card'


class Name12(Enum):
    Google_Pay = 'Google Pay'
    Apple_Pay = 'Apple Pay'


class PaymentCardDigitalWalletFeature(BaseModel):
    name: Optional[Name12] = Field(None, description='The feature name.')


class Rel21(Enum):
    paymentCard = 'paymentCard'


class PaymentCardLink(Link):
    rel: Rel21 = Field(..., description='The link type.')


class PaymentInstrument3(BaseModel):
    bin: Optional[str] = Field(
        None, description="Payment Card BIN (the PAN's first 6 digits)."
    )
    brand: Optional[PaymentCardBrand] = None
    cvv: Optional[str] = Field(None, description='Payment Card CVV/CVC.')
    expMonth: Optional[int] = Field(None, description='Payment Card expiration month.')
    expYear: Optional[int] = Field(None, description='Payment Card expiration year.')
    last4: Optional[str] = Field(None, description="Payment Card PAN's last 4 digits.")
    pan: Optional[str] = Field(
        None, description='Payment Card PAN (Primary Account Number).'
    )


class PaymentMethod(Enum):
    payment_card = 'payment-card'
    ach = 'ach'
    cash = 'cash'
    check = 'check'
    paypal = 'paypal'
    AdvCash = 'AdvCash'
    Airpay = 'Airpay'
    Alfa_click = 'Alfa-click'
    Alipay = 'Alipay'
    Apple_Pay = 'Apple Pay'
    AstroPay_Card = 'AstroPay Card'
    AstroPay_GO = 'AstroPay-GO'
    bank_transfer = 'bank-transfer'
    bank_transfer_2 = 'bank-transfer-2'
    bank_transfer_3 = 'bank-transfer-3'
    bank_transfer_4 = 'bank-transfer-4'
    bank_transfer_5 = 'bank-transfer-5'
    bank_transfer_6 = 'bank-transfer-6'
    bank_transfer_7 = 'bank-transfer-7'
    bank_transfer_8 = 'bank-transfer-8'
    bank_transfer_9 = 'bank-transfer-9'
    Beeline = 'Beeline'
    Belfius_direct_net = 'Belfius-direct-net'
    bitcoin = 'bitcoin'
    Boleto = 'Boleto'
    Boleto_2 = 'Boleto-2'
    Boleto_3 = 'Boleto-3'
    cash_deposit = 'cash-deposit'
    CASHlib = 'CASHlib'
    CashToCode = 'CashToCode'
    CCAvenue = 'CCAvenue'
    China_UnionPay = 'China UnionPay'
    CODVoucher = 'CODVoucher'
    Conekta_oxxo = 'Conekta-oxxo'
    Conekta_spei = 'Conekta-spei'
    cryptocurrency = 'cryptocurrency'
    Cupon_de_pagos = 'Cupon-de-pagos'
    CyberSource = 'CyberSource'
    domestic_cards = 'domestic-cards'
    echeck = 'echeck'
    ecoPayz = 'ecoPayz'
    ecoVoucher = 'ecoVoucher'
    EPS = 'EPS'
    ePay_bg = 'ePay.bg'
    Ethereum = 'Ethereum'
    e_wallet = 'e-wallet'
    ezyEFT = 'ezyEFT'
    eZeeWallet = 'eZeeWallet'
    Flexepin = 'Flexepin'
    Giropay = 'Giropay'
    Google_Pay = 'Google Pay'
    Gpaysafe = 'Gpaysafe'
    iDebit = 'iDebit'
    iDEAL = 'iDEAL'
    ING_homepay = 'ING-homepay'
    INOVAPAY_pin = 'INOVAPAY-pin'
    INOVAPAY_wallet = 'INOVAPAY-wallet'
    InstaDebit = 'InstaDebit'
    instant_bank_transfer = 'instant-bank-transfer'
    Interac_online = 'Interac-online'
    Interac_eTransfer = 'Interac-eTransfer'
    Interac_express_connect = 'Interac-express-connect'
    Interac = 'Interac'
    invoice = 'invoice'
    iWallet = 'iWallet'
    Jeton = 'Jeton'
    jpay = 'jpay'
    Khelocard = 'Khelocard'
    Klarna = 'Klarna'
    Litecoin = 'Litecoin'
    loonie = 'loonie'
    LPG_online = 'LPG-online'
    LPG_payment_card = 'LPG-payment-card'
    Megafon = 'Megafon'
    MiFinity_eWallet = 'MiFinity-eWallet'
    miscellaneous = 'miscellaneous'
    Bancontact = 'Bancontact'
    MTS = 'MTS'
    MuchBetter = 'MuchBetter'
    MyFatoorah = 'MyFatoorah'
    Neosurf = 'Neosurf'
    Netbanking = 'Netbanking'
    Neteller = 'Neteller'
    Nordea_Solo = 'Nordea-Solo'
    OchaPay = 'OchaPay'
    online_bank_transfer = 'online-bank-transfer'
    Onlineueberweisen = 'Onlineueberweisen'
    oriental_wallet = 'oriental-wallet'
    OXXO = 'OXXO'
    Pagsmile_lottery = 'Pagsmile-lottery'
    Pagsmile_deposit_express = 'Pagsmile-deposit-express'
    PayCash = 'PayCash'
    Payeer = 'Payeer'
    PaymentAsia_crypto = 'PaymentAsia-crypto'
    Paysafecard = 'Paysafecard'
    PayTabs = 'PayTabs'
    Pay4Fun = 'Pay4Fun'
    Paymero = 'Paymero'
    Paymero_QR = 'Paymero-QR'
    PayULatam = 'PayULatam'
    Perfect_money = 'Perfect-money'
    Piastrix = 'Piastrix'
    PIX = 'PIX'
    PinPay = 'PinPay'
    phone = 'phone'
    PhonePe = 'PhonePe'
    POLi = 'POLi'
    PostFinance_card = 'PostFinance-card'
    PostFinance_e_finance = 'PostFinance-e-finance'
    Przelewy24 = 'Przelewy24'
    QIWI = 'QIWI'
    QQPay = 'QQPay'
    Resurs = 'Resurs'
    SEPA = 'SEPA'
    Siirto = 'Siirto'
    Skrill = 'Skrill'
    Skrill_Rapid_Transfer = 'Skrill Rapid Transfer'
    SMSVoucher = 'SMSVoucher'
    Sofort = 'Sofort'
    SparkPay = 'SparkPay'
    swift_dbt = 'swift-dbt'
    Tele2 = 'Tele2'
    Terminaly_RF = 'Terminaly-RF'
    Tether = 'Tether'
    ToditoCash_card = 'ToditoCash-card'
    Trustly = 'Trustly'
    TWINT = 'TWINT'
    UniCrypt = 'UniCrypt'
    UPayCard = 'UPayCard'
    UPI = 'UPI'
    VCreditos = 'VCreditos'
    VenusPoint = 'VenusPoint'
    voucher = 'voucher'
    voucher_2 = 'voucher-2'
    voucher_3 = 'voucher-3'
    voucher_4 = 'voucher-4'
    Webmoney = 'Webmoney'
    Webpay = 'Webpay'
    Webpay_2 = 'Webpay-2'
    Webpay_Card = 'Webpay Card'
    WeChat_Pay = 'WeChat Pay'
    XPay_P2P = 'XPay-P2P'
    XPay_QR = 'XPay-QR'
    Yandex_money = 'Yandex-money'
    Zotapay = 'Zotapay'
    Zimpler = 'Zimpler'


class PaymentMethods(BaseModel):
    methods: Optional[List[PaymentMethod]] = Field(
        None,
        description='The list of available payment methods.\nOnly payment methods with at least one active gateway account are allowed.\n\nIf not specified all available payment methods will be displayed.\n\nCustomer can choose any of those as well as the payment instrument for them.\nAdditional steps will occur via a redirect to `approvalUrl`.\n',
    )


class AfterAttemptPolicy1(Enum):
    none = 'none'
    change_subscription_renewal_time = 'change-subscription-renewal-time'


class AfterRetryEndPolicy1(Enum):
    none = 'none'
    cancel_subscription = 'cancel-subscription'


class Attempt1(BaseModel):
    paymentInstruction: AmountAdjustment
    scheduleInstruction: CommonScheduleInstruction


class PaymentRetry(BaseModel):
    afterAttemptPolicy: AfterAttemptPolicy1 = Field(
        ..., description='The policy on the attempt finishes.'
    )
    afterRetryEndPolicy: AfterRetryEndPolicy1 = Field(
        ..., description='The policy on the retry ends.'
    )
    attempts: List[Attempt1] = Field(..., min_length=1)


class PaymentToken(BaseModel):
    token: str = Field(..., description='Payment Token ID.')


class Credentials95(BaseModel):
    appId: str
    privateKey: SecretStr


class Credentials96(BaseModel):
    apiKey: SecretStr = Field(..., description='Paymero API key.')


class MainCurrency(Enum):
    TRX = 'TRX'
    ETH = 'ETH'


class Settings27(BaseModel):
    amountExceeded: Optional[bool] = Field(
        False,
        description='Decline transactions when the amount received exceeds the amount requested.',
    )
    mainCurrency: Optional[MainCurrency] = Field(
        None, description='This will be the blockchain on which currency runs.'
    )
    targetCurrency: Optional[constr(min_length=3, max_length=3)] = Field(
        None,
        description='This will be the currency to which you want to auto-convert the received cryptocurrency in to.',
        examples=['USD'],
    )


class Credentials97(BaseModel):
    apiSecurityToken: Optional[SecretStr] = Field(
        None,
        description='Hash of the password for the Alliance API (transaction reporting).',
    )
    apiUserId: Optional[str] = Field(
        None, description='Username for the Alliance API (transaction reporting).'
    )
    clientId: str = Field(..., description='Payr Gateway client ID.')
    secretWord: SecretStr = Field(..., description='Payr Gateway secret word.')


class Credentials98(BaseModel):
    accountNum: str = Field(..., description='Paysafe Gateway account number.')
    storeId: str = Field(..., description='Paysafe Gateway store ID.')
    storePwd: SecretStr = Field(..., description='Paysafe Gateway store password.')


class Credentials99(BaseModel):
    apiKey: SecretStr = Field(..., description='Paysafecash API key.')


class Credentials100(BaseModel):
    memberGuid: SecretStr = Field(..., description='Payvision Gateway member guid.')
    memberId: str = Field(..., description='Payvision Gateway member id.')


class Settings28(BaseModel):
    avs: Optional[bool] = Field(None, description='Payvision Gateway avs.')
    delay: Optional[int] = Field(None, description='Payvision Gateway delay.')
    merchantAccountType: int = Field(
        ..., description='Payvision merchant account type.'
    )


class Rel22(Enum):
    permalink = 'permalink'


class PermalinkLink(Link):
    rel: Rel22 = Field(..., description='The link type.')


class Credentials101(BaseModel):
    secretKey: SecretStr = Field(..., description='Secret Key.')
    shopId: str = Field(..., description='Shop ID.')


class Settings29(BaseModel):
    tolerancePercentage: Optional[conint(ge=0, le=5)] = Field(
        None, description='Tolerance percentage for settled amount.', examples=[5]
    )


class Method21(Enum):
    plaid_account = 'plaid-account'


class PlanBillingTiming(Enum):
    prepaid = 'prepaid'
    postpaid = 'postpaid'


class Unit(Enum):
    day = 'day'
    week = 'week'
    month = 'month'
    year = 'year'


class PlanPeriod(BaseModel):
    length: int = Field(..., description='The length of time.')
    unit: Unit = Field(..., description='The unit of time.')


class Formula(Enum):
    fixed_fee = 'fixed-fee'
    flat_rate = 'flat-rate'
    stairstep = 'stairstep'
    tiered = 'tiered'
    volume = 'volume'


class PlanPriceFormula(BaseModel):
    formula: Formula = Field(
        ...,
        description='The price formula determines what algorithm is used to calculate the invoice price based on a few factors,\n- the quantity in the order (which may be variable if usage pricing, otherwise determined when creating the order)\n- the price brackets data\n\nTo determine which formula is correct, please see the price formula documentation.\n',
    )


class Credentials102(BaseModel):
    publisher_name: str = Field(
        ..., alias='publisher-name', description='Plugnpay Gateway member id.'
    )
    publisher_password: SecretStr = Field(
        ..., alias='publisher-password', description='Plugnpay Gateway avs.'
    )


class Credentials103(BaseModel):
    keyPassphrase: SecretStr
    merchantId: str
    privateKey: SecretStr
    pspId: str
    publicKey: str
    sftpKeyPassphrase: SecretStr
    sftpPrivateKey: SecretStr
    sftpUsername: str


class Problem(DocumentedProblem, DetailedProblem):
    pass


class TaxCategoryId(Enum):
    field_00000 = '00000'
    field_99999 = '99999'
    field_20010 = '20010'
    field_40030 = '40030'
    field_51020 = '51020'
    field_51010 = '51010'
    field_31000 = '31000'
    field_30070 = '30070'


class Rel23(Enum):
    product = 'product'


class ProductLink(Link):
    rel: Rel23 = Field(..., description='The link type.')


class DocumentMatches(BaseModel):
    data: Optional[AddressMatches] = None
    score: Optional[float] = Field(
        None,
        description='The calculated score that represents the % of confidence that this proof of address represents the given customer.',
        examples=[0.75],
    )


class ParsedData(BaseModel):
    data: Optional[AddressMatches] = None
    score: Optional[float] = Field(
        None,
        description='The calculated score that represents the % of confidence that this proof of address represents the given customer.',
        examples=[0.75],
    )


class DocumentMatches1(BaseModel):
    data: Optional[IdentityMatches] = None
    score: Optional[float] = Field(
        None,
        description='The calculated score that represents the % of confidence that this ID represents the given customer.',
        examples=[0.75],
    )


class ParsedData1(BaseModel):
    data: Optional[IdentityMatches] = None
    score: Optional[float] = Field(
        None,
        description='The calculated score that represents the % of confidence that this ID represents the given customer.',
        examples=[0.75],
    )


class Credentials104(BaseModel):
    accessToken: SecretStr = Field(..., description='Access token.')
    entityId: str = Field(..., description='Entity ID.')


class PurchaseBumpSplitVersionName(RootModel[str]):
    root: str = Field(
        ..., description='The name of bump offer version, useful to make split tests.'
    )


class PurchaseBumpStatus(Enum):
    presented = 'presented'
    rejected = 'rejected'
    selected = 'selected'
    unknown = 'unknown'


class Rel24(Enum):
    queryUrl = 'queryUrl'


class QueryUrlLink(Link):
    rel: Rel24 = Field(..., description='The link type.')


class Credentials105(BaseModel):
    key: SecretStr = Field(..., description='RPN Key.')
    mid: str = Field(..., description='RPN MID.')


class Credentials106(BaseModel):
    accessKey: str
    secretKey: SecretStr


class Method22(Enum):
    ach = 'ach'


class ReadyToPayAchMethod(BaseModel):
    feature: Optional[AchPlaidFeature] = Field(
        None,
        description="The specific feature (eg. digital wallet or a processor) of this method. If method doesn't have any features – will be null.\n",
    )
    filters: Optional[List[str]] = Field(
        None,
        description='For the method to be applicable any of the following filters should match.\nIf no filters sent – no restrictions applied. This follows our standard filter format.\n',
    )
    method: Method22 = Field(..., description='The payment method.')


class ReadyToPayAmount(BaseModel):
    amount: float = Field(..., description='The amount.')
    currency: CurrencyCode


class ReadyToPayGenericMethod(BaseModel):
    filters: Optional[List[str]] = Field(
        None,
        description='For the method to be applicable any of the following filters should match.\nIf no filters sent – no restrictions applied. This follows our standard filter format.\n',
    )
    method: AlternativePaymentMethods = Field(..., description='The payment method.')


class Method24(Enum):
    payment_card = 'payment-card'


class ReadyToPayPaymentCardMethod(BaseModel):
    brands: Optional[List[PaymentCardBrand]] = Field(
        None, description='The list of supported brands.', min_length=1
    )
    feature: Optional[PaymentCardDigitalWalletFeature] = Field(
        None,
        description="The specific feature (eg. digital wallet or a processor) of this method. If method doesn't have any features – will be null.\n",
    )
    filters: Optional[List[str]] = Field(
        None,
        description='For the method to be applicable any of the following filters should match.\nIf no filters sent – no restrictions applied. This follows our standard filter format.\n',
    )
    method: Method24 = Field(..., description='The payment method.')


class Credentials107(BaseModel):
    account: str = Field(..., description='Realex Gateway account.')
    merchantId: str = Field(..., description='Realex Gateway merchant id.')
    rebatePassword: SecretStr = Field(
        ..., description='Realex Gateway rebate password.'
    )
    secretKey: SecretStr = Field(..., description='Realex Gateway secret key.')


class Credentials108(BaseModel):
    clientId: str = Field(..., description='Realtime Gateway client ID.')
    secretWord: SecretStr = Field(..., description='Realtime Gateway secret word.')


class Rel25(Enum):
    recalculateInvoice = 'recalculateInvoice'


class RecalculateInvoiceLink(Link):
    rel: Rel25 = Field(..., description='The link type.')


class Rel26(Enum):
    recentInvoice = 'recentInvoice'


class RecentInvoiceLink(Link):
    rel: Rel26 = Field(..., description='The link type.')


class Type18(Enum):
    discounts_per_redemption = 'discounts-per-redemption'
    minimum_order_amount = 'minimum-order-amount'
    restrict_to_invoices = 'restrict-to-invoices'
    restrict_to_plans = 'restrict-to-plans'
    restrict_to_subscriptions = 'restrict-to-subscriptions'
    restrict_to_products = 'restrict-to-products'
    paid_by_time = 'paid-by-time'


class RedemptionRestriction(BaseModel):
    type: Type18 = Field(..., description="Redemption's additional restriction type.")


class Credentials109(BaseModel):
    merchantCode: SecretStr = Field(..., description='Redsys Gateway merchant code.')
    secretCode: SecretStr = Field(..., description='Redsys Gateway secret code.')


class Rel27(Enum):
    refundUrl = 'refundUrl'


class RefundUrlLink(Link):
    rel: Rel27 = Field(..., description='The link type.')


class ResourceCustomFields(BaseModel):
    pass


class ResourceId(RootModel[constr(max_length=50)]):
    root: constr(max_length=50) = Field(
        ...,
        description='The resource ID. Defaults to UUID v4.',
        examples=['4f6cf35x-2c4y-483z-a0a9-158621f77a21'],
    )


class Rel28(Enum):
    retriedTransaction = 'retriedTransaction'


class RetriedTransactionLink(Link):
    rel: Rel28 = Field(..., description='The link type.')


class RiskMetadata(BaseModel):
    accuracyRadius: Optional[int] = Field(
        None, description='Accuracy radius for specified ipAddress (kilometers).'
    )
    browserData: Optional[BrowserData] = None
    city: Optional[str] = Field(
        None, description='City for specified ipAddress.', examples=['New York']
    )
    country: Optional[constr(max_length=2)] = Field(
        None,
        description='Country ISO Alpha-2 code for specified ipAddress.',
        examples=['US'],
    )
    deviceVelocity: Optional[int] = Field(
        None,
        description='Number of transactions for this device (based on fingerprint) in the last 24 hours.',
    )
    distance: Optional[int] = Field(
        None,
        description='Distance between IP Address and Billing Address geolocation (kilometers).',
    )
    fingerprint: Optional[constr(max_length=50)] = Field(
        None, description='The fingerprint.', examples=['pIUt3xbgX3l9g3YDiLbx']
    )
    hasMismatchedBankCountry: Optional[bool] = Field(
        None,
        description='True if the bank country and geo-IP address are not the same.',
    )
    hasMismatchedBillingAddressCountry: Optional[bool] = Field(
        None,
        description='True if the billing address country and geo-IP address are not the same.',
    )
    hasMismatchedHolderName: Optional[bool] = Field(
        None,
        description="True if the customer's name from billing address and from customer's primary address are not the same.",
    )
    hasMismatchedTimeZone: Optional[bool] = Field(
        None,
        description='True if the browser time zone and IP address associated time zone are not the same.',
    )
    httpHeaders: Optional[HttpHeaders] = None
    ipAddress: Optional[str] = Field(
        None, description="The customer's IP.", examples=['93.92.91.90']
    )
    isHosting: Optional[bool] = Field(
        None, description="True if customer's ip address is related to hosting."
    )
    isProxy: Optional[bool] = Field(
        None, description="True if customer's ip address is related to proxy."
    )
    isTor: Optional[bool] = Field(
        None, description="True if customer's ip address is related to TOR."
    )
    isVpn: Optional[bool] = Field(
        None, description="True if customer's ip address is related to VPN."
    )
    isp: Optional[str] = Field(
        None, description='Internet Service Provider name, if available.'
    )
    latitude: Optional[float] = Field(
        None, description='Latitude for specified ipAddress.'
    )
    longitude: Optional[float] = Field(
        None, description='Longitude for specified ipAddress.'
    )
    paymentInstrumentVelocity: Optional[int] = Field(
        None,
        description='Number of transactions for this payment instrument (based on fingerprint) in the last 24 hours.',
    )
    postalCode: Optional[constr(max_length=10)] = Field(
        None, description='Postal code for specified ipAddress.'
    )
    region: Optional[str] = Field(
        None, description='Region for specified ipAddress.', examples=['NY']
    )
    score: Optional[int] = Field(
        None, description='Risk score computed per all the factors.'
    )
    timeZone: Optional[str] = Field(
        None,
        description='Time zone for specified ipAddress.',
        examples=['America/New_York'],
    )
    vpnServiceName: Optional[str] = Field(
        None, description='VPN service name, if available.'
    )


class Credentials110(BaseModel):
    apiKey: SecretStr = Field(..., description='Rotessa api key.')


class Settings30(BaseModel):
    delay: int = Field(
        ..., description='Rotessa Gateway time delay for them to process transaction.'
    )


class Credentials111(BaseModel):
    AppId: str = Field(..., description='SMSVoucher AppId.')


class Credentials112(BaseModel):
    M_ID: str = Field(..., description='Sagepay Gateway merchant ID.')
    M_KEY: SecretStr = Field(..., description='Sagepay Gateway merchant key.')


class Credentials113(BaseModel):
    apiKey: SecretStr = Field(..., description='SaltarPay API key.')
    secretKey: SecretStr = Field(..., description='SaltarPay secret key.')


class Credentials114(BaseModel):
    publicKey: str = Field(..., description='SeamlessChex publishable key.')
    secretKey: SecretStr = Field(..., description='SeamlessChex secret key.')


class Credentials115(BaseModel):
    password: SecretStr = Field(..., description='SecureTrading web service password.')
    username: str = Field(..., description='SecureTrading web service username.')
    websiteId: str = Field(..., description='Website ID.')


class Credentials116(BaseModel):
    secretApiKey: SecretStr


class Rel29(Enum):
    self = 'self'


class SelfLink(Link):
    rel: Rel29 = Field(..., description='The link type.')


class ServerTimestamp(RootModel[datetime_aliased]):
    root: datetime_aliased = Field(
        ..., description='Read-only timestamp, automatically assigned on back-end.'
    )


class Method25(Enum):
    immediately = 'immediately'
    day_of_month = 'day-of-month'
    day_of_week = 'day-of-week'


class ServicePeriodAnchorInstruction(BaseModel):
    method: Method25


class Rel30(Enum):
    signedLink = 'signedLink'


class SignedLinkLink(Link):
    rel: Rel30 = Field(..., description='The link type.')


class Credentials117(BaseModel):
    accountEmail: str = Field(
        ..., description='Email address of your Skrill merchant account.'
    )
    mqiPassword: Optional[SecretStr] = Field(
        None, description='Password used during MQI/API requests.'
    )
    secretWord: SecretStr = Field(
        ..., description='Secret word used for MD5 signature verifications.'
    )


class Credentials118(BaseModel):
    applicationId: SecretStr = Field(..., description='SmartInvoice application UID.')
    merchantId: str = Field(..., description='SmartInvoice merchant account UID.')


class Credentials119(BaseModel):
    configKey: SecretStr = Field(..., description='Sofort configuration key.')
    nuaPayAccountId: Optional[str] = Field(
        None, description='NuaPay account ID for reconciliation.'
    )
    nuaPayApiKey: Optional[SecretStr] = Field(
        None, description='NuaPay API Key for reconciliation.'
    )


class Credentials120(BaseModel):
    secretKey: SecretStr = Field(..., description='SparkPay secret key.')
    shopId: str = Field(..., description='SparkPay shop ID.')


class Rel31(Enum):
    staticIpnUrl = 'staticIpnUrl'


class StaticIpnLink(Link):
    rel: Rel31 = Field(..., description='The link type.')


class Settings31(BaseModel):
    enforceOffSession: Optional[bool] = Field(
        False,
        description='If `true`, `off_session` param will always be `true` in Stripe requests.',
    )
    redirectUrl: str = Field(
        ...,
        description='The URL where the user will be redirected after authorizing the account on Stripe.',
    )
    usePaymentIntents: Optional[bool] = Field(
        False,
        description='If `true` the `PaymentIntents` API will be used instead of `Charges` API.',
    )


class Subscription(BaseModel):
    orderType: Optional[OrderType] = Field(
        'subscription-order',
        description='Specifies the type of order, a subscription or a one-time purchase.\n',
    )


class CanceledBy(Enum):
    merchant = 'merchant'
    customer = 'customer'


class Reason(Enum):
    did_not_use = 'did-not-use'
    did_not_want = 'did-not-want'
    missing_features = 'missing-features'
    bugs_or_problems = 'bugs-or-problems'
    do_not_remember = 'do-not-remember'
    risk_warning = 'risk-warning'
    contract_expired = 'contract-expired'
    too_expensive = 'too-expensive'
    other = 'other'
    billing_failure = 'billing-failure'


class Status14(Enum):
    draft = 'draft'
    confirmed = 'confirmed'
    completed = 'completed'
    revoked = 'revoked'


class CancelCategory(Enum):
    billing_failure = 'billing-failure'
    did_not_use = 'did-not-use'
    did_not_want = 'did-not-want'
    missing_features = 'missing-features'
    bugs_or_problems = 'bugs-or-problems'
    do_not_remember = 'do-not-remember'
    risk_warning = 'risk-warning'
    contract_expired = 'contract-expired'
    too_expensive = 'too-expensive'
    never_started = 'never-started'
    switched_plan = 'switched-plan'
    other = 'other'


class CanceledBy1(Enum):
    merchant = 'merchant'
    customer = 'customer'
    rebilly = 'rebilly'


class SubscriptionCancellationState(BaseModel):
    cancelCategory: Optional[CancelCategory] = Field(
        None, description='Cancel category.'
    )
    cancelDescription: Optional[constr(max_length=255)] = Field(
        None, description='Cancel reason description in free form.'
    )
    canceledBy: Optional[CanceledBy1] = Field(None, description='Canceled by.')
    canceledTime: Optional[ServerTimestamp] = Field(
        None, description='Subscription order canceled time.'
    )


class RenewalPolicy(Enum):
    reset = 'reset'
    retain = 'retain'


class SubscriptionInvoice(BaseModel):
    transactionId: Optional[ResourceId] = Field(
        None,
        description='If present, applies a payment to the invoice created.  If the payment is for the invoice total, it would be marked as paid.',
    )


class Rel32(Enum):
    subscription = 'subscription'


class SubscriptionLink(Link):
    rel: Rel32 = Field(..., description='The link type.')


class SubscriptionReactivation(BaseModel):
    field_links: Optional[List[SelfLink]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    cancellationId: Optional[ResourceId] = Field(
        None, description='Identifier of the related cancellation.'
    )
    createdTime: Optional[datetime_aliased] = Field(
        None, description='The time of resource creation (when it is posted).'
    )
    description: Optional[constr(max_length=255)] = Field(
        None, description='Reactivation reason description in free form.'
    )
    effectiveTime: Optional[datetime_aliased] = Field(
        None,
        description='The date from which the service period would start, unless the subscription is canceled but still active.\nIn case the susbcription is still active, the subscription will continue the current service period.\nIf omitted, it will default to the current time.\n',
    )
    id: Optional[ResourceId] = Field(None, description='Reactivation identifier.')
    renewalTime: Optional[datetime_aliased] = Field(
        None,
        description='The time of the next subscription renewal. If omitted then it is computed from the effective time.\nIf the subscription is canceled but active it is ignored, so the next renewal will happen as scheduled.\n',
    )
    subscriptionId: ResourceId = Field(
        ..., description='Identifier of the reactivated subscription.'
    )


class Credentials121(BaseModel):
    cashRegisterId: str = Field(..., description='Cash register ID.')
    keyPassphrase: SecretStr = Field(..., description="TWINT key's passphrase.")
    privateKey: SecretStr = Field(..., description='TWINT private key.')
    publicKey: str = Field(..., description='TWINT public key.')
    storeUuid: str = Field(..., description='TWINT store UUID.')


class Settings32(BaseModel):
    cashRegisterType: str = Field(..., description='TWINT cash register type.')


class Tag(BaseModel):
    field_links: Optional[List[SelfLink]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    createdTime: Optional[ServerTimestamp] = Field(
        None, description="The tag's created time."
    )
    id: Optional[ResourceId] = Field(None, description="The tag's identifier string.")
    name: constr(pattern=r'^[@~\-\.\w\s]+$', max_length=255) = Field(
        ...,
        description='The tag is unique name, which is case-insensitive.',
        examples=['New'],
    )
    updatedTime: Optional[ServerTimestamp] = Field(
        None, description="The tag's updated time."
    )


class Enrolled(Enum):
    Y = 'Y'
    N = 'N'
    U = 'U'


class PayerAuthResponseStatus(Enum):
    Y = 'Y'
    N = 'N'
    U = 'U'
    A = 'A'


class SignatureVerification(Enum):
    Y = 'Y'
    N = 'N'


class ThreeDSecure(BaseModel):
    field_links: Optional[List[SelfLink]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    amount: float = Field(..., description='Transaction amount.')
    cavv: Optional[str] = Field(
        None,
        description='The 3D Secure entry cardholder authentication verification value.',
    )
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='The 3D Secure entry created time.'
    )
    currency: CurrencyCode
    customerId: ResourceId = Field(..., description='Related customer ID.')
    eci: Optional[int] = Field(
        None, description='The 3D Secure entry electronic commerce indicator.'
    )
    enrolled: Enrolled = Field(
        ..., description='Is the cardholder enrolled in 3DSecure.'
    )
    enrollmentEci: str = Field(..., description='The 3D Secure entry enrollment eci.')
    gatewayAccountId: ResourceId = Field(..., description='Related gateway account ID.')
    id: Optional[ResourceId] = Field(
        None, description='The 3D Secure entry identifier string.'
    )
    payerAuthResponseStatus: Optional[PayerAuthResponseStatus] = Field(
        None, description='The 3D Secure entry Auth Response Status.'
    )
    paymentCardId: ResourceId = Field(..., description='Related payment card ID.')
    signatureVerification: Optional[SignatureVerification] = Field(
        None, description='If signature was verified.'
    )
    websiteId: ResourceId = Field(..., description='Related Website ID.')
    xid: Optional[str] = Field(None, description='The 3D Secure entry transaction Id.')


class TransactionType(Enum):
    field_01 = '01'
    field_03 = '03'
    field_10 = '10'
    field_11 = '11'
    field_28 = '28'


class Authenticated(Enum):
    yes = 'yes'
    no = 'no'
    not_applicable = 'not applicable'
    attempted = 'attempted'


class Enrolled1(Enum):
    yes = 'yes'
    no = 'no'
    invalid_card_timeout = 'invalid card/timeout'
    unavailable = 'unavailable'


class Flow(Enum):
    frictionless = 'frictionless'
    challenge = 'challenge'


class Liability(Enum):
    protected = 'protected'
    not_protected = 'not protected'
    protected__attempt_ = 'protected (attempt)'


class Version(Enum):
    field_1_0_2 = '1.0.2'
    field_2_1_0 = '2.1.0'
    field_2_2_0 = '2.2.0'


class ThreeDSecureResult(BaseModel):
    authenticated: Authenticated = Field(
        ..., description='3D Secure authentication response status.'
    )
    enrolled: Enrolled1 = Field(
        ..., description='Is the cardholder enrolled in 3D Secure.'
    )
    flow: Optional[Flow] = Field(None, description='3D Secure 2 authentication flow.')
    isDowngraded: bool = Field(
        ..., description='If 3D Secure 2 was attempted but downgraded to 3D Secure 1.'
    )
    liability: Liability
    version: Optional[Version] = Field(None, description='3D Secure version.')


class ThreeDSecureServerName(Enum):
    Payvision3dsServer = 'Payvision3dsServer'
    Wirecard3dsServer = 'Wirecard3dsServer'
    Ilixium3dsServer = 'Ilixium3dsServer'
    DataCash3dsServer = 'DataCash3dsServer'
    Paysafe3dsServer = 'Paysafe3dsServer'
    Ingenico3dsServer = 'Ingenico3dsServer'
    CardinalCommerce3dsServer = 'CardinalCommerce3dsServer'
    Paay3dsServer = 'Paay3dsServer'
    Panamerican3dsServer = 'Panamerican3dsServer'
    eMerchantPay3dsServer = 'eMerchantPay3dsServer'
    SecureTrading3dsServer = 'SecureTrading3dsServer'
    Clearhaus3dsServer = 'Clearhaus3dsServer'
    Other = 'Other'
    ThreeDSecureIO3dsServer = 'ThreeDSecureIO3dsServer'
    WorldlineAtosFrankfurt3dsServer = 'WorldlineAtosFrankfurt3dsServer'
    Piastrix3dsServer = 'Piastrix3dsServer'
    NGenius3dsServer = 'NGenius3dsServer'
    Stripe3dsServer = 'Stripe3dsServer'


class TimeIso8601Extended(
    RootModel[
        constr(
            pattern=r'^(([01][0-9]|2[0-3]):([0-5][0-9])(?::([0-5][0-9]))?)((?:[+-](?:0[0-9]|1[12])(?::?[0-5][0-9])?)|Z)?$'
        )
    ]
):
    root: constr(
        pattern=r'^(([01][0-9]|2[0-3]):([0-5][0-9])(?::([0-5][0-9]))?)((?:[+-](?:0[0-9]|1[12])(?::?[0-5][0-9])?)|Z)?$'
    ) = Field(..., description='Extended ISO-8601 format of time.')


class TimePluralUnit(Enum):
    seconds = 'seconds'
    minutes = 'minutes'
    hours = 'hours'
    days = 'days'
    months = 'months'
    years = 'years'


class TimeUnit(Enum):
    second = 'second'
    minute = 'minute'
    hour = 'hour'
    day = 'day'
    month = 'month'
    year = 'year'


class Action(Enum):
    resend_email = 'resend-email'
    redemption_cancel = 'redemption-cancel'
    ruleset_restore = 'ruleset-restore'


class TimelineAction(BaseModel):
    action: Optional[Action] = None


class Author(BaseModel):
    userFullName: Optional[str] = None
    userId: Optional[str] = None


class ResourceType(Enum):
    kyc_document = 'kyc-document'
    invoice = 'invoice'
    subscription = 'subscription'
    transaction = 'transaction'
    email_message = 'email-message'
    dispute = 'dispute'
    coupon = 'coupon'


class Link1(BaseModel):
    placeholder: Optional[str] = Field(None, examples=['KYC Document'])
    resourceId: Optional[ResourceId] = None
    resourceType: Optional[ResourceType] = None


class Type19(Enum):
    list = 'list'
    one_columns = 'one-columns'
    two_columns = 'two-columns'
    three_columns = 'three-columns'


class TimelineTable(BaseModel):
    footer: Optional[str] = Field(None, description='Data table footer.')
    title: Optional[str] = Field(None, description='Data table title.')
    type: Optional[Type19] = None


class Credentials122(BaseModel):
    apiKey: SecretStr = Field(..., description='ToditoCash API key.')


class Outcome(Enum):
    rejected = 'rejected'
    selected = 'selected'
    unknown = 'unknown'


class DisputeStatus(Enum):
    response_needed = 'response-needed'
    under_review = 'under-review'
    forfeited = 'forfeited'
    won = 'won'
    lost = 'lost'
    unknown = 'unknown'


class AvsResponse(BaseModel):
    code: Optional[str] = Field(None, description='The response code.')
    message: Optional[str] = Field(None, description='The response message.')
    originalCode: Optional[str] = Field(None, description='The raw response code.')
    originalMessage: Optional[str] = Field(
        None, description='The raw response message.'
    )


class CvvResponse(BaseModel):
    code: Optional[str] = Field(None, description='The response code.')
    message: Optional[str] = Field(None, description='The response message.')
    originalCode: Optional[str] = Field(None, description='The raw response code.')
    originalMessage: Optional[str] = Field(
        None, description='The raw response message.'
    )


class Response(BaseModel):
    code: Optional[str] = Field(None, description="The gateway's response code.")
    message: Optional[str] = Field(None, description="The gateway's response message.")
    originalCode: Optional[str] = Field(
        None, description="The raw, unmapped gateway's response code."
    )
    originalMessage: Optional[str] = Field(
        None, description="The raw, unmapped gateway's response message."
    )
    type: Optional[str] = Field(None, description="The gateway's response type.")


class Gateway(BaseModel):
    avsResponse: Optional[AvsResponse] = Field(
        None, description="The AVS gateway's response."
    )
    cvvResponse: Optional[CvvResponse] = Field(
        None, description="The CVV gateway's response."
    )
    response: Optional[Response] = Field(None, description="The gateway's response.")


class RetriesResult(Enum):
    approved = 'approved'
    canceled = 'canceled'
    declined = 'declined'
    scheduled = 'scheduled'


class Rel33(Enum):
    transactionAllocations = 'transactionAllocations'


class TransactionAllocationsLink(Link):
    rel: Rel33 = Field(..., description='The link type.')


class Rel34(Enum):
    transaction = 'transaction'


class TransactionLink(Link):
    rel: Rel34 = Field(..., description='The link type.')


class TransactionNotificationUrl(RootModel[AnyUrl]):
    root: AnyUrl = Field(
        ...,
        description="The URL where a server-to-server POST notification will be sent.  It  will be sent when the\ntransaction's result is finalized after a timeout or an offsite interaction. Do not trust the\nnotification; follow with a GET request to confirm the result of the transaction. Please\nrespond with a 2xx HTTP status code, or we will reattempt the request again.\nThe 2 placeholders are available to use in this URI: `{id}` and `{result}`.\n",
    )


class Status15(Enum):
    completed = 'completed'
    conn_error = 'conn-error'
    disputed = 'disputed'
    never_sent = 'never-sent'
    offsite = 'offsite'
    partially_refunded = 'partially-refunded'
    pending = 'pending'
    refunded = 'refunded'
    sending = 'sending'
    suspended = 'suspended'
    timeout = 'timeout'
    voided = 'voided'
    waiting_approval = 'waiting-approval'
    waiting_capture = 'waiting-capture'
    waiting_gateway = 'waiting-gateway'
    waiting_refund = 'waiting-refund'


class TransactionQuery(BaseModel):
    amount: Optional[float] = Field(None, description="The transaction's amount.")
    currency: Optional[CurrencyCode] = None
    result: Optional[Result] = Field(None, description='Transaction result.')
    status: Optional[Status15] = Field(None, description='Transaction status.')


class TransactionRefund(BaseModel):
    amount: float = Field(..., description='Refund amount.')


class Type20(Enum):
    field_3ds_authentication = '3ds-authentication'
    sale = 'sale'
    authorize = 'authorize'


class Type21(Enum):
    amount_adjusted = 'amount-adjusted'
    blocklist_matched = 'blocklist-matched'
    bump_offer_accepted = 'bump-offer-accepted'
    bump_offer_presented = 'bump-offer-presented'
    bump_offer_rejected = 'bump-offer-rejected'
    customer_redirected_offsite = 'customer-redirected-offsite'
    customer_returned = 'customer-returned'
    dcc_offer_accepted = 'dcc-offer-accepted'
    dcc_offer_forced = 'dcc-offer-forced'
    dcc_offer_presented = 'dcc-offer-presented'
    dcc_offer_rejected = 'dcc-offer-rejected'
    dispute_changed = 'dispute-changed'
    dispute_created = 'dispute-created'
    dispute_forfeited = 'dispute-forfeited'
    dispute_lost = 'dispute-lost'
    dispute_responded = 'dispute-responded'
    dispute_won = 'dispute-won'
    gateway_connection_failed = 'gateway-connection-failed'
    gateway_connection_timed_out = 'gateway-connection-timed-out'
    gateway_response_received = 'gateway-response-received'
    risk_score_changed = 'risk-score-changed'
    timeline_comment_created = 'timeline-comment-created'
    transaction_abandoned = 'transaction-abandoned'
    transaction_amount_discrepancy_found = 'transaction-amount-discrepancy-found'
    transaction_approved = 'transaction-approved'
    transaction_canceled = 'transaction-canceled'
    transaction_capture_delayed = 'transaction-capture-delayed'
    transaction_captured = 'transaction-captured'
    transaction_declined = 'transaction-declined'
    transaction_discrepancy_found = 'transaction-discrepancy-found'
    transaction_initiated = 'transaction-initiated'
    transaction_reconciled = 'transaction-reconciled'
    transaction_refunded = 'transaction-refunded'
    transaction_retried = 'transaction-retried'
    transaction_rules_processed = 'transaction-rules-processed'
    transaction_scheduled_time_changed = 'transaction-scheduled-time-changed'
    transaction_timeout_resolved = 'transaction-timeout-resolved'
    transaction_voided = 'transaction-voided'
    transaction_waiting_gateway = 'transaction-waiting-gateway'
    transaction_queried = 'transaction-queried'
    transaction_updated = 'transaction-updated'


class Result2(Enum):
    abandoned = 'abandoned'
    approved = 'approved'
    canceled = 'canceled'
    declined = 'declined'


class TransactionUpdate(BaseModel):
    amount: Optional[float] = Field(None, description='The transaction amount.')
    currency: Optional[CurrencyCode] = Field(
        None, description='The transaction currency.'
    )
    result: Result2 = Field(..., description='Transaction result.')


class Rel35(Enum):
    updateUrl = 'updateUrl'


class TransactionUpdateUrlLink(Link):
    rel: Rel35 = Field(..., description='The link type.')


class Credentials123(BaseModel):
    accessToken: SecretStr
    entityId: str


class Credentials124(BaseModel):
    password: SecretStr = Field(..., description='Trustly password.')
    privateKey: SecretStr = Field(..., description='Trustly private key.')
    publicKey: str = Field(..., description='Trustly public key.')
    username: Optional[str] = Field(None, description='Trustly username.')


class Credentials125(BaseModel):
    gatewayNo: str
    merchantNo: str
    signkey: SecretStr


class Credentials126(BaseModel):
    key: SecretStr = Field(..., description='merchant key.')
    receiver_account: str = Field(..., description='merchant receiver account.')
    secret: SecretStr = Field(..., description='merchant secret.')


class Settings33(BaseModel):
    tolerancePercentage: AmountAdjustmentTolerance


class Credentials127(BaseModel):
    pin: SecretStr = Field(..., description='USAePay Gateway pin.')
    sourceKey: SecretStr = Field(..., description='USAePay Gateway source key.')


class Type22(Enum):
    debit = 'debit'
    credit = 'credit'


class UpcomingInvoiceItem(BaseModel):
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='Date-time when the item was added to the subscription.'
    )
    description: Optional[str] = Field(None, description='Description of line item.')
    periodEndTime: Optional[datetime_aliased] = Field(
        None, description='Date-time when the period ends for this item.'
    )
    periodStartTime: Optional[datetime_aliased] = Field(
        None, description='Date-time when the period begins for this item.'
    )
    quantity: int = Field(..., description='Quantity of line item.', examples=[1])
    type: Type22 = Field(..., description='Type of line item.')
    unitPriceAmount: float = Field(
        ..., description='Unit price of the line item.', examples=[49.95]
    )
    unitPriceCurrency: CurrencyCode


class UpcomingInvoiceItemCollection(RootModel[List[UpcomingInvoiceItem]]):
    root: List[UpcomingInvoiceItem]


class Credentials128(BaseModel):
    publicKey: str = Field(..., description='VCreditos API public key.')
    secretKey: SecretStr = Field(..., description='VCreditos API secret key.')


class InvalidField(BaseModel):
    field: Optional[str] = Field(
        None,
        description='The field name. Dot notation is used for nested object field names.',
    )
    message: Optional[str] = None


class ValidationErrorExtensions(BaseModel):
    invalidFields: Optional[List[InvalidField]] = Field(
        None,
        examples=[
            [
                {'field': 'field1', 'message': 'field1 is invalid'},
                {'field': 'subObject.field2', 'message': 'field2 is invalid'},
                {'field': 'subObject.field2', 'message': 'another error in the field2'},
            ]
        ],
    )


class Credentials129(BaseModel):
    merchantId: str = Field(..., description='VantivLitle Gateway merchant ID.')
    password: SecretStr = Field(..., description='VantivLitle Gateway password.')
    username: str = Field(..., description='VantivLitle Gateway username.')


class VantivLitle3dsServers(BaseModel):
    name: ThreeDSecureServerName


class VaultedInstrument(BaseModel):
    method: PaymentMethod = Field(
        ...,
        description='The payment method supported vault.\nSee [Payment Instruments API](https://api-reference.rebilly.com/tag/Payment-Instruments).\n',
    )
    paymentInstrumentId: ResourceId = Field(
        ..., description='The payment instrument identifier.'
    )


class Credentials130(BaseModel):
    password: SecretStr = Field(..., description='Wallet88 API password.')
    username: str = Field(..., description='Wallet88 API user.')


class Credentials131(BaseModel):
    merchantName: str = Field(..., description='Walpay Gateway merchant name.')
    merchantPin: SecretStr = Field(..., description='Walpay Gateway merchant pin.')


class Walpay3dsServers(BaseModel):
    name: ThreeDSecureServerName


class WebsiteEmbed(BaseModel):
    website: Optional[Dict[str, Any]] = None


class Rel36(Enum):
    website = 'website'


class WebsiteLink(Link):
    rel: Rel36 = Field(..., description='The link type.')


class Credentials132(BaseModel):
    businessSignature: SecretStr = Field(
        ..., description='Wirecard Gateway merchant business case signature.'
    )
    delay: int = Field(..., description='Wirecard Gateway delay.')
    merchantPassword: SecretStr = Field(
        ..., description='Wirecard Gateway merchant password.'
    )
    merchantUsername: str = Field(
        ..., description='Wirecard Gateway merchant username.'
    )
    sftpPrivateKey: Optional[SecretStr] = Field(
        None, description='Wirecard sftp private key.'
    )
    sftpUsername: Optional[str] = Field(None, description='Wirecard sftp username.')


class Wirecard3dsServers(BaseModel):
    name: ThreeDSecureServerName


class Credentials133(BaseModel):
    acquiringInstitutionIdentificationCode: str = Field(
        ..., description='Acquiring Institution Identification Code.'
    )
    cardAcceptorIdCode: str = Field(..., description='Card Acceptor ID Code.')


class Settings34(BaseModel):
    cardAcceptorCountryCode: str = Field(..., description='Card Acceptor Country Code.')
    cardAcceptorLocation: str = Field(..., description='Card Acceptor Location.')
    cardAcceptorName: str = Field(..., description='Card Acceptor Name.')


class WorldlineAtosFrankfurt3dsServers(BaseModel):
    name: ThreeDSecureServerName


class Credentials134(BaseModel):
    merchantCode: SecretStr = Field(..., description='Worldpay Gateway merchant code.')
    merchantPassword: SecretStr = Field(
        ..., description='Worldpay Gateway merchant password.'
    )
    payoutMerchantCode: Optional[SecretStr] = Field(
        None, description='Optional alternate merchant code for payouts.'
    )
    payoutMerchantPassword: Optional[SecretStr] = Field(
        None, description='Optional alternate merchant password for payouts.'
    )


class MerchantInitiatedReason(Enum):
    UNSCHEDULED = 'UNSCHEDULED'
    RECURRING = 'RECURRING'
    INSTALMENT = 'INSTALMENT'
    REAUTH = 'REAUTH'
    DELAYED = 'DELAYED'
    INCREMENTAL = 'INCREMENTAL'
    RESUBMISSION = 'RESUBMISSION'
    NOSHOW = 'NOSHOW'


class Settings35(BaseModel):
    delay: Optional[conint(ge=0)] = Field(
        0, description='Auto Capture delay (in hours).'
    )
    enableStoredCredentials: Optional[bool] = Field(
        False, description='True to enable Stored Credentials.'
    )
    merchantInitiatedReason: Optional[MerchantInitiatedReason] = Field(
        'UNSCHEDULED',
        description='The value of merchantInitiatedReason to send with merchant-initiated transactions.',
    )


class Worldpay3dsServers(BaseModel):
    name: ThreeDSecureServerName


class Credentials135(BaseModel):
    encryptionKey: SecretStr
    merchantId: str


class Credentials136(BaseModel):
    apiKey: SecretStr = Field(..., description='Zimpler API key.')
    merchantId: str = Field(..., description='Zimpler merchant id.')


class Credentials137(BaseModel):
    endpointId: str = Field(..., description="Zotapay's endpoint ID.")
    merchantId: str = Field(..., description="Zotapay's merchant ID.")
    merchantSecretKey: SecretStr = Field(
        ..., description="Zotapay's merchant secret key."
    )


Auto = CommonScheduleInstruction


class Credentials138(BaseModel):
    secretKey: SecretStr
    xLogin: str
    xTransKey: str


class Settings36(BaseModel):
    createInstallmentPlan: Optional[bool] = Field(
        False, description='Create installment plan and use it for payment.'
    )


class DateInterval(
    CommonScheduleInstruction,
    CustomEventScheduleInstruction,
    InvoiceRetryScheduleInstruction,
):
    duration: conint(ge=1) = Field(..., description='The number of the units.')
    unit: Union[TimeUnit, TimePluralUnit]


class DayOfMonth(
    CommonScheduleInstruction,
    CustomEventScheduleInstruction,
    ServicePeriodAnchorInstruction,
    InvoiceRetryScheduleInstruction,
):
    day: conint(ge=1, le=31) = Field(
        ...,
        description='The day of the month when event will be scheduled.\nBe aware if the month has less days,\nthe last day of the month will be selected.\n',
    )
    time: Optional[TimeIso8601Extended] = None


class Week(Enum):
    next = 'next'
    first_in_month = 'first-in-month'
    last_in_month = 'last-in-month'


class DayOfWeek(
    CommonScheduleInstruction,
    CustomEventScheduleInstruction,
    ServicePeriodAnchorInstruction,
    InvoiceRetryScheduleInstruction,
):
    day: DayOfWeekLong
    time: Optional[TimeIso8601Extended] = None
    week: Optional[Week] = 'next'


class Type23(Enum):
    percent = 'percent'
    fixed = 'fixed'


class Discount1(AmountAdjustment):
    type: Type23 = Field(..., description='The payment amount discount type.')
    value: float = Field(..., description='The payment amount discount.')


class DiscountsPerRedemption(CouponRestriction, RedemptionRestriction):
    quantity: int = Field(..., description='Restriction quantity.')


class Credentials139(BaseModel):
    apiKey: Optional[SecretStr] = Field(
        None, description='eMerchantPay Gateway api key.'
    )
    clientId: Optional[str] = Field(None, description='eMerchantPay Gateway client ID.')
    password: Optional[SecretStr] = Field(
        None, description='eMerchantPay password for Genesis platform.'
    )
    token: Optional[str] = Field(
        None, description='eMerchantPay token for Genesis platform.'
    )
    username: Optional[str] = Field(
        None, description='eMerchantPay username for Genesis platform.'
    )


class Platform2(Enum):
    IPG = 'IPG'
    Genesis = 'Genesis'


class Settings37(BaseModel):
    platform: Optional[Platform2] = Field(
        'IPG', description='eMerchantPay platform to process payment.'
    )


class EMerchantPay3dsServers(BaseModel):
    name: ThreeDSecureServerName


class Credentials140(BaseModel):
    apiPassword: SecretStr = Field(..., description='eZeeWallet API password.')
    apiUsername: SecretStr = Field(..., description='eZeeWallet API username.')


class Credentials141(BaseModel):
    merchantAccountNumber: str = Field(
        ..., description='ecoPayz merchant account number.'
    )
    merchantPassword: SecretStr = Field(..., description='ecoPayz merchant password.')
    paymentPageId: str = Field(..., description='ecoPayz payment page ID.')


class ValidCurrency(Enum):
    CAD = 'CAD'
    EUR = 'EUR'
    GBP = 'GBP'
    USD = 'USD'


class Settings38(BaseModel):
    validCurrency: ValidCurrency = Field(..., description='Three letter currency code.')


class Credentials142(BaseModel):
    merchantId: str
    merchantToken: SecretStr


class Fixed(Discount):
    amount: PositiveFloat = Field(..., description='Discount amount.')
    currency: CurrencyCode


class FixedFee(PlanPriceFormula):
    price: float = Field(
        ...,
        description="For the very simple price when it's fixed and does not depend on the quantity chosen by customer.\n\nIf the price is 0, it's free.\n",
        examples=[99.95],
    )


class FlatRate(PlanPriceFormula):
    maxQuantity: Optional[int] = Field(
        None,
        description="If the value is `null`, it''s assumed to be infinite.",
        examples=[1],
    )
    price: float = Field(
        ...,
        description="Flat-rate pricing is represented in a simple price per unit.\nSome examples:\n\n- $30 per unit\n- $0.10 per transaction\n- $50 per period\n\nIf the price is 0, it's free.\n",
        examples=[99.95],
    )


class Credentials143(BaseModel):
    authenticateId: str = Field(..., description='iCanPay Gateway authenticate ID.')
    authenticatePw: SecretStr = Field(
        ..., description='iCanPay Gateway authenticate password.'
    )
    publicKey: str = Field(..., description='iCanPay Gateway API public key.')
    secretKey: SecretStr = Field(..., description='iCanPay Gateway API secret key.')


class Settings39(BaseModel):
    use3DSEndpoint: Optional[bool] = Field(None, description='Use 3DS endpoint.')


class Credentials144(BaseModel):
    apiSecurityToken: Optional[SecretStr] = Field(
        None,
        description='Hash of the password for the Alliance API (transaction reporting).',
    )
    apiUserId: Optional[str] = Field(
        None, description='Username for the Alliance API (transaction reporting).'
    )
    clientId: str = Field(..., description='iCheque Gateway client ID.')
    secretWord: SecretStr = Field(..., description='iCheque Gateway secret word.')


class Credentials145(BaseModel):
    merchantId: str = Field(..., description='iDebit merchant account number.')
    password: SecretStr = Field(..., description='iDebit merchant account password.')


class Immediately(
    CommonScheduleInstruction,
    ServicePeriodAnchorInstruction,
    InvoiceRetryScheduleInstruction,
):
    pass


class Intelligent(
    CommonScheduleInstruction,
    CustomEventScheduleInstruction,
    InvoiceRetryScheduleInstruction,
):
    duration: conint(ge=1) = Field(..., description='The number of the units.')
    unit: Union[TimeUnit, TimePluralUnit]


class ListModel(TimelineTable):
    data: Optional[List[str]] = Field(
        None, description='Table data. Each array element represents a line.'
    )


class Credentials146(BaseModel):
    merchantId: str
    merchantToken: SecretStr


class Manual(InvoiceShipping):
    amount: int = Field(..., description="The invoice's shipping amount.")


class Manual2(InvoiceTax):
    items: Optional[List[InvoiceTaxItem]] = Field(
        None, description='Taxes applied to this invoice.'
    )


class MinimumOrderAmount(CouponRestriction, RedemptionRestriction):
    amount: int = Field(..., description='Minimum order quantity.')
    currency: CurrencyCode


class Datum(BaseModel):
    attribute: Optional[str] = None
    value: Optional[str] = None


class OneColumn(TimelineTable):
    data: Optional[List[Datum]] = Field(
        None, description='Table data. Each array element represents a table row.'
    )


class PaidByTime(CouponRestriction, RedemptionRestriction):
    time: datetime_aliased = Field(
        ...,
        description="The time when the coupon's redemption is no longer valid and removed from unpaid invoices if applied. Note that this datetime cannot be changed.",
    )


class Partial(AmountAdjustment):
    type: Type23 = Field(..., description='The payment amount type.')
    value: float = Field(..., description='The payment amount.')


class Percent(Discount):
    value: confloat(le=100.0, gt=0.0) = Field(..., description='Discount percent.')


class Rebilly(InvoiceShipping):
    amount: Optional[int] = Field(
        None,
        description="The invoice's shipping amount which is calculated from [Shipping Zones](#tag/Shipping-Zones).",
    )


class RebillyTaxjar(InvoiceTax):
    items: Optional[List[InvoiceTaxItem]] = Field(
        None,
        description="Taxes applied to this invoice and calculated based on the related Product's `taxCategoryId`.\n",
    )


class RedemptionCancel(TimelineAction):
    redemptionId: Optional[ResourceId] = None


class RedemptionsPerCustomer(CouponRestriction, RedemptionRestriction):
    quantity: int = Field(..., description='Restriction value.')


class ResendEmail(TimelineAction):
    messageId: Optional[ResourceId] = None


class RestrictToInvoices(CouponRestriction, RedemptionRestriction):
    invoiceIds: List[str] = Field(
        ..., description='Invoice IDs coupon can be applied to.'
    )


class RestrictToPlans(CouponRestriction, RedemptionRestriction):
    planIds: List[str] = Field(..., description='Plan IDs coupon can be applied to.')


class RestrictToProducts(CouponRestriction, RedemptionRestriction):
    productIds: List[str] = Field(
        ..., description='Product IDs coupon can be applied to.'
    )


class RestrictToSubscriptions(CouponRestriction, RedemptionRestriction):
    subscriptionIds: List[str] = Field(
        ..., description='Order IDs coupon can be applied to.'
    )


class RulesetRestore(TimelineAction):
    version: Optional[int] = Field(None, description='Rulset version to restore.')


class Bracket(BaseModel):
    maxQuantity: Optional[int] = Field(
        None,
        description="If the value is `null`, it's assumed to be infinite.  It starts at the end of the previous bracket.\nIf there is no previous bracket, it starts at 1.\n",
        examples=[1],
    )
    price: Optional[float] = Field(
        None, description='If the price is 0, it is free.', examples=[99.95]
    )


class Stairstep(PlanPriceFormula):
    brackets: List[Bracket] = Field(
        ...,
        description='The price brackets, along with the price formula,\nis used to calculate the amount to charge for the product on this plan on the invoice.\n\nThe "stairstep" example:\n\nPrice total | Max quantity | Description\n------------|--------------|------------\n$5          | 1            | 1\n$13         | 5            | 2 to 5\n$30         | null         | 6 or more\n\nIf someone bought 1 apple, it would be $5.\n\nIf someone bought 2 apples, it would be $13. For 2 to 5 apples, the price is $13 in any case.\n',
        min_length=1,
    )


class Datum1(BaseModel):
    attribute: Optional[str] = None
    newValue: Optional[str] = None
    previousValue: Optional[str] = None


class ThreeColumns(TimelineTable):
    data: Optional[List[Datum1]] = Field(
        None, description='Table data. Each array element represents a table row.'
    )


class Tiered(PlanPriceFormula):
    brackets: List[Bracket] = Field(
        ...,
        description='The price brackets, along with the price formula,\nis used to calculate the amount to charge for the product on this plan on the invoice.\n\nThe "tiered" example:\n\nPrice per apple | Max quantity | Description\n----------------|--------------|------------\n$5              | 1            | 1\n$4              | 5            | 2 to 5\n$3              | null         | 6 or more\n\nIf someone bought 1 apple, it would be $5.\n\nIf someone bought 2 apples, it would be $9. $5 per apple for the first apple, then $4 per apple for the 2nd to 5th apple.\n',
        min_length=1,
    )


class TotalRedemptions(CouponRestriction, RedemptionRestriction):
    quantity: int = Field(..., description='Total redemptions quantity.')


class Datum2(BaseModel):
    attribute: Optional[str] = None
    value: Optional[str] = None


class TwoColumns(TimelineTable):
    data: Optional[List[Datum2]] = Field(
        None, description='Table data. Each array element represents a table row.'
    )


class Credentials147(BaseModel):
    password: SecretStr = Field(..., description='vegaaH Gateway password.')
    terminalId: str = Field(..., description='vegaaH Gateway terminal ID.')


class Volume(PlanPriceFormula):
    brackets: List[Bracket] = Field(
        ...,
        description='The price brackets, along with the price formula,\nis used to calculate the amount to charge for the product on this plan on the invoice.\n\nThe "volume" example:\n\nPrice per apple | Max quantity | Description\n----------------|--------------|------------\n$5              | 1            | 1\n$4              | 5            | 2 to 5\n$3              | null         | 6 or more\n\nIf someone bought 1 apple, it would be $5.\n\nIf someone bought 2 apples, it would be $8. For 2 to 5 apples, the price is $4 per apple.\n',
        min_length=1,
    )


class Field3dsecureGetResponse(RootModel[List[ThreeDSecure]]):
    root: List[ThreeDSecure]


class Sort(RootModel[List[str]]):
    root: List[str]


class AuthenticationOptionsGetResponse(RootModel[List[AuthenticationOptions]]):
    root: List[AuthenticationOptions]


class Resource(Enum):
    customers = 'customers'
    payment_instruments = 'payment-instruments'
    subscriptions = 'subscriptions'
    transactions = 'transactions'
    websites = 'websites'
    products = 'products'
    plans = 'plans'
    bump_offers = 'bump-offers'


class FilesPostRequest(RootModel[Union[FileCreateFromInline, FileCreateFromUrl]]):
    root: Union[FileCreateFromInline, FileCreateFromUrl]


class Extension(Enum):
    field_png = '.png'
    field_jpg = '.jpg'
    field_gif = '.gif'


class Accept(Enum):
    application_json = 'application/json'
    application_pdf = 'application/pdf'


class KycDocumentsIdMatchesPostRequest(
    RootModel[Union[IdentityMatches, AddressMatches]]
):
    root: Union[IdentityMatches, AddressMatches]


class SubscriptionReactivationsGetResponse(RootModel[List[SubscriptionReactivation]]):
    root: List[SubscriptionReactivation]


class SubscriptionsGetResponse(RootModel[List[Subscription]]):
    root: List[Subscription]


class TagsGetResponse(RootModel[List[Tag]]):
    root: List[Tag]


class TagsTagCustomersDeleteRequest(BaseModel):
    customerIds: List[str] = Field(
        ..., description='The list of customer IDs.', max_length=1000, min_length=1
    )


class TagsTagCustomersPostRequest(BaseModel):
    customerIds: List[str] = Field(
        ..., description='The list of customer IDs.', max_length=1000, min_length=1
    )


class TransactionsIdPatchRequest(BaseModel):
    customFields: Optional[ResourceCustomFields] = None


class A1Gateway3dsServers(BaseModel):
    name: ThreeDSecureServerName


class AML(BaseModel):
    field_links: Optional[List[SelfLink]] = Field(
        None,
        alias='_links',
        description='The links related to resource, including links provided by the list.',
        min_length=1,
    )
    address: Optional[List[Addres]] = Field(
        None, description='Addresses related to the identity.'
    )
    aliases: Optional[List[Alias]] = Field(None, description='List of aliases, if any.')
    comments: Optional[str] = Field(
        None, description='Extra information (the content varies per list).'
    )
    confidence: Optional[Confidence] = Field(
        None, description="The source list's confidence in information."
    )
    dob: Optional[List[date_aliased]] = Field(
        None, description='One or more possible dates of birth.'
    )
    firstName: Optional[str] = Field(
        None, description='First Name.', examples=['Benjamin']
    )
    gender: Optional[str] = Field(
        None, description='Gender of returned identity (if `type` is `individual`).'
    )
    lastName: Optional[str] = Field(
        None,
        description='Last Name. `null` if it is a single-name entity.',
        examples=['Franklin'],
    )
    legalBasis: Optional[List[str]] = Field(
        None, description='List of references to legal documents if they exist.'
    )
    nationality: Optional[str] = Field(
        None, description='The nationality of the identity.'
    )
    passport: Optional[List[PassportItem]] = Field(
        None, description='Passport information.'
    )
    regime: Optional[str] = Field(
        None, description='Regime.', examples=['United States Government']
    )
    source: Optional[str] = Field(None, description='Which list this came from.')
    sourceType: Optional[SourceType] = Field(None, description='The list type.')
    title: Optional[List[str]] = Field(
        None,
        description='The title of their position.',
        examples=[
            [
                'Postmaster General',
                'Ambassador to France',
                'Ambassador to Sweden',
                'Supreme Executive Council of Commonwealth of Pennsylvania',
            ]
        ],
    )
    type: Optional[Type] = Field(None, description='The record type.')


class AlternativePaymentInstrument(BaseModel):
    method: PaymentMethod
    paymentInstrumentId: Optional[Any] = Field(
        None, description='The payment instrument ID.'
    )


class ApiKeyScope(BaseModel):
    customFieldName: Optional[List[constr(pattern=r'^[\w-]+$', max_length=60)]] = Field(
        None, description='The array of custom field names.'
    )
    organizationId: Optional[List[ResourceId]] = Field(
        None, description='The array of account identifier strings.'
    )
    planId: Optional[List[ResourceId]] = Field(
        None, description='The array of plan identifier strings.'
    )
    productId: Optional[List[ResourceId]] = Field(
        None, description='The array of product identifier strings.'
    )


class ApplePayValidation(DigitalWalletValidation):
    type: Optional[str] = None
    validationRequest: ValidationRequest = Field(
        ..., description='The validation request.'
    )
    validationResponse: Optional[Dict[str, Any]] = Field(
        None,
        description='The validation response to use by the Apple Pay SDK to proceed.',
    )


class ApprovalUrlLink(Link):
    rel: Rel = Field(..., description='The link type.')


class AttachmentResourceLink(Link):
    rel: Rel1 = Field(..., description='The link type.')


class AuthTransactionLink(Link):
    rel: Rel2 = Field(..., description='The link type.')


class AuthenticationToken(BaseModel):
    credentialId: Optional[ResourceId] = Field(None, description="The credential's ID.")
    mode: Optional[Mode] = Field('password', description="The token's generation mode.")
    otpRequired: Optional[bool] = Field(
        None, description='Should OTP be required to exchange this token.'
    )
    token: Optional[str] = Field(None, description='The token identifier string.')


class AuthenticationTokenMetadata(BaseModel):
    field_links: Optional[List[SelfLink]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    expiredTime: Optional[datetime_aliased] = Field(
        None, description="Token's expired time."
    )


class BBANInstrument(BankAccountInstrument):
    accountNumber: constr(pattern=r'^[0-9]+$') = Field(
        ..., description='Bank Account Number.'
    )
    accountType: AccountType = Field(..., description='Bank Account Type.')
    bankName: Optional[str] = Field(None, description='Bank name.')
    bic: Optional[str] = Field(None, description='Bank Identifier Code.')
    last4: Optional[str] = Field(
        None, description="Bank Account Number's last 4 digits."
    )
    routingNumber: constr(pattern=r'^[0-9]+$') = Field(
        ..., description='Bank Routing Number.'
    )


class BankAccountCreateToken(BaseModel):
    customFields: Optional[ResourceCustomFields] = None
    customerId: ResourceId = Field(..., description="The Customer's ID.")
    token: str = Field(..., description='BankAccountToken ID.')


class Blocklist(BaseModel):
    field_links: Optional[List[SelfLink]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='The blocklist created time.'
    )
    expirationTime: Optional[datetime_aliased] = Field(
        None, description='The blocklist expiration time.'
    )
    id: Optional[ResourceId] = Field(
        None, description='The blocklist identifier string.'
    )
    type: Type1 = Field(..., description='The blocklist type.')
    updatedTime: Optional[ServerTimestamp] = Field(
        None, description='The blocklist updated time.'
    )
    value: str = Field(..., description='The blocklist value.')


class Clearhaus3dsServers(BaseModel):
    name: ThreeDSecureServerName


class CommonKycDocument(BaseModel):
    field_links: Optional[List[SelfLink]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='Creation date/time.'
    )
    documentSubtype: Optional[KycDocumentSubtypes] = Field(
        None, description='Document subtype submitted for validation.'
    )
    documentType: KycDocumentTypes = Field(
        ...,
        description='Document type submitted for validation, only identity-proof type is analyzed in an automated manner.',
    )
    fileId: Optional[ResourceId] = Field(None, description='Linked file object id.')
    fileIds: Optional[List[ResourceId]] = Field(
        None, description="Linked file object id's."
    )
    id: Optional[ResourceId] = None
    processedTime: Optional[ServerTimestamp] = Field(
        None, description='Processing date/time.'
    )
    rejectionReason: Optional[KycDocumentRejection] = None
    requestId: Optional[ResourceId] = Field(
        None, description='KYC request identifier string.'
    )
    status: Status3 = Field(..., description='Status of the validation.')
    updatedTime: Optional[ServerTimestamp] = Field(
        None, description='Latest update date/time.'
    )


class Document(BaseModel):
    maxAttempts: Optional[conint(ge=0, le=100)] = Field(
        3,
        description='The number of document upload attempts. `0` treated as unlimited.',
    )
    subtypes: Optional[List[KycDocumentSubtypes]] = Field(
        None, description='Document subtype allowed for customer.'
    )
    type: KycDocumentTypes = Field(
        ..., description='Document type to be requested from customer.'
    )


class CommonKycRequest(BaseModel):
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='Creation date/time.'
    )
    documents: List[Document] = Field(
        ..., description='Documents to be requested from customer.'
    )
    expirationTime: Optional[datetime_aliased] = Field(
        None, description='Expiration date/time.'
    )
    id: Optional[ResourceId] = None
    redirectUrl: Optional[AnyUrl] = Field(
        None,
        description='The URL to redirect the customer when an upload is completed.',
    )
    updatedTime: Optional[ServerTimestamp] = Field(
        None, description='Latest update date/time.'
    )


class RecurringInterval(PlanPeriod):
    billingTiming: Optional[PlanBillingTiming] = 'prepaid'
    limit: Optional[int] = Field(
        None,
        description='The number of invoices this subscription order will generate\n(if 1, it will not generate any beyond the initial order creation).\nFor example, set this property to `12`, when the `periodUnit` is month and the\n`periodDuration` is 1, for a 1 year contract billed monthly.\n',
    )


class Trial(BaseModel):
    period: PlanPeriod
    price: float = Field(
        ..., description='The price of the trial. For a free trial, use `0`.'
    )


class CommonPlan(BaseModel):
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='Plan created time.'
    )
    currency: CurrencyCode
    currencySign: Optional[str] = Field(None, description='Currency sign.')
    customFields: Optional[ResourceCustomFields] = None
    id: Optional[ResourceId] = Field(None, description='The plan ID.')
    isTrialOnly: Optional[bool] = Field(
        None, description='Whether a plan has a trial without recurring instructions.'
    )
    name: str = Field(
        ..., description='The plan name, displayed on invoices and receipts.'
    )
    pricing: PlanPriceFormula
    productId: ResourceId = Field(..., description='The related product ID.')
    productOptions: Optional[Dict[str, str]] = Field(
        None,
        description='Name-value pairs to specify the product options.',
        examples=[{'color': 'red', 'size': 'xxl'}],
    )
    recurringInterval: Optional[RecurringInterval] = Field(
        None, description='The service interval. For a one-time item, use `null`.'
    )
    revision: Optional[int] = Field(
        None,
        description='Increments when the plan is modified. \nCompare to materialized subscription items revision.\n',
    )
    setup: Optional[Setup] = Field(
        None, description='The setup. Set `null` if no setup.'
    )
    trial: Optional[Trial] = Field(
        None, description='The trial. Set `null` if no trial.'
    )
    updatedTime: Optional[ServerTimestamp] = Field(
        None, description='Plan updated time.'
    )


class CommonProduct(BaseModel):
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='The product created time.'
    )
    customFields: Optional[ResourceCustomFields] = None
    description: Optional[constr(max_length=512)] = Field(
        None, description='The product description.'
    )
    id: Optional[ResourceId] = Field(
        None, description='The product ID.', examples=['membership']
    )
    name: constr(max_length=255) = Field(
        ..., description='The product name.', examples=['Premium membership']
    )
    options: Optional[List[str]] = Field(
        None,
        description='The product options such as color, size, etc. The product options definition does\nnot include option values. Those are defined within the plans.\n',
    )
    requiresShipping: Optional[bool] = Field(
        None,
        description='If the product requires shipping, shipping calculations will be applied.',
        examples=[False],
    )
    unitLabel: Optional[constr(max_length=50)] = Field(
        'unit',
        description='The unit label, such as per `seat` or per `unit`.',
        examples=['seat'],
    )
    updatedTime: Optional[ServerTimestamp] = Field(
        None, description='The product updated time.'
    )


class LineItemSubtotal(BaseModel):
    amount: Optional[float] = Field(None, examples=[49.95])
    currency: Optional[CurrencyCode] = None


class RecurringInterval1(BaseModel):
    periodAnchorInstruction: Optional[ServicePeriodAnchorInstruction] = None


class ContactObject(BaseModel):
    address: Optional[constr(pattern=r'^[\w\s\-\/\pL,.#;:()\']+$', max_length=60)] = (
        Field(
            None, description='The contact street address.', examples=['36 Craven St']
        )
    )
    address2: Optional[constr(pattern=r'^[\w\s\-\/\pL,.#;:()\']+$', max_length=60)] = (
        Field(None, description='The contact street address (second line).')
    )
    city: Optional[constr(pattern=r'^[\w\s\-\pL,.\']+$', max_length=45)] = Field(
        None, description='The contact city.', examples=['London']
    )
    country: Optional[constr(pattern=r'^[A-Z]{2}$', max_length=2)] = Field(
        None, description='The contact country ISO Alpha-2 code.', examples=['GB']
    )
    emails: Optional[ContactEmails] = None
    firstName: Optional[constr(pattern=r'^[\w\s\-\pL,.\']+$', max_length=45)] = Field(
        None, description='The contact first name.', examples=['Benjamin']
    )
    hash: Optional[constr(max_length=40)] = Field(
        None,
        description='A hash that can be used to compare multiple contacts for identical attribute values.',
        examples=['056ae6d97c788b9e98b049ebafd7b229bf852221'],
    )
    lastName: Optional[constr(pattern=r'^[\w\s\-\pL,.\']+$', max_length=45)] = Field(
        None, description='The contact last name.', examples=['Franklin']
    )
    organization: Optional[constr(pattern=r'^[\w\s\-\pL,.\']+$', max_length=255)] = (
        Field(
            None,
            description='The contact organization.',
            examples=[
                {'$ref': '#/components/schemas/ReadyToPayMethods/example/2/feature'}
            ],
        )
    )
    phoneNumbers: Optional[ContactPhoneNumbers] = None
    postalCode: Optional[constr(pattern=r'^[\w\s\-]+$', max_length=10)] = Field(
        None, description='The contact postal code.', examples=['WC2N 5NF']
    )
    region: Optional[constr(pattern=r'^[\w\s\-\/\pL,.#;:()\']+$', max_length=45)] = (
        Field(None, description='The contact region (state).', examples=['London'])
    )


class Coupon(BaseModel):
    field_links: Optional[List[SelfLink]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='Coupon created time.'
    )
    description: Optional[str] = Field(
        None,
        description='Your coupon description. When it is not empty this is used for invoice discount item description, otherwise the item\'s description uses coupon\'s ID like \'Coupon "COUPON-ID"\'.\n',
    )
    discount: Discount
    expiredTime: Optional[datetime_aliased] = Field(
        None, description="Coupon's expire time (end time)."
    )
    id: Optional[ResourceId] = Field(
        None, description="Coupon's ID a.k.a redemption code."
    )
    issuedTime: datetime_aliased = Field(
        ..., description="Coupon's issued time (start time)."
    )
    redemptionsCount: Optional[conint(ge=0)] = Field(
        None, description="Coupon's redemptions count."
    )
    restrictions: Optional[List[CouponRestriction]] = Field(
        None, description='Coupon restrictions.'
    )
    status: Optional[Status9] = Field(None, description='If coupon enabled.')
    updatedTime: Optional[ServerTimestamp] = Field(
        None, description='Coupon updated time.'
    )


class CouponRedemption(BaseModel):
    field_links: Optional[List[SelfLink]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    additionalRestrictions: Optional[List[RedemptionRestriction]] = Field(
        None, description="Additional restrictions for coupon's redemptions."
    )
    canceledTime: Optional[ServerTimestamp] = Field(
        None, description='Coupon redemption canceled time.'
    )
    couponId: Optional[ResourceId] = Field(None, description="Coupon's ID.")
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='Coupon redeem time.'
    )
    customerId: Optional[ResourceId] = Field(None, description="Customer's ID.")
    id: Optional[ResourceId] = None


class CustomField(BaseModel):
    field_links: Optional[List[SelfLink]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    additionalSchema: Optional[Any] = Field(
        None,
        description='Additional parameters which can be added according to type:\nParameter Name | Types         | Description\n-------------- | ------------- | -------------\nallowedValues  | string, array | List of allowed values maxLength      | string        | Maximum allowed length for the string, 255 by default, up to 4000\nThe additional schema adds additional constrains for values.\n',
    )
    description: Optional[str] = Field(
        None, description='The custom field description.'
    )
    name: Optional[str] = Field(None, description='The name of the custom field.')
    type: Type5 = Field(
        ...,
        description='Type value    | Description\n------------- | -------------\narray         | An array of strings up to 255 characters, maximum size is 1000 elements boolean       | true or false date          | String of format "full-date" (YYYY-MM-DD) from RFC-3339 (full-date) datetime      | String of format "date-time" (YYYY-MM-DDTHH:MM:SSZ) from RFC-3339 (date-time) integer       | Cardinal value of -2^31..2^31-1 number        | Float value. It can take cardinal values also which are interpreted as float string        | Regular string up to 255 characters monetary      | A map of 3-letters currency code and amount, e.g. {"currency": "EUR", "amount": 25.30}\nThe type cannot be changed.\n',
    )


class CustomerLink(Link):
    rel: Rel3 = Field(..., description='The link type.')


class CustomerTimelineCustomEvent(BaseModel):
    field_links: Optional[List[SelfLink]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='Customer Timeline Custom event created time.'
    )
    id: Optional[ResourceId] = Field(
        None, description='Customer Timeline Custom Event identifier string.'
    )
    name: constr(min_length=1, max_length=255) = Field(
        ...,
        description='Customer Timeline Custom Event type name. It must not be similar to any Rebilly system event.',
    )
    updatedTime: Optional[ServerTimestamp] = Field(
        None, description='Customer Timeline Custom event updated time.'
    )


class DataCash3dsServers(BaseModel):
    name: ThreeDSecureServerName


class DefaultPaymentInstrumentLink(Link):
    rel: Rel4 = Field(..., description='The link type.')


class PaymentInstrument1(BaseModel):
    amount: float = Field(..., description='Authorized for the digital wallet amount.')
    bin: Optional[str] = Field(
        None, description="Payment Card BIN (the PAN's first 6 digits)."
    )
    brand: Optional[PaymentCardBrand] = None
    currency: CurrencyCode = Field(
        ..., description='Authorized for the digital wallet currency.'
    )
    descriptor: str = Field(..., description='The descriptor for a payment.')
    expMonth: Optional[int] = Field(None, description='Payment Card expiration month.')
    expYear: Optional[int] = Field(None, description='Payment Card expiration year.')
    last4: Optional[str] = Field(None, description="Payment Card PAN's last 4 digits.")
    payload: Dict[str, Any] = Field(
        ...,
        description='The digital wallet encoded data. May contain the digital wallet billing address.',
    )
    type: Type8 = Field(..., description='The digital wallet type.')


class Settings7(BaseModel):
    banks: Optional[List[Directa24Banks]] = Field(
        None, description='List of banks which will be shown to customers.'
    )
    skipStep: Optional[bool] = Field(
        None, description='Skip step for user to enter their personal information.'
    )


class DisputeLink(Link):
    rel: Rel5 = Field(..., description='The link type.')


class DueTimeShiftInstruction(BaseModel):
    duration: conint(ge=1) = Field(..., description='The number of the units.')
    unit: Union[TimeUnit, TimePluralUnit]


class DynamicIpnLink(Link):
    rel: Rel6 = Field(..., description='The link type.')


class EMS3dsServers(BaseModel):
    name: ThreeDSecureServerName


class Error(Problem):
    error: Optional[str] = None


class FileDownloadLink(Link):
    rel: Rel7 = Field(..., description='The link type.')


class FileLink(Link):
    rel: Rel8 = Field(..., description='The link type.')


class FlexiblePlan(CommonPlan):
    id: ResourceId = Field(..., description='The Plan identifier.')
    name: str = Field(
        ..., description='The plan name, displayed on invoices and receipts.'
    )
    currency: CurrencyCode
    productId: ResourceId = Field(..., description='The related product ID.')
    pricing: PlanPriceFormula


class GET3dsServers(BaseModel):
    name: ThreeDSecureServerName


class GatewayAccount(BaseModel):
    field_links: Optional[
        List[Union[SelfLink, OnBoardingUrlLink, DynamicIpnLink, StaticIpnLink]]
    ] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    acceptedCurrencies: List[str] = Field(
        ...,
        description='Accepted currencies (array of the currency three letter codes).',
    )
    acquirerName: Optional[AcquirerName] = 'Other'
    additionalFilters: Optional[str] = Field(
        None,
        description="The additional filters are used to determine whether the gateway account can be selected for the transaction to be processed.\nFor example, the filter may put a maximum amount value. If the transaction is above that amount, this gateway account wouldn't be used.\nThis follows our standard filter format.\n",
        examples=['amount:1..100;bin:411111,444433'],
    )
    approvalWindowTtl: Optional[conint(ge=300, le=16777215)] = Field(
        3600,
        description='The time window (in seconds) allotted for approving an offsite transaction before it is automatically `abandoned`.',
    )
    cityField: Optional[str] = Field(
        None,
        description="The gateway account's city field (also known as line 2 descriptor).",
    )
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='Gateway Account created time.'
    )
    dccForceCurrency: Optional[str] = Field(
        None,
        description='Force dynamic currency conversion to the specified currency on each sale.\nLeave it empty to disable force DCC.\n',
    )
    dccMarkup: Optional[conint(ge=-10000, le=10000)] = Field(
        None, description='Dynamic currency conversion markup in basis points.'
    )
    descriptor: Optional[str] = Field(
        None, description="The gateway account's descriptor."
    )
    digitalWallets: Optional[DigitalWallets] = None
    dynamicDescriptor: Optional[bool] = Field(
        False, description='True, if Gateway Account allows dynamic descriptor.'
    )
    excludedDccQuoteCurrencies: Optional[List[str]] = Field(
        None, description='Excluded Dynamic Currency Conversion Quote Currencies.'
    )
    gatewayName: GatewayName
    id: Optional[ResourceId] = Field(None, description='The gateway identifier string.')
    isDown: Optional[bool] = Field(
        None, description='True if gateway is currently in downtime period.'
    )
    merchantCategoryCode: Optional[constr(pattern=r'^[0-9]{4}$')] = Field(
        '0000', description="The gateway account's merchant category code."
    )
    method: PaymentMethod
    monthlyLimit: Optional[confloat(ge=0.0)] = Field(None, description='Monthly Limit.')
    organizationId: Optional[ResourceId] = Field(None, description='Organization ID.')
    paymentCardSchemes: Optional[List[PaymentCardBrand]] = Field(
        None, description='Accepted payment card brands.'
    )
    reconciliationWindowEnabled: Optional[bool] = Field(
        False,
        description='If a transaction is not reconciled within the `reconciliationWindowTtl` time, then the transaction is marked as `abandoned`.',
    )
    reconciliationWindowTtl: Optional[conint(ge=300, le=16777215)] = Field(
        None,
        description='The time window (in seconds) allotted for a reconciliation to occur. If it is not reconciled in that time, then the transaction is marked as `abandoned`.',
    )
    status: Optional[Status11] = Field(
        None, description="The gateway account's status."
    )
    sticky: Optional[bool] = Field(
        True,
        description='Customer\'s payment instrument will "stick" to the gateway account for future transactions when enabled.',
    )
    threeDSecure: Optional[bool] = Field(
        False, description='True, if Gateway Account allows 3DSecure.'
    )
    timeout: Optional[conint(ge=10, le=120)] = Field(
        None, description='Gateway Account request timeout in seconds.'
    )
    token: Optional[str] = Field(
        None,
        description='Gateway Account token.',
        examples=['TwiX3f92k4AiBE27BzTbQ38hHjicBz_w'],
    )
    updatedTime: Optional[ServerTimestamp] = Field(
        None, description='Gateway Account updated time.'
    )


class GatewayAccountEmbed(BaseModel):
    gatewayAccount: Optional[GatewayAccount] = None


class GatewayAccountLimit(BaseModel):
    field_links: Optional[List[SelfLink]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    cap: int = Field(
        ...,
        description="The limit's value cap is the maximum desired value.\nIf type is money, the currency is the report currency.\nThe cap only applies to approved transactions of type `authorize` or `sale`.\n",
        examples=[1000],
    )
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='Gateway account limit created time.'
    )
    endTime: Optional[datetime_aliased] = Field(
        None,
        description="The limit's current period end time. At this time, the limit will reset.",
    )
    frequency: Optional[Frequency] = Field(
        None, description="The limit's period will reset according to the frequency."
    )
    id: Optional[ResourceId] = Field(
        None, description='The gateway account limit identifier.'
    )
    startTime: Optional[datetime_aliased] = Field(
        None, description="The limit's current period start time."
    )
    status: Optional[Status12] = Field(
        None, description='The gateway account limit status.'
    )
    type: Optional[Type12] = Field(
        None,
        description='The limit can be on `money` or `count` of transactions.\nIf `money` is chosen, the currency is the report currency.\n',
    )
    updatedTime: Optional[ServerTimestamp] = Field(
        None, description='Gateway account limit updated time.'
    )
    usage: Optional[int] = Field(
        None, description="The limit's actual usage during this period.", examples=[375]
    )


class GatewayAccountLimitLink(Link):
    rel: Rel9 = Field(..., description='The link type.')


class GatewayAccountLink(Link):
    rel: Rel10 = Field(..., description='The link type.')


class Gigadat(GatewayAccount):
    credentials: Credentials47 = Field(..., description='Gigadat credentials object.')
    settings: Optional[Settings11] = None


class GlobalOne(GatewayAccount):
    credentials: Credentials48


class Gooney(GatewayAccount):
    credentials: Credentials49 = Field(..., description='Gooney credentials object.')


class Gpaysafe(GatewayAccount):
    credentials: Credentials50


class Greenbox(GatewayAccount):
    credentials: Credentials51 = Field(..., description='Greenbox credentials object.')


class HiPay(GatewayAccount):
    credentials: Credentials52 = Field(..., description='HiPay credentials object.')


class IBANType(BaseModel):
    accountNumber: str = Field(
        ...,
        description="Bank's account number. Detailed information about all ISO 13616-compliant national IBAN formats is available in the [SWIFT IBAN Registry](https://www.swift.com/standards/data-standards/iban).\n",
    )
    accountNumberType: AccountNumberType3 = Field(
        ...,
        description="Bank's Account Number type. A valid value is basic bank account number (BBAN) or international bank account number (IBAN).\nThis is the object for the IBAN.",
    )
    bankName: Optional[str] = Field(None, description="Bank's name.")
    bic: Optional[str] = Field(None, description='Bank Identifier Code.')
    billingAddress: ContactObject = Field(..., description='The billing address.')
    customFields: Optional[ResourceCustomFields] = None
    customerId: ResourceId = Field(..., description="Customer's ID.")
    method: Method14 = Field(..., description='The method of payment instrument.')
    riskMetadata: Optional[RiskMetadata] = None


class ICEPAY(GatewayAccount):
    credentials: Credentials53 = Field(..., description='ICEPAY credentials object.')


class INOVAPAY(GatewayAccount):
    credentials: Credentials54 = Field(..., description='INOVAPAY credentials object.')


class Ilixium3dsServers(BaseModel):
    name: ThreeDSecureServerName


class Ingenico3dsServers(BaseModel):
    name: ThreeDSecureServerName


class InitialInvoiceLink(Link):
    rel: Rel11 = Field(..., description='The link type.')


class Inovio3dsServers(BaseModel):
    name: ThreeDSecureServerName


class InstaDebit(GatewayAccount):
    credentials: Credentials58 = Field(
        ..., description='InstaDebit credentials object.'
    )


class InstrumentReference(BaseModel):
    method: PaymentMethod
    paymentInstrumentId: Optional[ResourceId] = Field(
        None, description='The payment instrument ID.'
    )


class Intuit(GatewayAccount):
    credentials: Credentials59


class InvalidError(Error, ValidationErrorExtensions):
    pass


class Attempt(BaseModel):
    scheduleInstruction: InvoiceRetryScheduleInstruction


class RetryInstruction(BaseModel):
    afterAttemptPolicies: List[AfterAttemptPolicy] = Field(
        ..., description='The policy on the attempt finishes.'
    )
    afterRetryEndPolicies: List[AfterRetryEndPolicy] = Field(
        ..., description='The policy on the retry ends.'
    )
    attempts: List[Attempt] = Field(..., min_length=1)


class InvoiceDiscount(BaseModel):
    amount: Optional[float] = Field(
        None, description='Total amount that was discounted by this Coupon.'
    )
    couponId: Optional[ResourceId] = Field(None, description="Coupon's ID.")
    description: Optional[str] = Field(None, description='Discount description.')
    redemptionId: Optional[ResourceId] = Field(None, description='Redemption ID.')


class InvoiceLink(Link):
    rel: Rel12 = Field(..., description='The link type.')


class InvoiceTransactionAllocation(BaseModel):
    field_links: Optional[List[Union[InvoiceLink, TransactionLink]]] = Field(
        None,
        alias='_links',
        description='The links related to resource.',
        max_length=2,
        min_length=2,
    )
    amount: Optional[float] = None
    currency: Optional[CurrencyCode] = None
    invoiceId: Optional[ResourceId] = None
    transactionId: Optional[ResourceId] = None


class InvoicesLink(Link):
    rel: Rel13 = Field(..., description='The link type.')


class IpayOptions(GatewayAccount):
    credentials: Credentials60 = Field(
        ..., description='Ipay Options credentials object.'
    )
    settings: Settings14 = Field(..., description='Ipay Options settings object.')


class IssueTimeShiftInstruction(BaseModel):
    chronology: Chronology = Field(
        ...,
        description='The chronology of the billing time relatively to the service period start.',
    )
    duration: conint(ge=1) = Field(..., description='The number of the units.')
    unit: Union[TimeUnit, TimePluralUnit]


class JetPay(GatewayAccount):
    credentials: Credentials61


class Jeton(GatewayAccount):
    credentials: Credentials62
    settings: Optional[Settings15] = None


class Khelocard(GatewayAccount):
    credentials: Credentials63 = Field(..., description='Credentials object.')


class Konnektive(GatewayAccount):
    credentials: Credentials64 = Field(..., description='Credentials object.')
    settings: Settings16 = Field(..., description='Settings object.')


class KycDocument(CommonKycDocument):
    customerId: Optional[ResourceId] = Field(None, description="The сustomer's ID.")
    matchLevel: Optional[conint(ge=1, le=2)] = Field(
        None,
        description='The level of strictness for the document matches.',
        examples=[2],
    )
    notes: Optional[str] = Field(None, description='Reviewer notes.')
    reason: Optional[str] = Field(None, description='Reason for uploading.')
    reviewTime: Optional[ServerTimestamp] = Field(
        None, description='Date and time of manual review.'
    )
    reviewerId: Optional[ResourceId] = Field(None, description="Reviewer's user ID.")
    reviewerName: Optional[str] = Field(
        None, description="Reviewer's first and last name."
    )


class KycDocumentLink(Link):
    rel: Rel14 = Field(..., description='The link type.')


class KycDocumentsLink(Link):
    rel: Rel15 = Field(..., description='The link type.')


class KycGathererLink(Link):
    rel: Rel16 = Field(..., description='The link type.')


class KycRequest(CommonKycRequest):
    field_links: Optional[List[Union[SelfLink, KycDocumentsLink, KycGathererLink]]] = (
        Field(
            None,
            alias='_links',
            description='The links related to resource.',
            min_length=1,
        )
    )
    customerId: ResourceId = Field(..., description="The сustomer's ID.")
    matchLevel: Optional[conint(ge=1, le=2)] = Field(
        None,
        description='The level of strictness for the document matches.',
        examples=[2],
    )
    reason: Optional[str] = Field(None, description='Reason for uploading.')


class LPG(GatewayAccount):
    credentials: Credentials65 = Field(..., description='LPG credentials object.')


class LeadSourceData(BaseModel):
    field_links: Optional[List[Union[SelfLink, CustomerLink]]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    affiliate: Optional[str] = Field(
        None, description='Lead source affiliate (eg 123, Bob Smith).'
    )
    campaign: Optional[str] = Field(
        None, description='Lead source campaign (eg go-big-123).'
    )
    clickId: Optional[str] = Field(
        None, description='Lead source click id (may come from an ad server).'
    )
    content: Optional[str] = Field(
        None, description='Lead source content (eg smiley faces).'
    )
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='Lead source created time.'
    )
    medium: Optional[str] = Field(
        None, description='Lead source medium (eg search, display).'
    )
    path: Optional[str] = Field(
        None, description='Lead source path url (eg www.example.com/some/landing/path).'
    )
    referrer: Optional[str] = Field(
        None,
        description='Lead source [`referer` url](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referer) as determined (eg www.example.com/some/landing/path).',
    )
    salesAgent: Optional[str] = Field(
        None, description='Lead source sales agent (eg James Bond).'
    )
    source: Optional[str] = Field(
        None, description='Lead source origin (eg google, yahoo).'
    )
    subAffiliate: Optional[str] = Field(
        None,
        description='Lead source sub-affiliate also called a sub-id or click id in some circles (eg 123456).',
    )
    term: Optional[str] = Field(None, description='Lead source term (eg salt shakers).')


class LeadSourceLink(Link):
    rel: Rel17 = Field(..., description='The link type.')


class MiFinity(GatewayAccount):
    credentials: Credentials66 = Field(..., description='MiFinity credentials object.')


class Moneris(GatewayAccount):
    credentials: Credentials67


class Money(BaseModel):
    amount: MoneyAmount
    currency: CurrencyCode


class MtaPay(GatewayAccount):
    credentials: Credentials68
    settings: Settings17 = Field(..., description='MTA Pay settings object.')


class MuchBetter(GatewayAccount):
    credentials: Credentials69 = Field(
        ..., description='MuchBetter credentials object.'
    )
    settings: Optional[Settings18] = Field(
        None, description='MuchBetter settings object.'
    )


class MyFatoorah(GatewayAccount):
    credentials: Credentials70 = Field(
        ..., description='MyFatoorah credentials object.'
    )


class NGenius3dsServers(BaseModel):
    name: ThreeDSecureServerName


class NMI3dsServers(BaseModel):
    name: ThreeDSecureServerName


class Neosurf(GatewayAccount):
    credentials: Credentials73 = Field(..., description='Neosurf credentials object.')


class Netbanking(GatewayAccount):
    credentials: Credentials74 = Field(
        ..., description='Netbanking credentials object.'
    )


class Neteller(GatewayAccount):
    credentials: Credentials75 = Field(..., description='Neteller credentials object.')
    settings: Optional[Settings20] = None


class NinjaWallet(GatewayAccount):
    credentials: Credentials76 = Field(
        ..., description='NinjaWallet credentials object.'
    )


class NuaPay(GatewayAccount):
    credentials: Credentials77 = Field(..., description='NuaPay credentials object.')


class OchaPay(GatewayAccount):
    credentials: Credentials78


class OnRamp(GatewayAccount):
    credentials: Credentials79 = Field(..., description='OnRamp credentials object.')


class Onlineueberweisen(GatewayAccount):
    credentials: Credentials80 = Field(
        ..., description='Onlineueberweisen credentials object.'
    )
    settings: Settings21 = Field(..., description='Onlineueberweisen settings object.')


class Organization(BaseModel):
    field_links: Optional[List[SelfLink]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    address: Optional[constr(max_length=60)] = Field(
        None, description='The organization street address.'
    )
    address2: Optional[constr(max_length=60)] = Field(
        None, description='The organization street address.'
    )
    city: Optional[constr(max_length=45)] = Field(
        None, description='The organization city.'
    )
    country: constr(pattern=r'^[A-Z]{2}$') = Field(
        ..., description='The organization country ISO Alpha-2 code.'
    )
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='The organization created time.'
    )
    emails: Optional[ContactEmails] = None
    id: Optional[ResourceId] = Field(
        None, description='The organization identifier string.'
    )
    invoiceTimeZone: Optional[constr(max_length=50)] = Field(
        None,
        description='Invoice will use this time zone to display time otherwise UTC will be used. Example "America/New_York".',
    )
    isPrimary: Optional[bool] = Field(
        None,
        description='True, if Organization is primary (available to set as true only, other organizations will become as isPrimary=false).',
    )
    name: constr(max_length=60) = Field(..., description='The organization name.')
    phoneNumbers: Optional[ContactPhoneNumbers] = None
    postalCode: Optional[constr(max_length=10)] = Field(
        None, description='The organization postal code.'
    )
    questionnaire: Optional[OrganizationQuestionnaire] = None
    region: Optional[constr(max_length=45)] = Field(
        None, description='The organization region (state).'
    )
    taxDescriptor: Optional[constr(max_length=255)] = Field(
        None,
        description="The organization's tax label. This will be displayed on the invoice.",
    )
    updatedTime: Optional[ServerTimestamp] = Field(
        None, description='The organization updated time.'
    )


class OrganizationEmbed(BaseModel):
    organization: Optional[Organization] = None


class Pagsmile(GatewayAccount):
    credentials: Credentials81


class Panamerican3dsServers(BaseModel):
    name: ThreeDSecureServerName


class PandaGateway(GatewayAccount):
    credentials: Credentials83


class ParamountEft(GatewayAccount):
    credentials: Credentials84 = Field(..., description='Paramount credentials object.')


class ParamountInterac(GatewayAccount):
    credentials: Credentials85 = Field(
        ..., description='ParamountInterac credentials object.'
    )
    settings: Optional[Settings23] = None


class Pay4Fun(GatewayAccount):
    credentials: Credentials86 = Field(..., description='Pay4Fun credentials object.')


class PayCash(GatewayAccount):
    credentials: Credentials87 = Field(..., description='PayCash credentials object.')


class PayClub(GatewayAccount):
    credentials: Credentials88 = Field(..., description='PayClub credentials object.')
    settings: Optional[Settings24] = None


class PayPal(GatewayAccount):
    settings: Settings25 = Field(..., description='PayPal settings object.')


class PayTabs(GatewayAccount):
    credentials: Credentials89 = Field(..., description='PayTabs credentials object.')


class PayULatam(GatewayAccount):
    credentials: Credentials90 = Field(..., description='PayULatam credentials object.')


class Payeezy(GatewayAccount):
    credentials: Credentials91


class Payflow(GatewayAccount):
    credentials: Credentials92 = Field(..., description='Payflow credentials object.')


class PaymenTechnologies(GatewayAccount):
    credentials: Credentials93
    settings: Optional[Settings26] = None


class PaymentAsia(GatewayAccount):
    credentials: Credentials94 = Field(
        ..., description='PaymentAsia credentials object.'
    )


class PaymentCardCreatePlain(BaseModel):
    billingAddress: ContactObject = Field(..., description='The billing address.')
    customFields: Optional[ResourceCustomFields] = None
    customerId: ResourceId = Field(..., description="The Customer's ID.")
    cvv: Optional[str] = Field(
        None, description="Card's cvv (card verification value)."
    )
    expMonth: int = Field(..., description="Card's expiration month.")
    expYear: int = Field(..., description="Card's expiration year.")
    method: Method19 = Field(..., description='The method of payment instrument.')
    pan: str = Field(..., description='The card PAN (Primary Account Number).')
    riskMetadata: Optional[RiskMetadata] = None


class PaymentCardCreateToken(BaseModel):
    customFields: Optional[ResourceCustomFields] = None
    customerId: ResourceId = Field(..., description="The Customer's ID.")
    token: str = Field(..., description='PaymentCardToken ID.')


class PaymentCardUpdatePlain(BaseModel):
    billingAddress: Optional[ContactObject] = Field(
        None, description='The billing address.'
    )
    customFields: Optional[ResourceCustomFields] = None
    cvv: Optional[str] = Field(
        None, description="Card's cvv (card verification value)."
    )
    expMonth: Optional[int] = Field(None, description="Card's expiration month.")
    expYear: Optional[int] = Field(None, description="Card's expiration year.")
    stickyGatewayAccountId: Optional[ResourceId] = Field(
        None, description='Sticky gateway account ID.'
    )


class PaymentInstrument(
    RootModel[
        Union[
            VaultedInstrument,
            AlternativePaymentInstrument,
            CashInstrument,
            CheckInstrument,
        ]
    ]
):
    root: Union[
        VaultedInstrument, AlternativePaymentInstrument, CashInstrument, CheckInstrument
    ]


class PaymentInstrument3Model(BaseModel):
    paymentInstrumentId: ResourceId = Field(
        ..., description='The Payment Instrument identifier string.'
    )


class PaymentInstrumentCreateToken(BaseModel):
    customFields: Optional[ResourceCustomFields] = None
    customerId: ResourceId = Field(..., description="The customer's ID.")
    token: str = Field(..., description='Payment token ID.')


class PaymentInstrumentUpdateToken(BaseModel):
    billingAddress: Optional[ContactObject] = Field(
        None,
        description='The billing address (if supplied – overrides billing address from token).',
    )
    customFields: Optional[ResourceCustomFields] = None
    token: Optional[str] = Field(None, description='Payment token ID.')


class PaymentsOS(GatewayAccount):
    credentials: Credentials95


class Paymero(GatewayAccount):
    credentials: Credentials96 = Field(..., description='Paymero credentials object.')
    settings: Optional[Settings27] = Field(None, description='Paymero settings object.')


class Payr(GatewayAccount):
    credentials: Credentials97


class Paysafe3dsServers(BaseModel):
    name: ThreeDSecureServerName


class Paysafecash(GatewayAccount):
    credentials: Credentials99


class Payvision3dsServers(BaseModel):
    name: ThreeDSecureServerName


class Piastrix3dsServers(BaseModel):
    name: ThreeDSecureServerName


class PaymentInstrument4(BaseModel):
    accountId: str = Field(..., description='The Plaid account ID.')
    credentialHash: ResourceId = Field(..., description='The Plaid credentials hash.')
    publicToken: str = Field(..., description='The Plaid public token.')


class Plugnpay(GatewayAccount):
    credentials: Credentials102


class PostFinance(GatewayAccount):
    credentials: Credentials103 = Field(
        ..., description='PostFinance credentials object.'
    )


class PriceBasedShippingRate(BaseModel):
    field_links: Optional[List[SelfLink]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    currency: CurrencyCode
    maxOrderSubtotal: Optional[float] = Field(
        None,
        description='Maximum order subtotal for which this shipping rate is applicable (NULL if no maximum).',
    )
    minOrderSubtotal: Optional[float] = Field(
        0,
        description='Minimum order subtotal for which this shipping rate is applicable, defaults to 0.00.',
    )
    name: constr(max_length=255) = Field(..., description='The shipping rate name.')
    price: float = Field(
        ..., description='The shipping price - 0 is a valid value (for free).'
    )


class Product(CommonProduct):
    field_links: Optional[List[SelfLink]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    accountingCode: Optional[str] = Field(
        None, description='The product accounting code.', examples=['4010']
    )
    taxCategoryId: Optional[TaxCategoryId] = Field(
        None, description="The product's tax category identifier string."
    )


class ProductEmbed(BaseModel):
    product: Optional[Product] = None


class ProofOfAddress(KycDocument):
    field_links: Optional[List[Union[SelfLink, FileLink, CustomerLink]]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=3
    )
    documentMatches: Optional[DocumentMatches] = None
    parsedData: Optional[ParsedData] = None
    documentType: Literal['address-proof']


class ProofOfFunds(KycDocument):
    documentType: Literal['funds-proof']


class ProofOfIdentity(KycDocument):
    field_links: Optional[List[Union[SelfLink, FileLink, CustomerLink]]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=3
    )
    documentMatches: Optional[DocumentMatches1] = None
    parsedData: Optional[ParsedData1] = None
    documentType: Literal['identity-proof']


class ProofOfPurchase(KycDocument):
    documentType: Literal['purchase-proof']


class Prosa(GatewayAccount):
    credentials: Credentials104 = Field(..., description='Prosa credentials object.')


class PurchaseBumpOffer(BaseModel):
    bumpAmount: MoneyAmount = Field(..., description='Bump amount.')
    bumpAmountInUsd: Optional[MoneyAmount] = Field(
        None, description='Bump amount in USD.'
    )
    customFields: Optional[ResourceCustomFields] = None
    offerId: str = Field(..., description='Offer ID.')
    offerType: str = Field(..., description='Offer Type.', examples=['bonus'])


class PurchaseBumpOfferList(RootModel[List[PurchaseBumpOffer]]):
    root: List[PurchaseBumpOffer] = Field(..., min_length=1)


class RPN(GatewayAccount):
    credentials: Credentials105


class Rapyd(GatewayAccount):
    credentials: Credentials106 = Field(..., description='Rapyd credentials object.')


class ReadyToPay1(ReadyToPayAmount):
    billingAddress: Optional[ContactObject] = Field(
        None, description='The billing address.'
    )
    riskMetadata: RiskMetadata
    websiteId: ResourceId = Field(..., description='The website identifier string.')


class Item1(BaseModel):
    planId: ResourceId = Field(..., description='The plan identifier string.')
    quantity: int = Field(
        ..., description='Number of units of the product on the given plan.'
    )


class ReadyToPayItems(BaseModel):
    items: List[Item1] = Field(..., min_length=1)


class ReadyToPayMethods(
    RootModel[
        List[
            Union[
                ReadyToPayPaymentCardMethod,
                ReadyToPayAchMethod,
                ReadyToPayGenericMethod,
            ]
        ]
    ]
):
    root: List[
        Union[ReadyToPayPaymentCardMethod, ReadyToPayAchMethod, ReadyToPayGenericMethod]
    ] = Field(
        ...,
        examples=[
            [
                {
                    'brands': ['Visa', 'MasterCard'],
                    'feature': {'name': 'Google Pay'},
                    'filters': ['brand:Visa,MasterCard;bin:!411111'],
                    'method': 'payment-card',
                },
                {
                    'feature': {
                        'expirationTime': '2006-01-02T15:04:05Z',
                        'linkToken': 'some-random-link_token-for-plaid',
                        'name': 'Plaid',
                    },
                    'method': 'ach',
                },
                {
                    'brands': ['Visa'],
                    'feature': None,
                    'filters': ['brand:Visa;bin:411111,444433'],
                    'method': 'payment-card',
                },
                {
                    'feature': {
                        '$ref': '#/components/schemas/ReadyToPayMethods/example/2/feature'
                    },
                    'filters': [],
                    'method': 'ach',
                },
                {'filters': [], 'method': 'paypal'},
                {'filters': [], 'method': 'Skrill'},
            ]
        ],
    )


class Realex(GatewayAccount):
    credentials: Credentials107


class Realtime(GatewayAccount):
    credentials: Credentials108


class Redsys(GatewayAccount):
    credentials: Credentials109


class ResetPasswordToken(BaseModel):
    field_links: Optional[List[SelfLink]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    credentialId: Optional[str] = Field(None, description="Token's credential ID.")
    expiredTime: Optional[datetime_aliased] = Field(
        None, description='Password expired time.'
    )
    token: Optional[str] = Field(None, description="The token's identifier string.")
    username: str = Field(..., description="The token's username.")


class Rotessa(GatewayAccount):
    credentials: Credentials110 = Field(..., description='Rotessa credentials object.')
    settings: Settings30 = Field(..., description='Rotessa settings object.')


class SMSVoucher(GatewayAccount):
    credentials: Credentials111


class Sagepay(GatewayAccount):
    credentials: Credentials112


class SaltarPay(GatewayAccount):
    credentials: Credentials113 = Field(
        ..., description='SaltarPay credentials object.'
    )


class SeamlessChex(GatewayAccount):
    credentials: Credentials114 = Field(
        ..., description='SeamlessChex credentials object.'
    )


class SecureTrading3dsServers(BaseModel):
    name: ThreeDSecureServerName


class SecurionPay3dsServers(BaseModel):
    name: ThreeDSecureServerName


class ShippingZone(BaseModel):
    field_links: Optional[List[SelfLink]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    countries: Optional[List[constr(pattern=r'^[A-Z]{2}$')]] = Field(
        None,
        description='Countries covered by the shipping zone. A country can only belong to one shipping zone (no overlapping).\nThis property can be empty or null to create a default shipping zone for countries that were not specified in other zones.\n',
    )
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='The shipping zone created time.'
    )
    id: Optional[ResourceId] = Field(
        None, description='The shipping zone identifier string.'
    )
    isDefault: Optional[Any] = Field(None, description='Is this Shipping Zone default.')
    name: constr(max_length=255) = Field(..., description='The shipping zone name.')
    rates: Optional[List[PriceBasedShippingRate]] = Field(
        None, description='Price-based shipping rate instructions.'
    )
    updatedTime: Optional[ServerTimestamp] = Field(
        None, description='The shipping zone updated time.'
    )


class Skrill(GatewayAccount):
    credentials: Credentials117 = Field(..., description='Skrill credentials object.')


class SmartInvoice3dsServers(BaseModel):
    name: ThreeDSecureServerName


class Sofort(GatewayAccount):
    credentials: Credentials119 = Field(..., description='Sofort credentials object.')


class SparkPay(GatewayAccount):
    credentials: Credentials120 = Field(..., description='SparkPay credentials object.')


StaticGateway = GatewayAccount


class Stripe3dsServers(BaseModel):
    name: Optional[ThreeDSecureServerName] = None


class SubscriptionCancellation(BaseModel):
    field_links: Optional[List[SelfLink]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    appliedInvoiceId: Optional[ResourceId] = Field(
        None,
        description='The identifier of the invoice where the cancellation fees or credits are applied.',
    )
    canceledBy: Optional[CanceledBy] = Field(
        'customer', description='Who did the cancellation.'
    )
    canceledTime: Optional[datetime_aliased] = Field(
        None,
        description='The cancellation time (when the status is confirmed which is by default unless specified "draft").',
    )
    churnTime: datetime_aliased = Field(
        ..., description='The time when the subscription will be deactivated.'
    )
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='The time of resource creation (when it is posted).'
    )
    description: Optional[constr(max_length=255)] = Field(
        None, description='Cancel reason description in free form.'
    )
    id: Optional[ResourceId] = Field(None, description='Cancellation identifier.')
    lineItemSubtotal: Optional[float] = Field(
        None,
        description="Subtotal of the line items which will be added after the subscription's cancellation.",
        examples=[49.95],
    )
    lineItems: Optional[UpcomingInvoiceItemCollection] = Field(
        None,
        description='Items to be added to the new invoice. Proration item is generated and added automatically.',
    )
    prorated: Optional[bool] = Field(
        False,
        description="Defines if the customer gets a pro-rata credit for the time remaining between `churnTime` and\nsubscription's next renewal time.\n",
    )
    proratedInvoiceId: Optional[ResourceId] = Field(
        None,
        description='Identifier of the invoice on which the cancellation proration is calculated.',
    )
    reason: Optional[Reason] = Field('other', description='Cancellation reason.')
    status: Optional[Status14] = Field(
        'confirmed',
        description='"draft" defines that the cancellation isn\'t applied on an invoice and subscription but\ncan be inspected to see the charge.\n"confirmed" will set a subscription to be canceled when the `churnTime` is reached.\n"completed" is a read-only status which is set by the system when the churnTime is reached.\nThe cancellation may not be changed or deleted when the status is "completed".\n',
    )
    subscriptionId: ResourceId = Field(
        ..., description='Identifier of the canceled subscription order.'
    )


class Item2(BaseModel):
    plan: FlexiblePlan
    quantity: int = Field(
        ..., description='Number of units of the product on the given plan.'
    )


class SubscriptionChange(BaseModel):
    effectiveTime: Optional[datetime_aliased] = Field(
        None,
        description='The date from which the renewal time (for `reset` operations) and proration calculations are made.  If omitted, it will default to the current time.',
    )
    items: List[Item2] = Field(..., min_length=1)
    keepTrial: Optional[bool] = Field(
        False,
        description="If set to true and the subscription order has an active trial, it will use that trial further. Works with 'retain' renewalPolicy only.",
    )
    preview: Optional[bool] = Field(
        False,
        description='If set to true, it will not change the subscription.  It allows for a way to preview the changes that would be made to a subscription.',
    )
    prorated: bool = Field(
        ...,
        description='Whether or not to give a pro rata credit for the amount of time remaining between the `effectiveTime` and the end of the current period.\nIn addition, if the `renewalTime` is retained (by setting the `renewalPolicy` to `retain`), then a pro rata debit will occur as well,\nfor the amount between the `effectiveTime` and the `renewalTime` as a percentage of the normal period size.\n',
    )
    renewalPolicy: RenewalPolicy = Field(
        ...,
        description='The value determines whether the subscription retains its current `renewalTime` or resets it to a newly calculated `renewalTime`.',
    )


class TWINT(GatewayAccount):
    credentials: Credentials121 = Field(..., description='TWINT credentials object.')
    settings: Settings32 = Field(..., description='TWINT settings object.')


class TestProcessor3dsServers(BaseModel):
    name: ThreeDSecureServerName


class ThreeDSecureIO3dsServer(
    WorldlineAtosFrankfurt3dsServers, TestProcessor3dsServers, EMS3dsServers
):
    merchantAcquirerBinMastercard: constr(min_length=6, max_length=11) = Field(
        ..., description='Mastercard Acquirer BIN.'
    )
    merchantAcquirerBinVisa: constr(min_length=6, max_length=11) = Field(
        ..., description='Visa Acquirer BIN.'
    )
    merchantCountry: constr(max_length=2) = Field(
        ..., description='Merchant Country ISO Alpha-2 Code.', examples=['US']
    )
    merchantId: constr(max_length=35) = Field(..., description='Merchant Id.')
    merchantName: constr(max_length=40) = Field(..., description='Merchant Name.')
    merchantUrl: constr(max_length=2048) = Field(..., description='Merchant URL.')
    transactionType: Optional[TransactionType] = Field(
        None,
        description='01 - Goods/Service Purchase\n03 - Check Acceptance\n10 - Account Funding\n11 - Quasi-Cash Transaction\n28 - Prepaid Activation and Load\n\nIdentifies the type of transaction being authenticated.\n',
    )
    v1: Optional[bool] = Field(
        None,
        description='Value determines if requests can use version 1 of 3DS.\nIn case both v1 and v2 are enabled it will prefer v2.\nIf v2 is not supported for the issuer, it will coalesce to v1.\n',
    )
    v2: Optional[bool] = Field(
        None,
        description='Value determines if requests will attempt version 2 of 3DS.\nIn case both v1 and v2 are enabled it will prefer v2.\nIf v2 is not supported for the issuer, it will coalesce to v1.\n',
    )


class TimelineExtraData(BaseModel):
    actions: Optional[List[TimelineAction]] = Field(
        None,
        description='Actions available to a Timeline message. Can be empty in case no actions are available for a message.',
        min_length=0,
    )
    author: Optional[Author] = Field(None, description='Timeline comment author data.')
    links: Optional[List[Link1]] = None
    mentions: Optional[Dict[str, str]] = None
    tables: Optional[List[TimelineTable]] = Field(None, min_length=0)


class ToditoCash(GatewayAccount):
    credentials: Credentials122 = Field(
        ..., description='ToditoCash credentials object.'
    )


class BumpOffer(BaseModel):
    language: Optional[LanguageIsoCode] = Field(
        None,
        description='The language of the bump offer that was displayed to user (useful for finding any translation problems).',
    )
    order: Optional[Money] = Field(None, description='Initial amount and currency.')
    outcome: Optional[PurchaseBumpStatus] = None
    presentedOffers: Optional[PurchaseBumpOfferList] = Field(
        None, description='Offers presented to a customer.'
    )
    selectedOffer: Optional[PurchaseBumpOffer] = Field(
        None,
        description='Offer selected by a customer. Null if bump offer outcome is not `selected`.',
    )
    version: Optional[PurchaseBumpSplitVersionName] = Field(
        None,
        description='The name of the version that was picked (useful for measuring split tests).',
    )


class Dcc(BaseModel):
    base: Optional[Money] = Field(
        None, description='Initial amount and currency to convert from.'
    )
    outcome: Optional[Outcome] = Field(
        None, description='Dynamic Currency Conversion outcome.'
    )
    quote: Optional[Money] = Field(
        None, description='Suggested amount and currency to convert to.'
    )
    usdMarkup: Optional[MoneyAmount] = Field(
        None, description='The amount of markup translated to USD.'
    )


class TransactionTimeline(BaseModel):
    field_links: Optional[List[SelfLink]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    extraData: Optional[TimelineExtraData] = None
    id: Optional[ResourceId] = Field(
        None, description='The Timeline message identifier string.'
    )
    message: Optional[str] = Field(
        None, description='The message that describes the message details.'
    )
    occurredTime: Optional[ServerTimestamp] = Field(
        None, description='Timeline message time.'
    )
    triggeredBy: Optional[TriggeredBy] = Field(
        None, description='Shows who or what triggered the Timeline message.'
    )
    type: Optional[Type21] = Field(None, description='Timeline message type.')


class TrustPay(GatewayAccount):
    credentials: Credentials123 = Field(..., description='TrustPay credentials object.')


class Trustly(GatewayAccount):
    credentials: Credentials124 = Field(..., description='Trustly credentials object.')


class TrustsPay(GatewayAccount):
    credentials: Credentials125 = Field(
        ..., description='TrustsPay credentials object.'
    )


class UPayCard(GatewayAccount):
    credentials: Credentials126
    settings: Optional[Settings33] = Field(
        None, description='UpayCard settings object.'
    )


class USAePay(GatewayAccount):
    credentials: Credentials127


class VCreditos(GatewayAccount):
    credentials: Credentials128 = Field(
        ..., description='VCreditos credentials object.'
    )


class VantivLitle(GatewayAccount):
    credentials: Credentials129
    threeDSecureServer: Optional[VantivLitle3dsServers] = None


class Wallet88(GatewayAccount):
    credentials: Credentials130 = Field(..., description='Wallet88 credentials object.')


class Walpay(GatewayAccount):
    credentials: Credentials131
    threeDSecureServer: Optional[Walpay3dsServers] = None


class Wirecard(GatewayAccount):
    credentials: Credentials132
    threeDSecureServer: Optional[Wirecard3dsServers] = None


Wirecard3dsServer = Wirecard3dsServers


class WorldlineAtosFrankfurt(GatewayAccount):
    credentials: Credentials133 = Field(
        ..., description='WorldlineAtosFrankfurt credentials.'
    )
    settings: Settings34 = Field(..., description='WorldlineAtosFrankfurt settings.')
    threeDSecureServer: Optional[WorldlineAtosFrankfurt3dsServers] = None


class Worldpay(GatewayAccount):
    credentials: Credentials134
    settings: Optional[Settings35] = None
    threeDSecureServer: Optional[Worldpay3dsServers] = None


class XPay(GatewayAccount):
    credentials: Credentials135 = Field(..., description='XPay credentials object.')


class Zimpler(GatewayAccount):
    credentials: Credentials136 = Field(..., description='Zimpler credentials object.')


class Zotapay(GatewayAccount):
    credentials: Credentials137


class DLocal(GatewayAccount):
    credentials: Credentials138
    settings: Optional[Settings36] = Field(None, description='dLocal settings object.')


class EMerchantPay(GatewayAccount):
    credentials: Credentials139
    settings: Optional[Settings37] = Field(
        None, description='eMerchantPay settings object.'
    )
    threeDSecureServer: Optional[EMerchantPay3dsServers] = None


EMerchantPay3dsServer = EMerchantPay3dsServers


class EZeeWallet(GatewayAccount):
    credentials: Credentials140 = Field(
        ..., description='eZeeWallet credentials object.'
    )


class EcoPayz(GatewayAccount):
    credentials: Credentials141 = Field(..., description='ecoPayz credentials object.')
    settings: Optional[Settings38] = Field(None, description='ecoPayz settings object.')


class EzyEFT(GatewayAccount):
    credentials: Credentials142 = Field(..., description='ezyEFT credentials object.')


class ICanPay(GatewayAccount):
    credentials: Credentials143
    settings: Optional[Settings39] = None


class ICheque(GatewayAccount):
    credentials: Credentials144


class IDebit(GatewayAccount):
    credentials: Credentials145 = Field(..., description='iDebit credentials object.')


class Loonie(GatewayAccount):
    credentials: Credentials146 = Field(..., description='loonie credentials object.')


class Password(AuthenticationToken, AuthenticationTokenMetadata):
    customerId: Optional[ResourceId] = Field(
        None, description="The token's customer ID."
    )
    password: SecretStr = Field(..., description="The token's password.")
    username: str = Field(..., description="The token's username.")


class Passwordless(AuthenticationToken, AuthenticationTokenMetadata):
    customerId: ResourceId = Field(..., description="The token's customer ID.")


class VegaaH(GatewayAccount):
    credentials: Credentials147


class AmlGetResponse(RootModel[List[AML]]):
    root: List[AML]


class AuthenticationTokensGetResponse(RootModel[List[AuthenticationToken]]):
    root: List[AuthenticationToken]


class BlocklistsGetResponse(RootModel[List[Blocklist]]):
    root: List[Blocklist]


class CouponsGetResponse(RootModel[List[Coupon]]):
    root: List[Coupon]


class CouponsRedemptionsGetResponse(RootModel[List[CouponRedemption]]):
    root: List[CouponRedemption]


class CustomFieldsResourceGetResponse(RootModel[List[CustomField]]):
    root: List[CustomField] = Field(..., description='The list of custom fields.')


class CustomerTimelineCustomEventsGetResponse(
    RootModel[List[CustomerTimelineCustomEvent]]
):
    root: List[CustomerTimelineCustomEvent]


class InvoicesIdTransactionAllocationsGetResponse(
    RootModel[List[InvoiceTransactionAllocation]]
):
    root: List[InvoiceTransactionAllocation]


class KycRequestsGetResponse(RootModel[List[KycRequest]]):
    root: List[KycRequest]


class PasswordTokensGetResponse(RootModel[List[ResetPasswordToken]]):
    root: List[ResetPasswordToken]


class PaymentCardsPostRequest(
    RootModel[Union[PaymentCardCreateToken, PaymentCardCreatePlain]]
):
    root: Union[PaymentCardCreateToken, PaymentCardCreatePlain]


class PaymentCardsIdPutRequest(
    RootModel[Union[PaymentCardCreateToken, PaymentCardCreatePlain]]
):
    root: Union[PaymentCardCreateToken, PaymentCardCreatePlain]


class ProductsGetResponse(RootModel[List[Product]]):
    root: List[Product]


class ShippingZonesGetResponse(RootModel[List[ShippingZone]]):
    root: List[ShippingZone]


class SubscriptionCancellationsGetResponse(RootModel[List[SubscriptionCancellation]]):
    root: List[SubscriptionCancellation]


class TransactionsIdTimelineGetResponse(RootModel[List[TransactionTimeline]]):
    root: List[TransactionTimeline]


class A1Gateway(GatewayAccount):
    credentials: Credentials = Field(..., description='A1Gateway credentials object.')
    threeDSecureServer: Optional[A1Gateway3dsServers] = None


class AclItem(BaseModel):
    permissions: AclPermissions = Field(
        ...,
        description='Specify individual permission here if creating a restricted API key. Use wildcard `*` for full access.',
    )
    scope: ApiKeyScope = Field(..., description='Api Key scope.')


class Acl(RootModel[List[AclItem]]):
    root: List[AclItem]


class Adyen(GatewayAccount):
    credentials: Credentials1 = Field(..., description='Adyen credentials object.')
    settings: Settings = Field(..., description='Adyen settings object.')


class Airpay(GatewayAccount):
    credentials: Credentials2 = Field(..., description='Airpay credentials object.')


class AmexVPC(GatewayAccount):
    credentials: Credentials3 = Field(..., description='AmexVPC credentials object.')
    settings: Settings1 = Field(..., description='AmexVPC settings object.')


class ApcoPay(GatewayAccount):
    credentials: Credentials4 = Field(..., description='ApcoPay credentials object.')
    settings: Optional[Settings2] = None


class AsiaPaymentGateway(GatewayAccount):
    credentials: Credentials5 = Field(
        ..., description='AsiaPaymentGateway credentials object.'
    )


class AstroPayCard(GatewayAccount):
    credentials: Credentials6 = Field(
        ..., description='AstroPay Card credentials object.'
    )
    settings: Optional[Settings3] = Field(
        None, description='AstroPay Card settings object.'
    )


class AuthorizeNet(GatewayAccount):
    credentials: Credentials7


class BBANType(BaseModel):
    accountNumber: constr(pattern=r'^[0-9]+$') = Field(
        ..., description="Bank's account number."
    )
    accountNumberType: AccountNumberType = Field(
        ...,
        description="Bank's Account Number type. A valid value is basic bank account number (BBAN) or international bank account number (IBAN).\nThis is the object for the BBAN.",
    )
    accountType: AccountType = Field(..., description="Bank's account type.")
    bankName: Optional[str] = Field(None, description="Bank's name.")
    bic: Optional[str] = Field(None, description='Bank Identifier Code.')
    billingAddress: ContactObject = Field(..., description='The billing address.')
    customFields: Optional[ResourceCustomFields] = None
    customerId: ResourceId = Field(..., description="Customer's ID.")
    method: Method4 = Field(..., description='The method of payment instrument.')
    riskMetadata: Optional[RiskMetadata] = None
    routingNumber: constr(pattern=r'^[0-9]+$') = Field(
        ..., description="Bank's routing number."
    )


class Bambora(GatewayAccount):
    credentials: Credentials8


class BankAccountCreatePlain(RootModel[Union[BBANType, IBANType]]):
    root: Union[BBANType, IBANType]


class BankAccountUpdatePlain(BaseModel):
    accountType: Optional[AccountType] = Field(None, description="Bank's account type.")
    bankName: Optional[str] = Field(None, description="Bank's name.")
    billingAddress: Optional[ContactObject] = Field(
        None, description='The billing address.'
    )
    customFields: Optional[ResourceCustomFields] = None


class BitPay(GatewayAccount):
    credentials: Credentials9 = Field(..., description='BitPay credentials object.')


class BlueSnap(GatewayAccount):
    credentials: Credentials10 = Field(..., description='BlueSnap credentials object.')


class BraintreePayments(GatewayAccount):
    credentials: Credentials11


class CASHlib(GatewayAccount):
    credentials: Credentials12 = Field(..., description='CASHlib credentials object.')


class CCAvenue(GatewayAccount):
    credentials: Credentials13 = Field(..., description='CCAvenue credentials object.')


class CODVoucher(GatewayAccount):
    credentials: Credentials14 = Field(
        ..., description='COD Voucher credentials object.'
    )


class CardinalCommerce3dsServer(Payvision3dsServers):
    merchantId: str = Field(..., description='Cardinal MerchantId.')
    processorId: str = Field(..., description='Cardinal ProcessorId.')
    transactionPwd: SecretStr = Field(..., description='Cardinal TransactionPwd.')


class Cardknox(GatewayAccount):
    credentials: Credentials15


class CashToCode(GatewayAccount):
    credentials: Credentials16 = Field(
        ..., description='CashToCode credentials object.'
    )
    settings: Optional[Settings4] = None


class Cashflows(GatewayAccount):
    credentials: Credentials17


class CauriPayment(GatewayAccount):
    credentials: Credentials18 = Field(
        ..., description='CauriPayment credentials object.'
    )


class Cayan(GatewayAccount):
    credentials: Credentials19


class Chase(GatewayAccount):
    credentials: Credentials20


class Circle(GatewayAccount):
    credentials: Credentials21 = Field(..., description='Circle credentials object.')


class Citadel(GatewayAccount):
    credentials: Credentials22 = Field(..., description='Citadel credentials object.')


class Clearhaus(GatewayAccount):
    credentials: Credentials23
    threeDSecureServer: Optional[Clearhaus3dsServers] = None


class Clearhaus3dsServer(Clearhaus3dsServers):
    acquirerBin: str = Field(
        ..., description='Acquiring institution identification code.'
    )
    apiKey: SecretStr = Field(..., description='3DS Server Api key.')
    merchantId: str = Field(
        ...,
        description='Merchant account ID or Card Acceptor ID provided by the acquiring bank.',
    )


class CoinPayments(GatewayAccount):
    credentials: Credentials24 = Field(
        ..., description='CoinPayments credentials object.'
    )


class CommonBankAccount(BaseModel):
    accountNumberType: Optional[AccountNumberType2] = Field(
        'BBAN',
        description="Bank's account number type. A valid value is basic bank account number (BBAN) or international bank account number (IBAN).",
    )
    accountType: Optional[AccountType] = Field(None, description="Bank's account type.")
    bankName: Optional[str] = Field(None, description="Bank's name.")
    bic: Optional[str] = Field(None, description='Bank Identifier Code.')
    billingAddress: Optional[ContactObject] = Field(
        None, description='The billing address.'
    )
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='Bank account created time.'
    )
    customFields: Optional[ResourceCustomFields] = None
    customerId: Optional[ResourceId] = Field(None, description="The customer's ID.")
    fingerprint: Optional[str] = Field(
        None,
        description='A unique value to identify the bank account. It contains alphanumeric values.',
    )
    id: Optional[ResourceId] = Field(None, description='The payment instrument ID.')
    last4: Optional[str] = Field(
        None, description='The last 4 digits of the bank account.'
    )
    method: Optional[Method8] = Field(
        None, description='The method of payment instrument.'
    )
    riskMetadata: Optional[RiskMetadata] = None
    routingNumber: Optional[str] = Field(None, description="Bank's routing number.")
    status: Optional[Status] = Field(None, description='Bank account status.')
    updatedTime: Optional[ServerTimestamp] = Field(
        None, description='Bank account updated time.'
    )


class CommonPayPalAccount(BaseModel):
    billingAddress: ContactObject = Field(..., description='The billing address.')
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='PayPal account created time.'
    )
    customFields: Optional[ResourceCustomFields] = None
    customerId: ResourceId = Field(..., description="The customer's ID.")
    id: Optional[ResourceId] = Field(None, description='The payment instrument ID.')
    method: Method9 = Field(..., description='The method of payment instrument.')
    riskMetadata: Optional[RiskMetadata] = None
    status: Optional[Status5] = Field(None, description='PayPal account status.')
    updatedTime: Optional[ServerTimestamp] = Field(
        None, description='PayPal account updated time.'
    )
    username: Optional[str] = Field(None, description='PayPal username.')


class CommonPaymentCard(BaseModel):
    bankCountry: Optional[str] = Field(
        None, description='Payment instrument bank country.'
    )
    bankName: Optional[str] = Field(None, description='Payment instrument bank name.')
    billingAddress: Optional[ContactObject] = Field(
        None, description='The billing address.'
    )
    bin: Optional[str] = Field(
        None, description="The card's bin (the PAN's first 6 digits)."
    )
    brand: Optional[PaymentCardBrand] = None
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='Payment instrument created time.'
    )
    customFields: Optional[ResourceCustomFields] = None
    customerId: Optional[ResourceId] = Field(None, description="The сustomer's ID.")
    cvv: Optional[str] = Field(
        None, description="Card's cvv (card verification value)."
    )
    expMonth: Optional[int] = Field(None, description="Card's expiration month.")
    expYear: Optional[int] = Field(None, description="Card's expiration year.")
    fingerprint: Optional[str] = Field(
        None,
        description='A unique value to identify the payment instrument regardless of variable values. It contains alphanumeric values.',
    )
    id: Optional[ResourceId] = Field(None, description='The payment instrument ID.')
    last4: Optional[str] = Field(None, description="The PAN's last 4 digits.")
    method: Optional[Method10] = Field(
        None, description='The method of payment instrument.'
    )
    pan: Optional[str] = Field(
        None, description='The card PAN (primary account number).'
    )
    riskMetadata: Optional[RiskMetadata] = None
    status: Optional[Status6] = Field(
        None,
        description='Payment instrument status. When an instrument is `active` it means it has been used at least once for an approved transaction.\nTo remove an instrument from being in use, set it as `deactivated` (see the deactivation endpoint).\n',
    )
    updatedTime: Optional[ServerTimestamp] = Field(
        None, description='Payment instrument updated time.'
    )


class Item(BaseModel):
    isGrandfathered: Optional[bool] = Field(
        None,
        description="Indicates if the plan's current revision is greater than this item's plan revision.",
    )
    isModified: Optional[bool] = Field(
        None,
        description='Indicates if the plan information was modified for this subscription.',
    )
    plan: FlexiblePlan
    planId: Optional[ResourceId] = Field(
        None, description='The plan identifier string.'
    )
    quantity: Optional[int] = Field(
        None, description='Number of units of the product on the given plan.'
    )
    revision: Optional[int] = Field(
        None, description='Increments with each override change to this specific item.'
    )


class CommonSubscription(BaseModel):
    activationTime: Optional[ServerTimestamp] = Field(
        None, description='Order activation time.'
    )
    billingAddress: Optional[ContactObject] = Field(
        None, description='Order billing address.'
    )
    billingStatus: Optional[BillingStatus] = Field(
        None,
        description='The billing status of the most recent invoice.  It may\nhelp you determine if you should change the service status\nsuch as suspending the service.\n',
    )
    couponIds: Optional[List[str]] = Field(
        None,
        description='A list of coupons to redeem on the customer and restrict to this subscription.\nRead more about [coupons here](https://docs.rebilly.com/docs/dashboard/marketing/coupons-and-discounts/).\n\nThis parameter respects the following logic:\n\n- When not passed then applied coupons will not be changed.\n\n- When empty array passed then all applied coupon redemptions will be canceled.\n\n- When list of coupons is passed then not applied yet coupons will be applied, already applied coupons\nwill not change their state, applied coupons that are not presented in passed list will be canceled.\n\nIf list of applied coupons on pending order will be changed due to this param during update order,\n Invoice for the order will be reissued.\n',
    )
    deliveryAddress: Optional[ContactObject] = Field(
        None, description='Order delivery address.'
    )
    id: Optional[ResourceId] = Field(None, description='The order identifier string.')
    initialInvoiceId: Optional[ResourceId] = Field(
        None, description='The initial invoice identifier string.'
    )
    items: Optional[List[Item]] = Field(None, min_length=1)
    orderType: Optional[OrderType] = Field(
        'subscription-order',
        description='Specifies the type of order, a subscription or a one-time purchase.\n',
    )
    poNumber: Optional[str] = Field(
        None,
        description='Purchase order number, will be displayed on the issued invoices.',
        examples=['PO123456'],
    )
    recentInvoiceId: Optional[ResourceId] = Field(
        None,
        description='Most recently issued invoice identifier string. It might not be `paid` yet.',
    )
    voidTime: Optional[ServerTimestamp] = Field(None, description='Order void time.')
    websiteId: Optional[ResourceId] = Field(
        None, description='The website identifier string.'
    )


class CommonTransaction(BaseModel):
    field_3ds: Optional[ThreeDSecureResult] = Field(None, alias='3ds')
    amount: Optional[float] = Field(None, description="The transaction's amount.")
    billingAddress: Optional[ContactObject] = Field(
        None, description='Billing address.'
    )
    billingDescriptor: Optional[str] = Field(
        None,
        description='The billing descriptor that appears on the periodic billing statement. Commonly\n12 or fewer characters for a credit card statement.\n',
    )
    childTransactions: Optional[List[ResourceId]] = Field(
        None, description='The child transaction IDs.'
    )
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='Transaction created time.'
    )
    currency: Optional[CurrencyCode] = None
    customFields: Optional[ResourceCustomFields] = None
    customerId: Optional[ResourceId] = Field(None, description="The сustomer's ID.")
    description: Optional[constr(max_length=255)] = Field(
        None, description='The payment description.'
    )
    gatewayName: Optional[GatewayName] = Field(
        None,
        description='Payment Gateway name, available only after the gateway is selected for the transaction.\n',
    )
    has3ds: Optional[bool] = None
    hasAmountAdjustment: Optional[bool] = Field(
        None, description='True if transaction has amount adjustment.'
    )
    id: Optional[ResourceId] = Field(None, description='The transaction ID.')
    invoiceIds: Optional[List[ResourceId]] = Field(
        None, description='The invoice IDs related to transaction.'
    )
    isRebill: Optional[bool] = None
    isRetry: Optional[bool] = Field(
        None, description='True if this transaction is retry.'
    )
    parentTransactionId: Optional[ResourceId] = Field(
        None, description="The parent's transaction ID."
    )
    paymentInstrument: Optional[InstrumentReference] = None
    planIds: Optional[List[ResourceId]] = Field(
        None, description="The plan IDs related to transaction's order(s)."
    )
    processedTime: Optional[ServerTimestamp] = Field(
        None, description='Transaction processed time.'
    )
    purchaseAmount: Optional[float] = Field(
        None,
        description='The amount actually purchased which may have differed from the originally requested amount in case of an adjustment.',
    )
    purchaseCurrency: Optional[CurrencyCode] = None
    rebillNumber: Optional[int] = Field(
        None, description="The transaction's rebill number."
    )
    redirectUrl: Optional[AnyUrl] = Field(
        None,
        description="The URL to redirect the end-user when an offsite transaction is completed. Defaults to the website's configured URL.",
    )
    requestAmount: Optional[float] = Field(
        None,
        description='The amount in the payment request. If adjusted, the purchase amount and billing amount may vary from it.',
    )
    requestCurrency: Optional[CurrencyCode] = None
    requestId: Optional[str] = Field(
        None,
        description="The transaction's request ID.  This ID must be unique within a 24 hour period. Use this field to prevent duplicated transactions.",
    )
    result: Optional[Result] = Field(None, description='Transaction result.')
    retryNumber: Optional[int] = Field(
        None, description='The position in the sequence of retries.'
    )
    status: Optional[Status8] = Field(None, description='Transaction status.')
    subscriptionIds: Optional[List[ResourceId]] = Field(
        None, description="The orders IDs related to transaction's invoice(s)."
    )
    type: Optional[Type3] = Field(None, description='Transaction type.')
    updatedTime: Optional[ServerTimestamp] = Field(
        None, description='Transaction updated time.'
    )
    websiteId: Optional[ResourceId] = Field(None, description='The website ID.')


class Conekta(GatewayAccount):
    credentials: Credentials25 = Field(..., description='Conekta credentials object.')


class Coppr(GatewayAccount):
    credentials: Credentials26 = Field(..., description='Coppr credentials object.')
    settings: Optional[Settings5] = Field(None, description='Coppr settings object.')


class Credential(BaseModel):
    field_links: Optional[List[Union[SelfLink, CustomerLink]]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    customerId: str = Field(..., description="The credential's customer ID.")
    expiredTime: Optional[datetime_aliased] = Field(
        None, description="The credential's expired time."
    )
    id: Optional[ResourceId] = Field(
        None, description='The credential identifier string.'
    )
    password: SecretStr = Field(..., description="The credential's password.")
    username: str = Field(..., description="Credential's username.")


class Credorax(GatewayAccount):
    credentials: Credentials27


class Cryptonator(GatewayAccount):
    credentials: Credentials28 = Field(
        ..., description='Cryptonator credentials object.'
    )


class CustomerJWT(BaseModel):
    field_links: Optional[List[CustomerLink]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    acl: Optional[Acl] = None
    createdTime: Optional[datetime_aliased] = Field(
        None, description='Session created time.'
    )
    customClaims: Optional[Dict[str, Any]] = Field(
        None,
        examples=[
            {
                'documents': ['identity-proof', 'address-proof'],
                'redirectUrl': 'https://mywebsite.com',
            }
        ],
    )
    customerId: Optional[ResourceId] = Field(None, description="The customer's ID.")
    expiredTime: Optional[datetime_aliased] = Field(
        None, description='Session expired time. Defaults to one hour.'
    )
    id: Optional[ResourceId] = Field(None, description='The session identifier string.')
    invalidate: Optional[bool] = Field(
        True,
        description='Whether to invalidate token after exchange or not.',
        examples=[True],
    )
    oneTimePassword: Optional[constr(pattern=r'^[0-9]{6}$')] = Field(
        None,
        description='The one time password sent via an email. Should contain digits only.',
        examples=['123456'],
    )
    token: Optional[str] = Field(
        None, description="The session's token used for authentication."
    )
    type: Optional[Type6] = Field(None, description='Session type.')
    updatedTime: Optional[ServerTimestamp] = Field(
        None, description='Session updated time.'
    )


class CustomerTimeline(BaseModel):
    field_links: Optional[List[SelfLink]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    customData: Optional[Dict[str, Any]] = Field(
        None,
        description='Timeline custom event data. Used with `custom-event` type. Will be transformed to `extraData` two-column table in response.',
        examples=[{'customAttribute': 'customValue', 'otherAttribute': 'otherValue'}],
    )
    customEventType: Optional[constr(min_length=1, max_length=255)] = Field(
        None,
        description='Timeline custom event type. Used with `custom-event` type. Must be defined using [Customer Timeline custom event API](#operation/PostCustomerTimelineCustomEventType).',
    )
    extraData: Optional[TimelineExtraData] = None
    id: Optional[ResourceId] = Field(
        None, description='The Timeline message identifier string.'
    )
    message: Optional[str] = Field(
        None, description='The message that describes the message details.'
    )
    occurredTime: Optional[ServerTimestamp] = Field(
        None, description='Timeline message time.'
    )
    triggeredBy: Optional[TriggeredBy] = Field(
        None, description='Shows who or what triggered the Timeline message.'
    )
    type: Optional[Type7] = Field(None, description='Timeline message type.')


class CyberSource(GatewayAccount):
    credentials: Credentials29 = Field(
        ..., description='CyberSource credentials object.'
    )


class DataCash(GatewayAccount):
    credentials: Credentials30
    settings: Optional[Settings6] = Field(None, description='Datacash settings object.')
    threeDSecureServer: Optional[DataCash3dsServers] = None


DataCash3dsServer = DataCash3dsServers


class Dengi(GatewayAccount):
    credentials: Credentials31


class Directa24(GatewayAccount):
    credentials: Credentials32 = Field(..., description='Directa24 credentials object.')
    settings: Optional[Settings7] = Field(
        None, description='Directa24 settings object.'
    )


class Dragonphoenix(GatewayAccount):
    credentials: Credentials33 = Field(
        ..., description='Dragonphoenix credentials object.'
    )


class EBANX(GatewayAccount):
    credentials: Credentials34 = Field(..., description='EBANX credentials object.')


class EMS(GatewayAccount):
    credentials: Credentials35 = Field(..., description='EMS credentials object.')
    settings: Optional[Settings8] = Field(None, description='EMS settings object.')
    threeDSecureServer: Optional[EMS3dsServers] = None


class EPG(GatewayAccount):
    credentials: Credentials36 = Field(..., description='EPG credentials object.')


class EPro(GatewayAccount):
    credentials: Credentials37 = Field(..., description='EPro credentials object.')


class EcorePay(GatewayAccount):
    credentials: Credentials38


class Elavon(GatewayAccount):
    credentials: Credentials39 = Field(..., description='Elavon credentials object.')


class Euteller(GatewayAccount):
    credentials: Credentials40 = Field(..., description='Euteller credentials object.')


class File(BaseModel):
    field_links: Optional[
        List[Union[SelfLink, FileDownloadLink, SignedLinkLink, PermalinkLink]]
    ] = Field(
        None, alias='_links', description='The links related to resource.', min_length=3
    )
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='The upload date/time.'
    )
    description: Optional[str] = Field(None, description='The File description.')
    extension: Optional[str] = Field(None, description='The File extension.')
    height: Optional[int] = Field(
        None, description='Image height, applicable to images only.'
    )
    id: Optional[ResourceId] = None
    isPublic: Optional[bool] = Field(
        None,
        description='Is the file available publicly (without authentication). If true, the permalink in the _links section contains the public URL.',
    )
    mime: Optional[Mime] = Field(None, description='The mime type.')
    name: Optional[str] = Field(None, description='Original File name.')
    sha1: Optional[str] = Field(None, description='Hash sum of the file.')
    size: Optional[int] = Field(None, description='The File size in bytes.')
    tags: Optional[List[str]] = Field(None, description='The tags list.')
    updatedTime: Optional[ServerTimestamp] = Field(
        None, description='The latest update date/time.'
    )
    width: Optional[int] = Field(
        None, description='Image width, applicable to images only.'
    )


class FileEmbed(BaseModel):
    file: Optional[File] = None


class FinTecSystems(GatewayAccount):
    credentials: Credentials41 = Field(
        ..., description='FinTecSystems credentials object.'
    )
    settings: Settings9 = Field(..., description='FinTecSystems settings object.')


class Finrax(GatewayAccount):
    credentials: Credentials42 = Field(..., description='Finrax credentials object.')
    settings: Optional[Settings10] = Field(None, description='Finrax settings object.')


class Flexepin(GatewayAccount):
    credentials: Credentials43


class Forte(GatewayAccount):
    credentials: Credentials44


class FundSend(GatewayAccount):
    credentials: Credentials45


class GET(GatewayAccount):
    credentials: Credentials46
    threeDSecureServer: Optional[GET3dsServers] = None


class Ilixium(GatewayAccount):
    credentials: Credentials55 = Field(..., description='Ilixium credentials object.')
    settings: Optional[Settings12] = Field(None, description='Ilixium settings object.')
    threeDSecureServer: Optional[Ilixium3dsServers] = None


Ilixium3dsServer = Ilixium3dsServers


class Ingenico(GatewayAccount):
    credentials: Credentials56
    threeDSecureServer: Optional[Ingenico3dsServers] = None


Ingenico3dsServer = Ingenico3dsServers


class Inovio(GatewayAccount):
    credentials: Credentials57 = Field(..., description='Inovio credentials object.')
    settings: Settings13 = Field(..., description='Inovio settings object.')
    threeDSecureServer: Optional[Inovio3dsServers] = None


Inovio3dsServer = Inovio3dsServers


class InvoiceTimeShift(BaseModel):
    dueTimeShift: Optional[DueTimeShiftInstruction] = None
    issueTimeShift: Optional[IssueTimeShiftInstruction] = None


class InvoiceTimeline(BaseModel):
    field_links: Optional[List[SelfLink]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    extraData: Optional[TimelineExtraData] = None
    id: Optional[ResourceId] = Field(
        None, description='The Timeline message identifier string.'
    )
    message: Optional[str] = Field(
        None, description='The message that describes the message details.'
    )
    occurredTime: Optional[ServerTimestamp] = Field(
        None, description='Timeline message time.'
    )
    triggeredBy: Optional[TriggeredBy] = Field(
        None, description='Shows who or what triggered the Timeline event.'
    )
    type: Optional[Type15] = Field(None, description='Timeline message type.')


class KycDocument2(
    RootModel[Union[ProofOfIdentity, ProofOfAddress, ProofOfFunds, ProofOfPurchase]]
):
    root: Union[ProofOfIdentity, ProofOfAddress, ProofOfFunds, ProofOfPurchase] = Field(
        ..., discriminator='documentType'
    )


class LeadSource(LeadSourceData):
    original: Optional[LeadSourceData] = None


class LeadSourceEmbed(BaseModel):
    leadSource: Optional[LeadSource] = None


class NGenius(GatewayAccount):
    credentials: Credentials71 = Field(..., description='NGenius credentials object.')
    threeDSecureServer: Optional[NGenius3dsServers] = None


NGenius3dsServer = NGenius3dsServers


class NMI(GatewayAccount):
    credentials: Credentials72
    settings: Optional[Settings19] = None
    threeDSecureServer: Optional[NMI3dsServers] = None


class OrderTimeline(BaseModel):
    field_links: Optional[List[SelfLink]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    extraData: Optional[TimelineExtraData] = None
    id: Optional[ResourceId] = Field(
        None, description='The Timeline message identifier string.'
    )
    message: Optional[str] = Field(
        None, description='The message that describes the message details.'
    )
    occurredTime: Optional[ServerTimestamp] = Field(
        None, description='Timeline message time.'
    )
    triggeredBy: Optional[TriggeredBy] = Field(
        None, description='Shows who or what triggered the Timeline message.'
    )
    type: Optional[Type17] = Field(None, description='Timeline message type.')


class Other(
    A1Gateway3dsServers,
    EMerchantPay3dsServers,
    GET3dsServers,
    NMI3dsServers,
    Payvision3dsServers,
    VantivLitle3dsServers,
    Walpay3dsServers,
    Worldpay3dsServers,
):
    pass


class Paay3dsServer(
    A1Gateway3dsServers,
    EMerchantPay3dsServers,
    GET3dsServers,
    NMI3dsServers,
    Payvision3dsServers,
    VantivLitle3dsServers,
    Walpay3dsServers,
    Worldpay3dsServers,
):
    apiKey: str = Field(..., description='Paay ApiKey.')
    mpiUrl: str = Field(..., description='Paay 3DS Server url.')
    sandboxMpiUrl: str = Field(..., description='Paay sandbox 3DS Server url.')
    secret: SecretStr = Field(..., description='Paay secret.')


class Panamerican(GatewayAccount):
    credentials: Credentials82 = Field(
        ..., description='Panamerican credentials object.'
    )
    settings: Settings22 = Field(..., description='Panamerican settings object.')
    threeDSecureServer: Optional[Panamerican3dsServers] = None


Panamerican3dsServer = Panamerican3dsServers


class PaymentInstruction(
    RootModel[Union[PaymentToken, PaymentInstrument3Model, PaymentMethods]]
):
    root: Union[PaymentToken, PaymentInstrument3Model, PaymentMethods]


class Paysafe(GatewayAccount):
    credentials: Credentials98
    threeDSecureServer: Optional[Paysafe3dsServers] = None


Paysafe3dsServer = Paysafe3dsServers


class Payvision(GatewayAccount):
    credentials: Credentials100
    settings: Optional[Settings28] = Field(
        None, description='Payvision settings object.'
    )
    threeDSecureServer: Optional[Payvision3dsServers] = None


Payvision3dsServer = Payvision3dsServers


class Piastrix(GatewayAccount):
    credentials: Credentials101 = Field(..., description='Piastrix credentials object.')
    settings: Optional[Settings29] = Field(
        None, description='Piastrix settings object.'
    )
    threeDSecureServer: Optional[Piastrix3dsServers] = None


Piastrix3dsServer = Piastrix3dsServers


class Plan(CommonPlan):
    field_links: Optional[List[SelfLink]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    invoiceTimeShift: Optional[InvoiceTimeShift] = Field(
        None,
        description='You can shift issue time and due time of invoices for this plan.',
    )


class PlanEmbed(BaseModel):
    plan: Optional[Plan] = None


class ReadyToPay2(ReadyToPayItems):
    billingAddress: Optional[ContactObject] = Field(
        None, description='The billing address.'
    )
    riskMetadata: RiskMetadata
    websiteId: ResourceId = Field(..., description='The website identifier string.')


class ReadyToPay(RootModel[Union[ReadyToPay1, ReadyToPay2]]):
    root: Union[ReadyToPay1, ReadyToPay2]


class SecureTrading(GatewayAccount):
    credentials: Credentials115 = Field(
        ..., description='SecureTrading credentials object.'
    )
    threeDSecureServer: Optional[SecureTrading3dsServers] = None


SecureTrading3dsServer = SecureTrading3dsServers


class SecurionPay(GatewayAccount):
    credentials: Credentials116 = Field(
        ..., description='SecurionPay credentials object.'
    )
    threeDSecureServer: Optional[SecurionPay3dsServers] = None


class SmartInvoice(GatewayAccount):
    credentials: Credentials118 = Field(
        ..., description='SmartInvoice credentials object.'
    )
    threeDSecureServer: Optional[SmartInvoice3dsServers] = None


SmartInvoice3dsServer = SmartInvoice3dsServers


class Stripe(GatewayAccount):
    settings: Settings31 = Field(..., description='Stripe settings object.')
    threeDSecureServer: Optional[Stripe3dsServers] = None


class Stripe3dsServer(Stripe3dsServers):
    enforceThreeDSecure: Optional[bool] = Field(
        None,
        description='If true, Stripe will attempt to perform 3D Secure\nand overrides any [dynamic 3D Secure Radar rules](https://stripe.com/docs/radar/rules#request-3ds).\n',
    )


class TestProcessor(GatewayAccount):
    threeDSecureServer: Optional[TestProcessor3dsServers] = None


TestProcessor3dsServer = TestProcessor3dsServers


class BankAccountsPostRequest(
    RootModel[Union[BankAccountCreateToken, BankAccountCreatePlain]]
):
    root: Union[BankAccountCreateToken, BankAccountCreatePlain]


class BankAccountsIdPutRequest(
    RootModel[Union[BankAccountCreateToken, BankAccountCreatePlain]]
):
    root: Union[BankAccountCreateToken, BankAccountCreatePlain]


class CredentialsGetResponse(RootModel[List[Credential]]):
    root: List[Credential]


class CustomerTimelineEventsGetResponse(RootModel[List[CustomerTimeline]]):
    root: List[CustomerTimeline]


class CustomersIdTimelineGetResponse(RootModel[List[CustomerTimeline]]):
    root: List[CustomerTimeline]


class FilesGetResponse(RootModel[List[File]]):
    root: List[File]


class InvoicesIdTimelineGetResponse(RootModel[List[InvoiceTimeline]]):
    root: List[InvoiceTimeline]


class KycDocumentsGetResponse(RootModel[List[KycDocument2]]):
    root: List[KycDocument2]


class PaymentInstrumentsIdPatchRequest(
    RootModel[
        Union[
            PaymentInstrumentUpdateToken, PaymentCardUpdatePlain, BankAccountUpdatePlain
        ]
    ]
):
    root: Union[
        PaymentInstrumentUpdateToken, PaymentCardUpdatePlain, BankAccountUpdatePlain
    ]


class PlansGetResponse(RootModel[List[Plan]]):
    root: List[Plan]


class SubscriptionsIdTimelineGetResponse(RootModel[List[OrderTimeline]]):
    root: List[OrderTimeline]


class Attachment(BaseModel):
    field_embedded: Optional[List[FileEmbed]] = Field(
        None,
        alias='_embedded',
        description='Any embedded objects available that are requested by the `expand` querystring parameter.',
        min_length=1,
    )
    field_links: Optional[List[Union[SelfLink, FileLink, AttachmentResourceLink]]] = (
        Field(
            None,
            alias='_links',
            description='The links related to resource.',
            min_length=3,
        )
    )
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='Creation date/time.'
    )
    description: Optional[str] = Field(None, description='The Attachment description.')
    fileId: str = Field(..., description='Linked File object id.')
    id: Optional[ResourceId] = None
    name: Optional[str] = Field(None, description='The Original Attachment name.')
    relatedId: str = Field(..., description='Linked object Id.')
    relatedType: RelatedType = Field(..., description='Linked object type.')
    updatedTime: Optional[ServerTimestamp] = Field(
        None, description='Latest update date/time.'
    )


class CommonOneTimeOrder(CommonSubscription):
    status: Optional[Status4] = Field(None, description='One-time order status.')


class CommonPaymentToken(BaseModel):
    field_links: Optional[List[SelfLink]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='Token created time.'
    )
    expirationTime: Optional[ServerTimestamp] = Field(
        None, description='Token expiration time.'
    )
    id: Optional[ResourceId] = Field(None, description='The token identifier string.')
    isUsed: Optional[bool] = Field(
        False, description='Whether the token was already used.'
    )
    leadSource: Optional[LeadSource] = None
    method: str
    riskMetadata: Optional[RiskMetadata] = None
    updatedTime: Optional[ServerTimestamp] = Field(
        None, description='Token updated time.'
    )
    usageTime: Optional[ServerTimestamp] = Field(None, description='Token usage time.')


class CommonSubscriptionOrder(CommonSubscription):
    autopay: Optional[bool] = Field(
        True, description='Autopay determines if a payment attempt will be automatic.'
    )
    endTime: Optional[ServerTimestamp] = Field(
        None, description='Subscription end time.'
    )
    inTrial: Optional[bool] = Field(
        None, description='True if the subscription is currently in a trial period.'
    )
    invoiceTimeShift: Optional[InvoiceTimeShift] = Field(
        None,
        description='You can shift issue time and due time of invoices for this subscription.\nThis setting overrides plan settings. To use plan settings, set `null`.\nTo use multiple plans in one subscription they all must have the same billing period,\nthis property allows to subscribe to different plans.\n',
        examples=[{'$ref': '#/components/schemas/ReadyToPayMethods/example/2/feature'}],
    )
    isTrialOnly: Optional[bool] = Field(
        False,
        description="Whether a subscription ends after a trial period. Recurring settings are ignored if it's `true`.",
    )
    lineItemSubtotal: Optional[LineItemSubtotal] = Field(
        None,
        description='Subtotal of line items in this subscription (signed value). If credits exceed debits, it will be a negative number.',
    )
    lineItems: Optional[UpcomingInvoiceItemCollection] = Field(
        None,
        description='Subscription line items which queue until the next renewal (or interim) invoice is issued for the subscription.',
    )
    rebillNumber: Optional[int] = Field(None, description='The current period number.')
    recurringInterval: Optional[RecurringInterval1] = Field(
        None,
        description='The recurring interval to override plan settings. To use plan settings, set `null`.\nTo use multiple plans in one subscription they all must have the same recurring period length,\nthis property allows to subscribe to different plans.\n',
        examples=[{'$ref': '#/components/schemas/ReadyToPayMethods/example/2/feature'}],
    )
    renewalTime: Optional[datetime_aliased] = Field(
        None, description='Subscription renewal time.'
    )
    startTime: Optional[datetime_aliased] = Field(
        None,
        description="Subscription start time.  When the value is sent as null, it will use the current time. This value can't be in past more than one service period.",
        examples=[{'$ref': '#/components/schemas/ReadyToPayMethods/example/2/feature'}],
    )
    status: Optional[Status7] = Field(
        None,
        description='The status of the subscription service. A subscription starts\nin the `pending` status, and will become `active` when the\nservice period begins.\n',
    )
    trial: Optional[Trial1] = Field(
        None,
        description='To use plan defaults do not send the `trial` key, or send a `null`. value with it.',
    )


class CommonTransactionRequest(BaseModel):
    amount: float = Field(..., description='The transaction amount.', examples=[97.97])
    billingAddress: Optional[ContactObject] = Field(
        None,
        description='Billing address. If not supplied, we use the billing address associated with the payment instrument, and then customer.',
    )
    currency: CurrencyCode
    customFields: Optional[ResourceCustomFields] = None
    customerId: ResourceId = Field(..., description='The customer identifier string.')
    description: Optional[constr(max_length=255)] = Field(
        None, description='The payment description.'
    )
    gatewayAccountId: Optional[ResourceId] = Field(
        None,
        description='Rebilly will select the appropriate payment gateway account for the transaction based on the properties of the transaction and the `gateway-account-requested` event rules configurations. If you wish to prevent Rebilly from making the gateway account selection, you may supply a gateway account id here, and it will be used instead. Only use this field if you intend to override the settings.',
    )
    invoiceIds: Optional[List[ResourceId]] = Field(
        None, description='The array of invoice identifiers.'
    )
    isMerchantInitiated: Optional[bool] = Field(
        False, description='True if the transaction was initiated by the merchant.'
    )
    isProcessedOutside: Optional[bool] = Field(
        False, description='True if transaction was processed outside Rebilly.'
    )
    notificationUrl: Optional[AnyUrl] = Field(
        None,
        description="The URL where a server-to-server notification request type `POST` with a transaction payload will be sent when the transaction's result is finalized. Do not trust the notification; follow with a `GET` request to confirm the result of the transaction. Please respond with a `2xx` HTTP status code, or we will reattempt the request again. You may use `{id}` or `{result}` as placeholders in the URL and we will replace them with the transaction's id and result accordingly.\n",
    )
    paymentInstruction: Optional[PaymentInstruction] = Field(
        None,
        description="Payment instruction. If not supplied, customer's default payment instrument will be used.",
    )
    paymentInstrument: Optional[PaymentInstrument] = None
    processedTime: Optional[datetime_aliased] = Field(
        None,
        description='The time the transaction was processed. Can be specified only if transaction was processed outside Rebilly.',
    )
    redirectUrl: Optional[AnyUrl] = Field(
        None,
        description="The URL to redirect the end-user when an offsite transaction is completed. Defaults to the website's configured URL. You may use `{id}` or `{result}` as placeholders in the URL and we will replace them with the transaction's id and result accordingly.",
    )
    requestId: Optional[constr(pattern=r'^[\-\w]+$', max_length=50)] = Field(
        None,
        description='The request id is **recommended**. It prevents duplicate transaction requests within a short period of time. If a duplicate request is sent with the same `requestId` it will be ignored to prevent double-billing anyone.  It must be unique within a 24-hour period.  We recommend generating a UUID v4 as its value.',
        examples=['44433322-2c4y-483z-a0a9-158621f77a21'],
    )
    riskMetadata: Optional[RiskMetadata] = None
    websiteId: ResourceId = Field(..., description='The website identifier string.')


class CoreReadyToPay(BaseModel):
    customerId: Optional[ResourceId] = Field(
        None, description='The customer identifier string.'
    )


class Customer(BaseModel):
    field_embedded: Optional[List[LeadSourceEmbed]] = Field(
        None,
        alias='_embedded',
        description='Any embedded objects available that are requested by the `expand` querystring parameter.',
        min_length=1,
    )
    field_links: Optional[
        List[Union[SelfLink, DefaultPaymentInstrumentLink, LeadSourceLink, WebsiteLink]]
    ] = Field(
        None, alias='_links', description='The links related to resource.', min_length=3
    )
    averageValue: Optional[CustomerAverageValue] = None
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='The customer created time.'
    )
    customFields: Optional[ResourceCustomFields] = None
    defaultPaymentInstrument: Optional[PaymentInstrument] = None
    email: Optional[EmailStr] = Field(None, description="The customer's email.")
    firstName: Optional[str] = Field(None, description="The customer's first name.")
    id: Optional[ResourceId] = Field(
        None, description='The customer identifier string.'
    )
    invoiceCount: Optional[int] = Field(
        None,
        description='An auto-incrementing number based on the sequence of invoices. If set to 0, then this record is a Lead, otherwise is a Customer.',
    )
    lastName: Optional[str] = Field(None, description="The customer's last name.")
    lastPaymentTime: Optional[ServerTimestamp] = Field(
        None,
        description='The most recent time of an approved payment for the customer.',
    )
    lifetimeRevenue: Optional[CustomerLifetimeRevenue] = None
    paymentCount: Optional[int] = Field(
        None, description='The number of approved payments for the customer.'
    )
    paymentToken: Optional[str] = Field(
        None,
        description='A write-only payment token; if supplied, it will be converted into a\npayment instrument and be set as the `defaultPaymentInstrument`. The\nvalue of this property will override the `defaultPaymentInstrument`\nin the case that both are supplied. The token may only be used once\nbefore it is expired.\n',
    )
    primaryAddress: Optional[ContactObject] = None
    revision: Optional[int] = Field(
        None,
        description='The number of times the customer data has been modified.\nThe revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation.\n',
    )
    tags: Optional[List[Tag]] = Field(None, description="A list of customer's tags.")
    updatedTime: Optional[ServerTimestamp] = Field(
        None, description='The customer updated time.'
    )
    websiteId: Optional[ResourceId] = Field(None, description="The website's ID.")


class CustomerEmbed(BaseModel):
    customer: Optional[Customer] = None


class DigitalWalletToken(CommonPaymentToken):
    billingAddress: Optional[ContactObject] = Field(
        None, description='The billing address object.'
    )
    method: Method13 = Field(..., description='The token payment method.')
    paymentInstrument: PaymentInstrument1 = Field(
        ..., description='The payment instrument details.'
    )


class InvoiceItem(BaseModel):
    field_embedded: Optional[List[Union[ProductEmbed, PlanEmbed]]] = Field(
        None,
        alias='_embedded',
        description='Any embedded objects available that are requested by the `expand` querystring parameter.',
        min_length=1,
    )
    field_links: Optional[List[Union[SelfLink, ProductLink]]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='Invoice item created time.'
    )
    description: Optional[str] = Field(None, description="Invoice item's description.")
    discountAmount: Optional[float] = Field(
        None, description='Invoice item discount amount.'
    )
    id: Optional[ResourceId] = Field(None, description='The website identifier string.')
    periodEndTime: Optional[datetime_aliased] = Field(None, description='End time.')
    periodNumber: Optional[int] = Field(
        None, description='Invoice item subscription order period number.'
    )
    periodStartTime: Optional[datetime_aliased] = Field(None, description='Start time.')
    price: Optional[float] = Field(None, description="Invoice item's total price.")
    productId: Optional[ResourceId] = Field(None, description="The product's ID.")
    quantity: Optional[int] = Field(None, description="Invoice item's quantity.")
    type: Type14 = Field(..., description="Invoice item's type.")
    unitPrice: float = Field(..., description="Invoice item's price.")
    updatedTime: Optional[ServerTimestamp] = Field(
        None, description='Invoice item updated time.'
    )


class KhelocardCard(BaseModel):
    field_embedded: Optional[List[CustomerEmbed]] = Field(
        None,
        alias='_embedded',
        description='Any embedded objects available that are requested by the `expand` querystring parameter.',
        min_length=1,
    )
    field_links: Optional[List[Union[SelfLink, CustomerLink]]] = Field(
        None, alias='_links', description='Links related to the resource.', min_length=1
    )
    billingAddress: Optional[ContactObject] = Field(
        None, description='The billing address.'
    )
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='The payment instrument created time.'
    )
    customFields: Optional[ResourceCustomFields] = None
    customerId: Optional[ResourceId] = Field(None, description="Customer's ID.")
    expMonth: Optional[int] = Field(
        None, description="Khelocard card's expiration month."
    )
    expYear: Optional[int] = Field(
        None, description="Khelocard card's expiration year."
    )
    fingerprint: Optional[str] = Field(
        None,
        description='A unique value to identify the payment instrument regardless of variable values. It contains alphanumeric values.',
    )
    id: Optional[ResourceId] = Field(None, description='The payment instrument ID.')
    last4: Optional[str] = Field(None, description="The number's last 4 digits.")
    method: Optional[Method17] = Field(
        None, description='The method of payment instrument.'
    )
    number: Optional[str] = Field(None, description="Khelocard card's masked number.")
    riskMetadata: Optional[RiskMetadata] = None
    status: Optional[Status13] = Field(
        None, description='The payment instrument status.'
    )
    updatedTime: Optional[ServerTimestamp] = Field(
        None, description='The payment instrument updated time.'
    )


class KhelocardCardToken(CommonPaymentToken):
    billingAddress: ContactObject = Field(
        ..., description='The billing address object.'
    )
    method: Method17 = Field(..., description='The token method.')
    paymentInstrument: PaymentInstrument2 = Field(
        ..., description='The token instrument details.'
    )


class PaymentCardToken(CommonPaymentToken):
    billingAddress: Optional[ContactObject] = Field(
        None, description='The billing address object.'
    )
    method: Method19 = Field(..., description='The token payment method.')
    paymentInstrument: PaymentInstrument3 = Field(
        ..., description='The payment card instrument details.'
    )


PayoutRequest = CommonTransactionRequest


class PlaidAccountToken(CommonPaymentToken):
    billingAddress: ContactObject = Field(
        ..., description='The billing address object.'
    )
    method: Method21 = Field(..., description='The token method.')
    paymentInstrument: PaymentInstrument4 = Field(
        ..., description='The Plaid payment instrument details.'
    )


class TransactionRequest(CommonTransactionRequest):
    type: Type20 = Field(
        ...,
        description='The type of transaction requested.\nYou should always include the type within your API request.\nThis supports a limited subset of Transaction types.  To refund or void, use the refund endpoint.\nTo `capture` use the `sale` type. If any existing `authorize` transactions are eligible, then they will be captured and the `sale` will be converted to a `capture` type.\n',
    )


class AttachmentsGetResponse(RootModel[List[Attachment]]):
    root: List[Attachment]


class CustomersGetResponse(RootModel[List[Customer]]):
    root: List[Customer]


class InvoicesIdItemsGetResponse(RootModel[List[InvoiceItem]]):
    root: List[InvoiceItem]


class AlternativePaymentInstrument2(BaseModel):
    field_embedded: Optional[List[CustomerEmbed]] = Field(
        None,
        alias='_embedded',
        description='Any embedded objects available that are requested by the `expand` querystring parameter.',
        min_length=1,
    )
    field_links: Optional[List[Union[SelfLink, CustomerLink]]] = Field(
        None, alias='_links', description='Links related to the resource.', min_length=1
    )
    billingAddress: Optional[ContactObject] = Field(
        None, description='The billing address.'
    )
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='The payment instrument created time.'
    )
    customFields: Optional[ResourceCustomFields] = None
    customerId: Optional[ResourceId] = Field(None, description="Customer's ID.")
    id: Optional[ResourceId] = Field(None, description='The payment instrument ID.')
    method: Optional[AlternativePaymentMethods] = Field(
        None, description='The method of payment instrument.'
    )
    riskMetadata: Optional[RiskMetadata] = None
    status: Optional[Status] = Field(None, description='The payment instrument status.')
    updatedTime: Optional[ServerTimestamp] = Field(
        None, description='The payment instrument updated time.'
    )


class AlternativePaymentToken(CommonPaymentToken):
    billingAddress: ContactObject = Field(
        ..., description='The billing address object.'
    )
    method: AlternativePaymentMethods = Field(
        ..., description='The token payment method.'
    )


class BankAccount(CommonBankAccount):
    field_embedded: Optional[List[CustomerEmbed]] = Field(
        None,
        alias='_embedded',
        description='Any embedded objects available that are requested by the `expand` querystring parameter.',
        min_length=1,
    )
    field_links: Optional[List[Union[SelfLink, CustomerLink]]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )


class BankAccountEmbed(BaseModel):
    bankAccount: Optional[BankAccount] = None


class BankAccountToken(CommonPaymentToken):
    billingAddress: ContactObject = Field(
        ..., description='The billing address object.'
    )
    method: Method5 = Field(..., description='The token payment method.')
    paymentInstrument: BankAccountInstrument


class CommonInvoice(BaseModel):
    abandonedTime: Optional[ServerTimestamp] = Field(
        None, description='Invoice abandoned time.'
    )
    amount: Optional[float] = Field(None, description="The invoice's amount.")
    amountDue: Optional[float] = Field(None, description="The invoice's due amount.")
    autopayRetryNumber: Optional[conint(ge=0)] = Field(
        0, description='Invoice autopay retry number.'
    )
    autopayScheduledTime: Optional[datetime_aliased] = Field(
        None, description='Invoice autopay scheduled time.'
    )
    billingAddress: Optional[ContactObject] = Field(
        None, description="Invoice's billing address."
    )
    collectionPeriod: Optional[int] = Field(
        None,
        description='Collection period - difference between paidTime and issuedTime in days.',
    )
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='Invoice created time.'
    )
    currency: CurrencyCode
    delinquentCollectionPeriod: Optional[int] = Field(
        None,
        description='Delinquent collection period - difference between paidTime and dueTime in days.',
    )
    deliveryAddress: Optional[ContactObject] = Field(
        None, description="Invoice's delivery address."
    )
    discountAmount: Optional[float] = Field(
        None, description="The invoice's discounts amount."
    )
    discounts: Optional[List[InvoiceDiscount]] = Field(
        None, description='Discounts applied.'
    )
    dueTime: Optional[ServerTimestamp] = Field(None, description='Invoice due time.')
    id: Optional[ResourceId] = Field(None, description='The invoice ID.')
    invoiceNumber: Optional[int] = Field(
        None,
        description='An auto-incrementing number based on the sequence of invoices for any particular customer.',
    )
    issuedTime: Optional[ServerTimestamp] = Field(
        None, description='Invoice issued time.'
    )
    items: Optional[List[InvoiceItem]] = Field(None, description='Invoice items array.')
    notes: Optional[str] = Field(
        None,
        description='Notes for the customer which will be displayed on the invoice.',
    )
    paidTime: Optional[ServerTimestamp] = Field(None, description='Invoice paid time.')
    paymentFormUrl: Optional[str] = Field(
        None,
        description="URL where the customer can be redirected to pay for the invoice\nwith one of the methods which are available for this customer.\nIt's an alternative to creating a new transaction with empty `methods`.\n",
    )
    poNumber: Optional[str] = Field(
        None,
        description='Purchase order number which will be displayed on the invoice.',
        examples=['PO123456'],
    )
    shipping: Optional[InvoiceShipping] = None
    status: Optional[Status2] = Field(None, description='Invoice status.')
    subscriptionId: Optional[ResourceId] = Field(
        None, description="The related order's ID if available, otherwise null."
    )
    subtotalAmount: Optional[float] = Field(
        None, description="The invoice's subtotal amount."
    )
    tax: Optional[InvoiceTax] = None
    updatedTime: Optional[ServerTimestamp] = Field(
        None, description='Invoice updated time.'
    )
    voidedTime: Optional[ServerTimestamp] = Field(
        None, description='Invoice voided time.'
    )
    websiteId: ResourceId = Field(..., description='The website ID.')


class CompositeToken(
    RootModel[
        Union[
            PaymentCardToken,
            BankAccountToken,
            DigitalWalletToken,
            PlaidAccountToken,
            KhelocardCardToken,
            AlternativePaymentToken,
        ]
    ]
):
    root: Union[
        PaymentCardToken,
        BankAccountToken,
        DigitalWalletToken,
        PlaidAccountToken,
        KhelocardCardToken,
        AlternativePaymentToken,
    ]


class BankAccountsGetResponse(RootModel[List[BankAccount]]):
    root: List[BankAccount]


class TokensGetResponse(RootModel[List[CompositeToken]]):
    root: List[CompositeToken]


class AuthTransactionEmbed(BaseModel):
    authTransaction: Optional[Transaction] = None


class Dispute(BaseModel):
    field_embedded: Optional[List[TransactionEmbed]] = Field(
        None,
        alias='_embedded',
        description='Any embedded objects available that are requested by the `expand` querystring parameter.',
        min_length=1,
    )
    field_links: Optional[List[Union[SelfLink, TransactionLink]]] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    acquirerReferenceNumber: Optional[str] = Field(
        None, description="The dispute's acquirer reference number."
    )
    amount: float = Field(..., description='The dispute amount.')
    caseId: Optional[str] = Field(None, description='The case ID for the dispute.')
    category: Optional[Category] = Field(None, description="The dispute's category.")
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='Dispute created time.'
    )
    currency: CurrencyCode
    customerId: Optional[str] = Field(None, description="The dispute's customer ID.")
    deadlineTime: Optional[datetime_aliased] = Field(
        None, description='Dispute deadline time.'
    )
    id: Optional[ResourceId] = Field(None, description='The dispute identifier string.')
    postedTime: datetime_aliased = Field(..., description='Dispute posted time.')
    rawResponse: Optional[str] = Field(
        None, description='Dispute raw response from gateway.'
    )
    reasonCode: ReasonCode = Field(..., description="The dispute's reason code.")
    resolvedTime: Optional[ServerTimestamp] = Field(
        None, description='Dispute resolved time.'
    )
    status: Status10 = Field(..., description="The dispute's status.")
    transactionId: str = Field(..., description="The dispute's transaction ID.")
    type: Type11 = Field(..., description="The dispute's type.")
    updatedTime: Optional[ServerTimestamp] = Field(
        None, description='Dispute updated time.'
    )


class InitialInvoiceEmbed(BaseModel):
    initialInvoice: Optional[Invoice] = None


class Invoice(CommonInvoice):
    field_embedded: Optional[
        List[Union[CustomerEmbed, WebsiteEmbed, OrganizationEmbed, LeadSourceEmbed]]
    ] = Field(
        None,
        alias='_embedded',
        description='Any embedded objects available that are requested by the `expand` querystring parameter.',
        min_length=1,
    )
    field_links: Optional[
        List[
            Union[
                SelfLink,
                CustomerLink,
                WebsiteLink,
                OrganizationLink,
                LeadSourceLink,
                TransactionAllocationsLink,
                RecalculateInvoiceLink,
                SubscriptionLink,
            ]
        ]
    ] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    customerId: ResourceId = Field(..., description="The сustomer's ID.")
    dueReminderNumber: Optional[int] = Field(
        None, description='Number of past due reminder events triggered.'
    )
    dueReminderTime: Optional[ServerTimestamp] = Field(
        None, description='Time past due reminder event will be triggered.'
    )
    retryInstruction: Optional[RetryInstruction] = Field(
        None, description='The invoice retry instruction.'
    )
    revision: Optional[int] = Field(
        None,
        description='The number of times the invoice data has been modified.\nThe revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation.\n',
    )
    transactions: Optional[List[Transaction]] = Field(
        None, description='Invoice transactions array.'
    )
    type: Optional[Type13] = Field(None, description='Invoice type.')


class InvoicesEmbed(BaseModel):
    invoices: Optional[List[Invoice]] = None


class ParentTransactionEmbed(BaseModel):
    parentTransaction: Optional[Transaction] = None


class PayPalAccount(CommonPayPalAccount):
    field_embedded: Optional[List[Union[AuthTransactionEmbed, CustomerEmbed]]] = Field(
        None,
        alias='_embedded',
        description='Any embedded objects available that are requested by the `expand` querystring parameter.',
        min_length=1,
    )
    field_links: Optional[
        List[Union[SelfLink, CustomerLink, AuthTransactionLink, ApprovalUrlLink]]
    ] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )


class PaymentCard(CommonPaymentCard):
    field_embedded: Optional[List[Union[AuthTransactionEmbed, CustomerEmbed]]] = Field(
        None,
        alias='_embedded',
        description='Any embedded objects available that are requested by the `expand` querystring parameter.',
        min_length=1,
    )
    field_links: Optional[
        List[Union[SelfLink, CustomerLink, AuthTransactionLink, ApprovalUrlLink]]
    ] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    expirationReminderNumber: Optional[int] = Field(
        None, description='Number of expiration reminder events triggered.'
    )
    expirationReminderTime: Optional[ServerTimestamp] = Field(
        None, description='Time expiration reminder event will be triggered.'
    )
    stickyGatewayAccountId: Optional[str] = Field(
        None, description='Default gateway account ID used for transactions.'
    )


class PaymentCardEmbed(BaseModel):
    paymentCard: Optional[PaymentCard] = None


class PaymentInstrument21(
    RootModel[
        Union[
            PaymentCard,
            BankAccount,
            PayPalAccount,
            KhelocardCard,
            AlternativePaymentInstrument2,
        ]
    ]
):
    root: Union[
        PaymentCard,
        BankAccount,
        PayPalAccount,
        KhelocardCard,
        AlternativePaymentInstrument2,
    ]


class RecentInvoiceEmbed(BaseModel):
    recentInvoice: Optional[Invoice] = None


class RetriedTransactionEmbed(BaseModel):
    retriedTransaction: Optional[Transaction] = None


class Search(BaseModel):
    customers: Optional[List[Customer]] = Field(
        None, description='List of returned customers.'
    )
    invoices: Optional[List[Invoice]] = Field(
        None, description='List of returned invoices.'
    )
    orders: Optional[List[Subscription]] = Field(
        None, description='List of returned orders.'
    )
    searched: Optional[List[str]] = Field(
        None, description='Names of searched resources, even if they returned nothing.'
    )
    transactions: Optional[List[Transaction]] = Field(
        None, description='List of returned transactions.'
    )


class SubscriptionMetadata(BaseModel):
    field_embedded: Optional[
        List[
            Union[
                RecentInvoiceEmbed,
                InitialInvoiceEmbed,
                CustomerEmbed,
                WebsiteEmbed,
                LeadSourceEmbed,
            ]
        ]
    ] = Field(
        None,
        alias='_embedded',
        description='Any embedded objects available that are requested by the `expand` querystring parameter.',
        min_length=1,
    )
    field_links: Optional[
        List[
            Union[
                SelfLink,
                CustomerLink,
                InitialInvoiceLink,
                RecentInvoiceLink,
                WebsiteLink,
                ApprovalUrlLink,
            ]
        ]
    ] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    createdTime: Optional[ServerTimestamp] = Field(
        None, description='Order created time.'
    )
    customFields: Optional[ResourceCustomFields] = None
    revision: Optional[int] = Field(
        None,
        description='The number of times the order data has been modified.\nThe revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation.\n',
    )
    riskMetadata: Optional[RiskMetadata] = Field(
        None,
        description='Risk metadata. If null, the value would coalesce to the risk metadata captured when creating the payment token.',
        examples=[{'$ref': '#/components/schemas/ReadyToPayMethods/example/2/feature'}],
    )
    updatedTime: Optional[ServerTimestamp] = Field(
        None, description='Order updated time.'
    )


class Transaction(CommonTransaction):
    field_embedded: Optional[
        List[
            Union[
                ParentTransactionEmbed,
                RetriedTransactionEmbed,
                GatewayAccountEmbed,
                CustomerEmbed,
                LeadSourceEmbed,
                WebsiteEmbed,
                PaymentCardEmbed,
                BankAccountEmbed,
                InvoicesEmbed,
            ]
        ]
    ] = Field(
        None,
        alias='_embedded',
        description='Any embedded objects available that are requested by the `expand` querystring parameter.',
        min_length=1,
    )
    field_links: Optional[
        List[
            Union[
                SelfLink,
                WebsiteLink,
                CustomerLink,
                GatewayAccountLink,
                PaymentCardLink,
                ParentTransactionLink,
                RetriedTransactionLink,
                LeadSourceLink,
                ApprovalUrlLink,
                RefundUrlLink,
                TransactionUpdateUrlLink,
                DisputeLink,
                InvoicesLink,
                QueryUrlLink,
            ]
        ]
    ] = Field(
        None, alias='_links', description='The links related to resource.', min_length=1
    )
    acquirerName: Optional[AcquirerName] = Field(
        None,
        description='Acquirer name, available only when transaction use gateway, else null.',
    )
    arn: Optional[str] = Field(
        None,
        description='The acquirer reference number.',
        examples=['74836950144358910018150'],
    )
    bin: Optional[str] = Field(None, description='Payment Card BIN.')
    bumpOffer: Optional[BumpOffer] = Field(
        None, description='Bump offer information. Null if hasBumpOffer is false.'
    )
    dcc: Optional[Dcc] = Field(
        None,
        description='Dynamic Currency Conversion detailed information. Null if hasDcc is false.',
    )
    discrepancyTime: Optional[datetime_aliased] = Field(
        None, description='The time of the most recent discrepancy on the transaction.'
    )
    disputeStatus: Optional[DisputeStatus] = Field(
        None, description="The dispute's status, else null."
    )
    disputeTime: Optional[datetime_aliased] = Field(
        None, description='Time the dispute was created, else null.'
    )
    gateway: Optional[Gateway] = Field(
        None, description='The related gateway information.'
    )
    gatewayAccountId: Optional[ResourceId] = Field(
        None, description="The transaction's Gateway Account ID."
    )
    gatewayTransactionId: Optional[ResourceId] = Field(
        None, description="The gateway's transaction ID."
    )
    hadDiscrepancy: Optional[bool] = Field(
        None,
        description='True if the transaction has been updated due to a discrepancy with its. source of truth.',
    )
    hasBumpOffer: Optional[bool] = Field(
        None, description='True if transaction has a Bump offer.'
    )
    hasDcc: Optional[bool] = Field(
        None, description='True if transaction has Dynamic Currency Conversion applied.'
    )
    isDisputed: Optional[bool] = Field(
        None, description='True if transaction is disputed.'
    )
    isMerchantInitiated: Optional[bool] = Field(
        None, description='True if the transaction was initiated by the merchant.'
    )
    isProcessedOutside: Optional[bool] = Field(
        None, description='True if the transaction was processed outside of Rebilly.'
    )
    isReconciled: Optional[bool] = Field(
        None,
        description='True if the transaction has been verified with gateway batch data.',
    )
    method: Optional[PaymentMethod] = Field(
        None, description='Payment Method. Use `paymentInstrument.method` instead.'
    )
    notificationUrl: Optional[TransactionNotificationUrl] = None
    orderId: Optional[str] = Field(
        None,
        description="The transaction's order ID.  This ID must be unique within a 24 hour period. This field was renamed to the `requestId`.",
    )
    paymentInstrument: Optional[PaymentInstrument] = None
    referenceData: Optional[Dict[str, str]] = Field(
        None,
        description='Transaction reference data.',
        examples=[{'gatewayTransactionId': 'GAT123'}],
    )
    reportAmount: Optional[float] = Field(
        None,
        description='Transaction amount converted to organization&nbsp;selected report currency.',
    )
    reportCurrency: Optional[CurrencyCode] = None
    retriedTransactionId: Optional[ResourceId] = Field(
        None, description='The retried transaction ID.'
    )
    retriesResult: Optional[RetriesResult] = Field(
        None, description='Retries sequence result.'
    )
    retryInstruction: Optional[PaymentRetry] = None
    revision: Optional[int] = Field(
        None,
        description='The number of times the transaction data has been modified.\nThe revision is useful when analyzing webhook data to determine if the change takes precedence over the current representation.\n',
    )
    riskMetadata: Optional[RiskMetadata] = Field(None, description='Risk metadata.')
    riskScore: Optional[int] = Field(None, description="The transaction's risk score.")
    scheduledTime: Optional[datetime_aliased] = Field(
        None, description='The time the transaction is scheduled for collection.'
    )
    settlementTime: Optional[datetime_aliased] = Field(
        None,
        description='The time that the transaction was settled by the banking instuition.',
    )
    velocity: Optional[int] = Field(
        None,
        description='The number of transactions by the same customer in the past 24 hours.',
    )


class TransactionEmbed(BaseModel):
    transaction: Optional[Transaction] = None


class CustomersIdUpcomingInvoicesGetResponse(RootModel[List[Invoice]]):
    root: List[Invoice]


class DisputesGetResponse(RootModel[List[Dispute]]):
    root: List[Dispute]


class InvoicesGetResponse(RootModel[List[Invoice]]):
    root: List[Invoice]


class PaymentCardsGetResponse(RootModel[List[PaymentCard]]):
    root: List[PaymentCard]


class PaymentInstrumentsGetResponse(RootModel[List[PaymentInstrument21]]):
    root: List[PaymentInstrument21]


class PaymentInstrumentsPostRequest(
    RootModel[
        Union[
            PaymentInstrumentCreateToken,
            PaymentCardCreatePlain,
            BankAccountCreatePlain,
            PayPalAccount,
        ]
    ]
):
    root: Union[
        PaymentInstrumentCreateToken,
        PaymentCardCreatePlain,
        BankAccountCreatePlain,
        PayPalAccount,
    ]


class PaypalAccountsGetResponse(RootModel[List[PayPalAccount]]):
    root: List[PayPalAccount]


class SearchGetResponse(RootModel[List[Search]]):
    root: List[Search]


class SubscriptionsIdUpcomingInvoicesGetResponse(RootModel[List[Invoice]]):
    root: List[Invoice]


class TransactionsGetResponse(RootModel[List[Transaction]]):
    root: List[Transaction]


class OneTimeOrder(CommonOneTimeOrder, SubscriptionMetadata):
    customerId: ResourceId = Field(..., description='The customer identifier string.')
    orderType: OrderType = Field(
        ...,
        description='Specifies the type of order, a subscription or a one-time purchase.\n',
    )
    websiteId: ResourceId = Field(..., description='The website identifier string.')
    items: List[Item] = Field(..., min_length=1)


class SubscriptionOrder(
    CommonSubscriptionOrder, SubscriptionCancellationState, SubscriptionMetadata
):
    customerId: ResourceId = Field(..., description='The customer identifier string.')
    renewalReminderNumber: Optional[int] = Field(
        None, description='Number of renewal reminder events triggered.'
    )
    renewalReminderTime: Optional[ServerTimestamp] = Field(
        None, description='Time renewal reminder event will be triggered.'
    )
    trialReminderNumber: Optional[int] = Field(
        None, description='Number of renewal reminder events triggered.'
    )
    trialReminderTime: Optional[ServerTimestamp] = Field(
        None, description='Time renewal reminder event will be triggered.'
    )
    orderType: OrderType = Field(
        ...,
        description='Specifies the type of order, a subscription or a one-time purchase.\n',
    )
    websiteId: ResourceId = Field(..., description='The website identifier string.')
    items: List[Item] = Field(..., min_length=1)


AuthTransactionEmbed.model_rebuild()
Dispute.model_rebuild()
InitialInvoiceEmbed.model_rebuild()
Invoice.model_rebuild()
ParentTransactionEmbed.model_rebuild()
RetriedTransactionEmbed.model_rebuild()
Search.model_rebuild()
